// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.6.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      var t1 = A._setArrayType(allocation, $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      return t1;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$buffer$x(receiver) {
      return J.getInterceptor$x(receiver).get$buffer(receiver);
    },
    get$current$z(receiver) {
      return J.getInterceptor$z(receiver).get$current(receiver);
    },
    get$entries$x(receiver) {
      return J.getInterceptor$x(receiver).get$entries(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$x(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$nodeType$x(receiver) {
      return J.getInterceptor$x(receiver).get$nodeType(receiver);
    },
    get$reversed$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    allMatches$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
    },
    asByteData$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asByteData$2(receiver, a0, a1);
    },
    asUint8List$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asUint8List$2(receiver, a0, a1);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getAttribute$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).getAttribute$1(receiver, a0);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    map$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    ReachabilityError$(_message) {
      return new A.ReachabilityError(_message);
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    ReachabilityError: function ReachabilityError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable(t0) {
      this._backedList = t0;
    },
    ListMapView: function ListMapView(t0, t1) {
      this.__internal$_values = t0;
      this.$ti = t1;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, values, map,
        keys = A.List_List$from(new A.LinkedHashMapKeyIterable(other, A._instanceType(other)._eval$1("LinkedHashMapKeyIterable<1>")), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          $V._as(other.$index(0, k));
          index0 = index + 1;
          object[k] = index;
        }
        values = A.List_List$from(other.get$values(0), true, $V);
        map = new A.ConstantStringMap(object, values, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    instantiate1(f, T1) {
      var t1 = new A.Instantiation1(f, T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    JSInvocationMirror$(_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount) {
      return new A.JSInvocationMirror(_memberName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount);
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = B.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_parseBool(source, caseSensitive) {
      var t1;
      A.checkNotNullable(source, "source", type$.String);
      A.checkNotNullable(true, "caseSensitive", type$.bool);
      if (source === "true")
        t1 = true;
      else
        t1 = source === "false" ? false : null;
      return t1;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, microseconds, isUtc) {
      var remainder, value, t1,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      remainder = B.JSInt_methods.$mod(microseconds, 1000);
      value = Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds + B.JSInt_methods._tdivFast$1(microseconds - remainder, 1000));
      t1 = true;
      if (!isNaN(value))
        if (!(value < -864e13))
          if (!(value > 864e13))
            t1 = value === 864e13 && remainder !== 0;
      if (t1)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var jsStub,
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      if (t1) {
        if (!!$function.call$0)
          return $function.call$0();
        jsStub = $function["call" + "$0"];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, $arguments, keys, _i, defaultValue, used, key,
        requiredParameterCount = $function.$requiredArgCount;
      if (0 < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
        if (0 === requiredParameterCount)
          return jsFunction.apply($function, positionalArguments);
        return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (0 > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, null);
        if (0 < maxArguments) {
          missingDefaults = defaultValues.slice(0 - requiredParameterCount);
          $arguments = A.List_List$of(positionalArguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        } else
          $arguments = positionalArguments;
        return jsFunction.apply($function, $arguments);
      } else {
        if (0 > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
        $arguments = A.List_List$of(positionalArguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(0, key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    Primitives_trySetStackTrace(error, stackTrace) {
      var jsError;
      if (error.$thrownJsError == null) {
        jsError = A.wrapException(error);
        error.$thrownJsError = jsError;
        jsError.stack = stackTrace.toString$0(0);
      }
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpressionWithWrapper(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(0);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A._CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    _RecordN__equalValues(a, b) {
      var i, t1;
      for (i = 0; i < a.length; ++i) {
        t1 = a[i];
        if (!(i < b.length))
          return A.ioore(b, i);
        if (!J.$eq$(t1, b[i]))
          return false;
      }
      return true;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
      var match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, match._match.index, match.get$end(0), replacement);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current(t1);
        t2 = t2 + receiver.substring(startIndex, match.get$start(match)) + replacement;
        startIndex = match.get$end(match);
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match, t2, e;
      if (typeof pattern == "string") {
        index = receiver.indexOf(pattern, startIndex);
        if (index < 0)
          return receiver;
        return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
      }
      if (pattern instanceof A.JSSyntaxRegExp)
        return startIndex === 0 ? receiver.replace(pattern._nativeRegExp, A.escapeReplacement(replacement)) : A.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      t1 = J.allMatches$2$s(pattern, receiver, startIndex);
      matches = t1.get$iterator(t1);
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current(matches);
      t1 = match.get$start(match);
      t2 = match.get$end(match);
      e = A.RangeError_checkValidRange(t1, t2, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, t1, e, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_3: function _Record_3(t0, t1, t2) {
      this._0 = t0;
      this._1 = t1;
      this._2 = t2;
    },
    _Record_4: function _Record_4(t0) {
      this._values = t0;
    },
    _Record_5: function _Record_5(t0) {
      this._values = t0;
    },
    _Record_8: function _Record_8(t0) {
      this._values = t0;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    ConstantSet: function ConstantSet() {
    },
    GeneralConstantSet: function GeneralConstantSet(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    _Record3: function _Record3() {
    },
    _RecordN: function _RecordN() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has not been initialized."), new Error());
    },
    throwLateFieldAI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has already been initialized."), new Error());
    },
    throwLateFieldADI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1._value = t1;
    },
    _Cell: function _Cell(t0) {
      this._name = t0;
      this._value = null;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      var t1;
      A._checkViewArguments(buffer, offsetInBytes, $length);
      t1 = new DataView(buffer, offsetInBytes, $length);
      return t1;
    },
    NativeInt32List_NativeInt32List($length) {
      return new Int32Array($length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    _UnmodifiableNativeByteBufferView: function _UnmodifiableNativeByteBufferView(t0) {
      this._data = t0;
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    pairwiseIsTest(fieldRtis, values) {
      var i,
        $length = values.length;
      for (i = 0; i < $length; ++i)
        if (!fieldRtis[i]._is(values[i]))
          return false;
      return true;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = A._createRuntimeType(rti) : t1;
    },
    _createRuntimeType(rti) {
      var starErasedRti, t1,
        s = rti._canonicalRecipe,
        starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      t1 = starErasedRti._cachedRuntimeType;
      return t1 == null ? starErasedRti._cachedRuntimeType = A._createRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, unstarredKind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (t1 === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      unstarred = t1 === 6 ? testRti._primary : testRti;
      unstarredKind = unstarred._kind;
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isDefinitelyTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11) {
        predicate = A.createRecordTypePredicate(unstarred._primary, unstarred._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var kind = testRti._kind,
        t1 = true;
      if (!A.isSoundTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null))));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this,
        unstarred = testRti._kind === 6 ? testRti._primary : testRti;
      return unstarred._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, unstarred)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = typeParametersText + typeSep + genericContext[t4];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            t3 = boundRti === t2;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6)
        return A._rtiToString(rti._primary, genericContext);
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isSoundTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isSoundTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isSoundTopType(baseType) || baseType === type$.Object || baseType === type$.legacy_Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 12:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null, false) ? 1 : 0;
        sCache.set(t, result);
      }
      if (0 === result)
        return false;
      if (1 === result)
        return true;
      return true;
    },
    _isSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, sKind, leftTypeVariable, tKind, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isSoundTopType(s))
        return false;
      t1 = s._kind;
      if (t1 === 1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv, false))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv, false);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv, false))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv, false);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv, false);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv, false))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv, false);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv, false);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      t2 = sKind === 11;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv, false) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv, false))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv, false);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv, false);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv, false))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv, false))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv, false);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv, false);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv, isLegacy) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv, false))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv, false))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isSoundTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
      return t1;
    },
    isDefinitelyTopType(t) {
      var t1;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      return t1;
    },
    isSoundTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      type$.void_Function._as(callback);
      A._TimerImpl$(0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_uwd;
    },
    Future_wait(futures, $T) {
      var handleError, future, pos, e, st, t2, _i, t3, exception, _0_0, _box_0 = {}, cleanUp = null,
        eagerError = false,
        t1 = $T._eval$1("_Future<List<0>>"),
        _future = new A._Future($.Zone__current, t1);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future);
      try {
        for (t2 = type$.Null, _i = 0, t3 = 0; _i < 3; ++_i) {
          future = futures[_i];
          pos = t3;
          future.then$1$2$onError(new A.Future_wait_closure(_box_0, pos, _future, $T, cleanUp, eagerError), handleError, t2);
          t3 = ++_box_0.remaining;
        }
        if (t3 === 0) {
          t2 = _future;
          t2._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t2;
        }
        _box_0.values = A.List_List$filled(t3, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || A.boolConversionCheck(eagerError)) {
          _0_0 = A._interceptUserError(e, st);
          t1 = new A._Future($.Zone__current, t1);
          t1._asyncCompleteError$2(_0_0.error, _0_0.stackTrace);
          return t1;
        } else {
          _box_0.error = e;
          _box_0.stackTrace = st;
        }
      }
      return _future;
    },
    Completer_Completer($T) {
      return new A._AsyncCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>"));
    },
    _interceptError(error, stackTrace) {
      if ($.Zone__current === B.C__RootZone)
        return null;
      return null;
    },
    _interceptUserError(error, stackTrace) {
      if ($.Zone__current !== B.C__RootZone)
        A._interceptError(error, stackTrace);
      if (stackTrace == null)
        if (type$.Error._is(error)) {
          stackTrace = error.get$stackTrace();
          if (stackTrace == null) {
            A.Primitives_trySetStackTrace(error, B._StringStackTrace_uwd);
            stackTrace = B._StringStackTrace_uwd;
          }
        } else
          stackTrace = B._StringStackTrace_uwd;
      else if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
      return new A.AsyncError(error, stackTrace);
    },
    _Future$value(value, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFutureSync(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if (source === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, source, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      t1 = t2 | target._state & 1;
      source._state = t1;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__chainCoreFutureAsync(source, target) {
      var t2, t3, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      if ((t3 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(t1);
        _box_0.source._prependListeners$1(listeners);
        return;
      }
      if ((t3 & 16) === 0 && target._resultOrListeners == null) {
        target._cloneResult$1(t1);
        return;
      }
      target._state ^= 2;
      A._rootScheduleMicrotask(null, null, target._zone, type$.void_Function._as(new A._Future__chainCoreFutureAsync_closure(_box_0, target)));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t5 = t5._zone === zone;
            t5 = !(t5 || t5);
          } else
            t5 = false;
          if (t5) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFutureSync(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.T = t3;
      _.cleanUp = t4;
      _.eagerError = t5;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__chainCoreFutureAsync_closure: function _Future__chainCoreFutureAsync_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return $E._eval$1("LinkedHashSet<0>")._as(A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"))));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HashMap: function _HashMap() {
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, i, t1, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (i = 0; i < $length; ++i) {
        t1 = start + i;
        if (!(t1 < codeUnits.length))
          return A.ioore(codeUnits, t1);
        b = codeUnits[t1];
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? A.convert___defaultToEncodable$closure() : _toEncodable;
      return new A._JsonStringStringifier(_sink, [], t1);
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var stringifier, t1,
        output = new A.StringBuffer("");
      if (indent == null)
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      else {
        t1 = toEncodable == null ? A.convert___defaultToEncodable$closure() : toEncodable;
        stringifier = new A._JsonStringStringifierPretty(indent, 0, output, [], t1);
      }
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch;
      if (source === "")
        return null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      if (decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (hexMatch != null)
        return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
      return null;
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods.$shr(digit, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl((digit & bitMask) >>> 0, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(digitShift >= 0 && digitShift < resultDigits.length))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.$flags | 0, i = digitsShift; --i, i >= 0;) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t1 = resultUsed - 1;
      if (!(t1 >= 0 && t1 < resultDigits.length))
        return A.ioore(resultDigits, t1);
      if (resultDigits[t1] === 0)
        resultUsed = t1;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods.$shr(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.$flags | 0, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods.$shr(digit, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(last >= 0 && last < resultDigits.length))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      t3 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(used >= 0 && used < resultDigits.length))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, t3, c, i0, t4, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, t3 = accumulatorDigits.$flags | 0, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t4 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t4 + accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    int_parse(source) {
      var value = A.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    double_parse(source) {
      var value = A.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$("Invalid double", source, null));
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current(t1)));
      if (growable)
        return list;
      list.$flags = 1;
      return list;
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = A.List_List$_of(elements, $E);
      t1.$flags = 1;
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current(t1));
      return list;
    },
    List_List$generate($length, generator, $E) {
      var i,
        result = J.JSArray_JSArray$growable($length, $E);
      for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    List_List$unmodifiable(elements, $E) {
      var result = A.List_List$from(elements, false, $E);
      result.$flags = 3;
      return result;
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var t1, t2, maxLength, array, len;
      A.RangeError_checkNotNegative(start, "start");
      t1 = end == null;
      t2 = !t1;
      if (t2) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        if (t1)
          end = len;
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      if (t2)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      return A.Primitives_stringFromCharCodes(A.List_List$of(charCodes, true, type$.int));
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, caseSensitive) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, false));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, invocation) {
      return new A.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments());
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime$utc(year, month, day, hour, minute, second, millisecond, microsecond) {
      var t2,
        t1 = A.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, second, millisecond, microsecond, true);
      if (t1 == null)
        t1 = 864e14;
      t2 = B.JSInt_methods.$mod(microsecond, 1000);
      if (t1 === 864e14)
        A.throwExpression(A.ArgumentError$("(" + year + ", " + month + ", " + day + ", " + hour + ", " + minute + ", " + second + ", " + millisecond + ", " + microsecond + ")", null));
      return new A.DateTime(t1, t2, true);
    },
    DateTime__validate(millisecondsSinceEpoch, microsecond, isUtc) {
      var _s11_ = "microsecond";
      if (microsecond < 0 || microsecond > 999)
        throw A.wrapException(A.RangeError$range(microsecond, 0, 999, _s11_, null));
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        throw A.wrapException(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (millisecondsSinceEpoch === 864e13 && microsecond !== 0)
        throw A.wrapException(A.ArgumentError$value(microsecond, _s11_, "Time including microseconds is outside valid range"));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return millisecondsSinceEpoch;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(microseconds, milliseconds) {
      return new A.Duration(microseconds + 1000 * milliseconds);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    IndexError_check(index, $length, indexable, message, $name) {
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$withLength(index, $length, indexable, message, "index"));
      return index;
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current(it));
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    num_parse(input) {
      var source = B.JSString_methods.trim$0(input),
        result = A.Primitives_parseInt(source, null);
      if (result == null)
        result = A.Primitives_parseDouble(source);
      if (result != null)
        return result;
      throw A.wrapException(A.FormatException$(input, null, null));
    },
    Object_hash(object1, object2, object3, object4, object5, object6, object7, object8, object9) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      if (B.C_SentinelValue === object5) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      }
      if (B.C_SentinelValue === object6) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5));
      }
      if (B.C_SentinelValue === object7) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6));
      }
      if (B.C_SentinelValue === object8) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        object7 = J.get$hashCode$(object7);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6), object7));
      }
      if (B.C_SentinelValue === object9) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        object7 = J.get$hashCode$(object7);
        object8 = J.get$hashCode$(object8);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6), object7), object8));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object5 = J.get$hashCode$(object5);
      object6 = J.get$hashCode$(object6);
      object7 = J.get$hashCode$(object7);
      object8 = J.get$hashCode$(object8);
      object9 = J.get$hashCode$(object9);
      object9 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6), object7), object8), object9));
      return object9;
    },
    Object_hashAll(objects) {
      var t1, _i,
        hash = $.$get$_hashSeed();
      for (t1 = objects.length, _i = 0; _i < objects.length; objects.length === t1 || (0, A.throwConcurrentModificationError)(objects), ++_i)
        hash = A.SystemHash_combine(hash, J.get$hashCode$(objects[_i]));
      return A.SystemHash_finish(hash);
    },
    print(object) {
      A.printString(A.S(object));
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._core$_value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._core$_stackTrace = t0;
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._core$_position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    Blob: function Blob() {
    },
    CharacterData: function CharacterData() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    Element: function Element() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileWriter: function FileWriter() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    Location: function Location() {
    },
    MediaList: function MediaList() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    SelectElement: function SelectElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    StyleSheet: function StyleSheet() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._length = t1;
      _._position = -1;
      _._current = null;
      _.$ti = t2;
    },
    _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase: function _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase() {
    },
    _DomRectList_JavaScriptObject_ListMixin: function _DomRectList_JavaScriptObject_ListMixin() {
    },
    _DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin: function _DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_JavaScriptObject_ListMixin: function _DomStringList_JavaScriptObject_ListMixin() {
    },
    _DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin: function _DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _FileList_JavaScriptObject_ListMixin: function _FileList_JavaScriptObject_ListMixin() {
    },
    _FileList_JavaScriptObject_ListMixin_ImmutableListMixin: function _FileList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin: function _HtmlCollection_JavaScriptObject_ListMixin() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin: function _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_JavaScriptObject_MapMixin: function _MidiInputMap_JavaScriptObject_MapMixin() {
    },
    _MidiOutputMap_JavaScriptObject_MapMixin: function _MidiOutputMap_JavaScriptObject_MapMixin() {
    },
    _MimeTypeArray_JavaScriptObject_ListMixin: function _MimeTypeArray_JavaScriptObject_ListMixin() {
    },
    _MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin: function _MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin: function _NodeList_JavaScriptObject_ListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin: function _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_JavaScriptObject_ListMixin: function _PluginArray_JavaScriptObject_ListMixin() {
    },
    _PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin: function _PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_JavaScriptObject_MapMixin: function _RtcStatsReport_JavaScriptObject_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_JavaScriptObject_ListMixin: function _SpeechGrammarList_JavaScriptObject_ListMixin() {
    },
    _SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin: function _SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _Storage_JavaScriptObject_MapMixin: function _Storage_JavaScriptObject_MapMixin() {
    },
    _TextTrackCueList_JavaScriptObject_ListMixin: function _TextTrackCueList_JavaScriptObject_ListMixin() {
    },
    _TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_JavaScriptObject_ListMixin: function _TouchList_JavaScriptObject_ListMixin() {
    },
    _TouchList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TouchList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_JavaScriptObject_ListMixin: function __CssRuleList_JavaScriptObject_ListMixin() {
    },
    __CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin: function __CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_JavaScriptObject_ListMixin: function __GamepadList_JavaScriptObject_ListMixin() {
    },
    __GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin: function __GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_JavaScriptObject_ListMixin: function __SpeechRecognitionResultList_JavaScriptObject_ListMixin() {
    },
    __SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_JavaScriptObject_ListMixin: function __StyleSheetList_JavaScriptObject_ListMixin() {
    },
    __StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin: function __StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _functionToJS1(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _noJsifyRequired(o) {
      return o == null || A._isBool(o) || typeof o == "number" || typeof o == "string" || type$.Int8List._is(o) || type$.Uint8List._is(o) || type$.Uint8ClampedList._is(o) || type$.Int16List._is(o) || type$.Uint16List._is(o) || type$.Int32List._is(o) || type$.Uint32List._is(o) || type$.Float32List._is(o) || type$.Float64List._is(o) || type$.ByteBuffer._is(o) || type$.ByteData._is(o);
    },
    jsify(object) {
      if (A._noJsifyRequired(object))
        return object;
      return new A.jsify__convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(object);
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    _noDartifyRequired(o) {
      return o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string" || o instanceof Int8Array || o instanceof Uint8Array || o instanceof Uint8ClampedArray || o instanceof Int16Array || o instanceof Uint16Array || o instanceof Int32Array || o instanceof Uint32Array || o instanceof Float32Array || o instanceof Float64Array || o instanceof ArrayBuffer || o instanceof DataView;
    },
    dartify(o) {
      if (A._noDartifyRequired(o))
        return o;
      return new A.dartify_convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(o);
    },
    jsify__convert: function jsify__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    dartify_convert: function dartify_convert(t0) {
      this._convertedObjects = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    StringList: function StringList() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_JavaScriptObject_ListMixin: function _LengthList_JavaScriptObject_ListMixin() {
    },
    _LengthList_JavaScriptObject_ListMixin_ImmutableListMixin: function _LengthList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _NumberList_JavaScriptObject_ListMixin: function _NumberList_JavaScriptObject_ListMixin() {
    },
    _NumberList_JavaScriptObject_ListMixin_ImmutableListMixin: function _NumberList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _StringList_JavaScriptObject_ListMixin: function _StringList_JavaScriptObject_ListMixin() {
    },
    _StringList_JavaScriptObject_ListMixin_ImmutableListMixin: function _StringList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _TransformList_JavaScriptObject_ListMixin: function _TransformList_JavaScriptObject_ListMixin() {
    },
    _TransformList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TransformList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    Endian: function Endian() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_JavaScriptObject_MapMixin: function _AudioParamMap_JavaScriptObject_MapMixin() {
    },
    Archive: function Archive(t0, t1) {
      this._files = t0;
      this._fileMap = t1;
    },
    ArchiveFile$($name, size, $content, _compressionType) {
      var t2,
        t1 = new A.ArchiveFile($name, size, B.JSInt_methods._tdivFast$1(Date.now(), 1000), _compressionType);
      t1.name = A.stringReplaceAllUnchecked($name, "\\", "/");
      if (type$.Uint8List._is($content)) {
        t1._content = $content;
        t1._rawContent = A.InputStream$($content, 0, null, 0);
        if (size <= 0)
          t1.size = $content.length;
      } else if (type$.TypedData._is($content)) {
        t2 = t1._content = J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer($content), 0, null);
        t1._rawContent = A.InputStream$(t2, 0, null, 0);
        if (size <= 0)
          t1.size = t2.length;
      } else if (type$.List_int._is($content)) {
        t1._content = $content;
        t1._rawContent = A.InputStream$($content, 0, null, 0);
        if (size <= 0)
          t1.size = $content.length;
      } else if ($content instanceof A.ZipFile) {
        t2 = $content.__ZipFile__rawContent_A;
        t2 === $ && A.throwLateFieldNI("_rawContent");
        t1._rawContent = t2;
        t1._content = $content;
      }
      return t1;
    },
    ArchiveFile: function ArchiveFile(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.size = t1;
      _.mode = 420;
      _.lastModTime = t2;
      _._compressionType = t3;
      _._content = _._rawContent = null;
    },
    Bz2BitReader: function Bz2BitReader(t0) {
      this.input = t0;
      this._bitPos = this._bz2_bit_reader$_bitBuffer = 0;
    },
    BZip2Decoder: function BZip2Decoder() {
      var _ = this;
      _.__BZip2Decoder__numSelectors_A = _.__BZip2Decoder__unzftab_A = _.__BZip2Decoder__minLens_A = _.__BZip2Decoder__perm_A = _.__BZip2Decoder__base_A = _.__BZip2Decoder__limit_A = _.__BZip2Decoder__selector_A = _.__BZip2Decoder__selectorMtf_A = _.__BZip2Decoder__mtfbase_A = _.__BZip2Decoder__mtfa_A = _.__BZip2Decoder__seqToUnseq_A = _.__BZip2Decoder__inUse_A = _.__BZip2Decoder__inUse16_A = _.__BZip2Decoder__tt_A = _.__BZip2Decoder__blockSize100k_A = $;
      _._groupPos = 0;
      _._groupNo = -1;
      _._gMinlen = _._gSel = 0;
      _.__BZip2Decoder__len_A = _.__BZip2Decoder__cftab_A = _.__BZip2Decoder__gBase_A = _.__BZip2Decoder__gPerm_A = _.__BZip2Decoder__gLimit_A = $;
      _._numInUse = 0;
    },
    FileContent: function FileContent() {
    },
    Uint8ListEquality_equals(mac, computedMac) {
      var v, i, t3,
        t1 = mac.length,
        t2 = computedMac.length;
      if (t1 !== t2)
        return false;
      for (v = 0, i = 0; i < t1; ++i) {
        t3 = mac[i];
        if (!(i < t2))
          return A.ioore(computedMac, i);
        v |= t3 ^ computedMac[i];
      }
      return v === 0;
    },
    AesCipherUtil_prepareBuffAESIVBytes(buff, nonce) {
      var t1, i;
      buff.$flags & 2 && A.throwUnsupportedOperation(buff);
      buff[0] = nonce & 255;
      buff[1] = nonce >>> 8 & 255;
      buff[2] = nonce >>> 16 & 255;
      buff[3] = nonce >>> 24 & 255;
      for (t1 = buff.$flags | 0, i = 4; i <= 15; ++i) {
        t1 & 2 && A.throwUnsupportedOperation(buff);
        if (!(i < 16))
          return A.ioore(buff, i);
        buff[i] = 0;
      }
    },
    Aes: function Aes(t0, t1, t2) {
      var _ = this;
      _.nonce = 1;
      _.iv = t0;
      _.counterBlock = t1;
      _.derivedKey = t2;
      _.aesEngine = null;
      _.__Aes_mac_A = _.__Aes__macGen_A = $;
    },
    ArchiveException$(message) {
      return new A.ArchiveException(message, null, null);
    },
    ArchiveException: function ArchiveException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    shiftl32(x, n) {
      n &= 31;
      return (x & $._mask32HiBits[n]) << n >>> 0;
    },
    rotr32(x, n) {
      n &= 31;
      return (x >>> n | A.shiftl32(x, 32 - n)) >>> 0;
    },
    Register64$(hiOrLo32OrY) {
      var t2,
        t1 = new A.Register64();
      if (A._isInt(hiOrLo32OrY))
        t1.setInt$2(hiOrLo32OrY, null);
      else {
        type$.Register64._as(hiOrLo32OrY);
        t2 = hiOrLo32OrY.__Register64__hi32_A;
        t2 === $ && A.throwLateFieldNI("_hi32");
        t1.__Register64__hi32_A = t2;
        t2 = hiOrLo32OrY.__Register64__lo32_A;
        t2 === $ && A.throwLateFieldNI("_lo32");
        t1.__Register64__lo32_A = t2;
      }
      return t1;
    },
    SHA1Digest$() {
      var t1 = A.Register64$(0),
        t2 = new Uint8Array(4),
        t3 = type$.int;
      t3 = new A.SHA1Digest(t1, t2, B.C_Endian0, 5, A.List_List$filled(5, 0, false, t3), A.List_List$filled(80, 0, false, t3));
      t3.reset$0(0);
      return t3;
    },
    HMac$(_digest, _blockLength) {
      var t1 = new A.HMac(_digest, _blockLength);
      t1.__HMac__digestSize_A = 20;
      t1.__HMac__inputPad_A = new Uint8Array(_blockLength);
      t1.__HMac__outputBuf_A = new Uint8Array(_blockLength + 20);
      return t1;
    },
    CipherParameters: function CipherParameters() {
    },
    Pbkdf2Parameters: function Pbkdf2Parameters(t0, t1, t2) {
      this.salt = t0;
      this.iterationCount = t1;
      this.desiredKeyLength = t2;
    },
    BaseKeyDerivator: function BaseKeyDerivator() {
    },
    KeyParameter: function KeyParameter(t0) {
      this.__KeyParameter_key_A = t0;
    },
    PBKDF2KeyDerivator: function PBKDF2KeyDerivator(t0) {
      this.__PBKDF2KeyDerivator__params_A = $;
      this._mac = t0;
      this.__PBKDF2KeyDerivator__state_A = $;
    },
    BaseMac: function BaseMac() {
    },
    BaseDigest: function BaseDigest() {
    },
    Register64: function Register64() {
      this.__Register64__lo32_A = this.__Register64__hi32_A = $;
    },
    MD4FamilyDigest: function MD4FamilyDigest() {
    },
    SHA1Digest: function SHA1Digest(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._byteCount = t0;
      _._wordBuffer = t1;
      _.__MD4FamilyDigest__wordBufferOffset_A = $;
      _._endian = t2;
      _._packedStateSize = t3;
      _.state = t4;
      _.buffer = t5;
      _.__MD4FamilyDigest_bufferOffset_A = $;
    },
    HMac: function HMac(t0, t1) {
      var _ = this;
      _._digest = t0;
      _.__HMac__digestSize_A = $;
      _.__HMac__blockLength_A = t1;
      _.__HMac__outputBuf_A = _.__HMac__inputPad_A = $;
    },
    BaseBlockCipher: function BaseBlockCipher() {
    },
    AESEngine: function AESEngine(t0) {
      var _ = this;
      _._rounds = 0;
      _.__AESEngine__workingKey_A = $;
      _._forEncryption = false;
      _._s = t0;
    },
    InputStream$(data, byteOrder, $length, start) {
      var t1, t2;
      if (type$.TypedData._is(data))
        t1 = J.asUint8List$2$x(J.get$buffer$x(data), data.byteOffset, data.byteLength);
      else
        t1 = type$.List_int._is(data) ? data : A.List_List$from(type$.Iterable_dynamic._as(data), true, type$.int);
      t2 = new A.InputStream(t1, start, start, byteOrder, $);
      t2.__InputStream__length_A = $length == null ? J.get$length$asx(t1) : $length;
      return t2;
    },
    InputStreamBase: function InputStreamBase() {
    },
    InputStream: function InputStream(t0, t1, t2, t3, t4) {
      var _ = this;
      _.buffer = t0;
      _.offset = t1;
      _.start = t2;
      _.byteOrder = t3;
      _.__InputStream__length_A = t4;
    },
    OutputStream$(size) {
      var t1 = size == null ? 32768 : size;
      return new A.OutputStream(new Uint8Array(t1));
    },
    OutputStreamBase: function OutputStreamBase() {
    },
    OutputStream: function OutputStream(t0) {
      this.length = 0;
      this._output_stream$_buffer = t0;
    },
    ZipDirectory: function ZipDirectory(t0) {
      var _ = this;
      _.filePosition = -1;
      _.totalCentralDirectoryEntriesOnThisDisk = _.numberOfThisDisk = 0;
      _.__ZipDirectory_centralDirectoryOffset_A = _.__ZipDirectory_centralDirectorySize_A = $;
      _.fileHeaders = t0;
    },
    ZipFile_deriveKey(password, salt, derivedKeyLength) {
      var passwordBytes, totalSize, t1, keyDerivator, out;
      if (password.get$isEmpty(password))
        return new Uint8Array(0);
      passwordBytes = new Uint8Array(A._ensureNativeList(password.get$codeUnits(password)));
      totalSize = derivedKeyLength * 2 + 2;
      t1 = A.HMac$(A.SHA1Digest$(), 64);
      keyDerivator = new A.PBKDF2KeyDerivator(t1);
      t1 = t1.__HMac__digestSize_A;
      t1 === $ && A.throwLateFieldNI("_digestSize");
      keyDerivator.__PBKDF2KeyDerivator__state_A = new Uint8Array(t1);
      keyDerivator.__PBKDF2KeyDerivator__params_A = new A.Pbkdf2Parameters(salt, 1000, totalSize);
      out = new Uint8Array(totalSize);
      return B.NativeUint8List_methods.sublist$2(out, 0, keyDerivator.deriveKey$4(passwordBytes, 0, out, 0));
    },
    AesHeader: function AesHeader(t0, t1) {
      this.encryptionStrength = t0;
      this.compressionMethod = t1;
    },
    ZipFile: function ZipFile(t0, t1, t2) {
      var _ = this;
      _.signature = 67324752;
      _.lastModFileDate = _.lastModFileTime = _.compressionMethod = _.flags = 0;
      _.uncompressedSize = _.compressedSize = _.crc32 = null;
      _.filename = "";
      _.extraField = t0;
      _.header = t1;
      _.__ZipFile__rawContent_A = $;
      _._zip_file$_content = null;
      _._encryptionType = 0;
      _._password = _._aesHeader = null;
      _._zip_file$_keys = t2;
    },
    ZipFileHeader: function ZipFileHeader(t0) {
      var _ = this;
      _.versionMadeBy = 0;
      _.localHeaderOffset = _.externalFileAttributes = _.diskNumberStart = _.uncompressedSize = _.compressedSize = null;
      _.filename = "";
      _.extraField = t0;
      _.file = null;
    },
    ZipDecoder: function ZipDecoder() {
      this.__ZipDecoder_directory_A = $;
    },
    HuffmanTable$(lengths) {
      var t1 = new A.HuffmanTable();
      t1.HuffmanTable$1(lengths);
      return t1;
    },
    HuffmanTable: function HuffmanTable() {
      this.__HuffmanTable_table_A = $;
      this.maxCodeLength = 0;
      this.minCodeLength = 2147483647;
    },
    Inflate$(bytes) {
      var t1 = A.HuffmanTable$(B.List_s8I),
        t2 = A.HuffmanTable$(B.List_lnn);
      t2 = new A.Inflate(A.InputStream$(bytes, 0, null, 0), A.OutputStream$(null), t1, t2);
      t2.inputSet = true;
      t2._inflate$0();
      return t2;
    },
    Inflate: function Inflate(t0, t1, t2, t3) {
      var _ = this;
      _.__Inflate_input_A = t0;
      _.inputSet = false;
      _.output = t1;
      _._bitBufferLen = _._bitBuffer = 0;
      _._fixedLiteralLengthTable = t2;
      _._fixedDistanceTable = t3;
    },
    CancelationToken: function CancelationToken() {
    },
    DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    },
    ListEquality: function ListEquality(t0) {
      this.$ti = t0;
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingList: function DelegatingList() {
    },
    Equatable: function Equatable() {
    },
    iterableEquals(a, b) {
      var t1, t2, i;
      if (a === b)
        return true;
      t1 = J.getInterceptor$asx(a);
      t2 = J.getInterceptor$asx(b);
      if (t1.get$length(a) !== t2.get$length(b))
        return false;
      for (i = 0; i < t1.get$length(a); ++i)
        if (!A.objectsEquals(t1.elementAt$1(a, i), t2.elementAt$1(b, i)))
          return false;
      return true;
    },
    setEquals(a, b) {
      var t1;
      if (a === b)
        return true;
      if (a.get$length(a) !== b.get$length(b))
        return false;
      for (t1 = a.get$iterator(a); t1.moveNext$0();)
        if (!b.any$1(0, new A.setEquals_closure(t1.get$current(t1))))
          return false;
      return true;
    },
    mapEquals(a, b) {
      var t1, t2, t3, key;
      if (a === b)
        return true;
      t1 = J.getInterceptor$asx(a);
      t2 = J.getInterceptor$asx(b);
      if (t1.get$length(a) !== t2.get$length(b))
        return false;
      for (t3 = J.get$iterator$ax(t1.get$keys(a)); t3.moveNext$0();) {
        key = t3.get$current(t3);
        if (!A.objectsEquals(t1.$index(a, key), t2.$index(b, key)))
          return false;
      }
      return true;
    },
    objectsEquals(a, b) {
      var t1;
      if (a == null ? b == null : a === b)
        return true;
      if (typeof a == "number" && typeof b == "number")
        return false;
      else {
        if (a instanceof A.Equatable)
          t1 = b instanceof A.Equatable;
        else
          t1 = false;
        if (t1)
          return J.$eq$(a, b);
        else {
          t1 = type$.Set_dynamic;
          if (t1._is(a) && t1._is(b))
            return A.setEquals(a, b);
          else {
            t1 = type$.Iterable_dynamic;
            if (t1._is(a) && t1._is(b))
              return A.iterableEquals(a, b);
            else {
              t1 = type$.Map_dynamic_dynamic;
              if (t1._is(a) && t1._is(b))
                return A.mapEquals(a, b);
              else {
                t1 = a == null ? null : J.get$runtimeType$(a);
                if (t1 != (b == null ? null : J.get$runtimeType$(b)))
                  return false;
                else if (!J.$eq$(a, b))
                  return false;
              }
            }
          }
        }
      }
      return true;
    },
    _combine(hash, object) {
      var t1, value, t2, _box_0 = {};
      _box_0.hash = hash;
      _box_0.object = object;
      if (type$.Map_dynamic_dynamic._is(object)) {
        B.JSArray_methods.forEach$1(A.IterableExtension_sorted(J.get$keys$x(object), new A._combine_closure(), type$.dynamic), new A._combine_closure0(_box_0));
        return _box_0.hash;
      }
      t1 = type$.Set_dynamic._is(object) ? _box_0.object = A.IterableExtension_sorted(object, new A._combine_closure1(), type$.dynamic) : object;
      if (type$.Iterable_dynamic._is(t1)) {
        for (t1 = J.get$iterator$ax(t1); t1.moveNext$0();) {
          value = t1.get$current(t1);
          t2 = _box_0.hash;
          _box_0.hash = (t2 ^ A._combine(t2, value)) >>> 0;
        }
        return (_box_0.hash ^ J.get$length$asx(_box_0.object)) >>> 0;
      }
      hash = _box_0.hash = hash + J.get$hashCode$(t1) & 536870911;
      hash = _box_0.hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    mapPropsToString(runtimeType, props) {
      var t1 = A._arrayInstanceType(props);
      return runtimeType.toString$0(0) + "(" + new A.MappedListIterable(props, t1._eval$1("String(1)")._as(new A.mapPropsToString_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, ", ") + ")";
    },
    setEquals_closure: function setEquals_closure(t0) {
      this.element = t0;
    },
    _combine_closure: function _combine_closure() {
    },
    _combine_closure0: function _combine_closure0(t0) {
      this._box_0 = t0;
    },
    _combine_closure1: function _combine_closure1() {
    },
    mapPropsToString_closure: function mapPropsToString_closure() {
    },
    _newExcel(archive) {
      var format, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, file,
        _s19_ = "[Content_Types].xml";
      if (archive.findFile$1("mimetype") == null)
        format = archive.findFile$1("xl/workbook.xml") != null ? "xlsx" : null;
      else
        format = null;
      switch (format) {
        case "xlsx":
          t1 = type$.String;
          t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.XmlDocument);
          t3 = A._setArrayType([], type$.JSArray_CellStyle);
          t4 = type$.JSArray_String;
          t5 = A._setArrayType([], t4);
          t6 = A._setArrayType([], t4);
          t7 = A._setArrayType([], t4);
          t8 = A._setArrayType([], type$.JSArray__FontStyle);
          t9 = A._setArrayType([], type$.JSArray_int);
          t10 = type$.int;
          t11 = type$.NumFormat;
          t12 = A.LinkedHashMap_LinkedHashMap(t10, t11);
          t12.addAll$1(0, B.Map_2rkmH);
          t13 = type$.SharedString;
          t13 = new A.Excel(archive, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.XmlNode), t2, A.LinkedHashMap_LinkedHashMap$_empty(t1, t1), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_String_int), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Sheet), t3, t5, t6, t7, t8, t9, new A.NumFormatMaintainer(t12, A._createInverseMap(B.Map_2rkmH, t10, t11)), A._setArrayType([], type$.JSArray__BorderSet), new A._SharedStringsMaintainer(A.LinkedHashMap_LinkedHashMap$_empty(t13, type$._IndexingHolder), A.LinkedHashMap_LinkedHashMap$_empty(t1, t13), A._setArrayType([], type$.JSArray_SharedString)));
          t1 = t13.__Excel_parser_A = new A.Parser(t13, A._setArrayType([], t4), A.LinkedHashMap_LinkedHashMap$_empty(t1, t1));
          file = archive.findFile$1(_s19_);
          if (file == null)
            A._damagedExcel("");
          file.decompress$0();
          t2.$indexSet(0, _s19_, A.XmlDocument_XmlDocument$parse(B.C_Utf8Codec.decode$1(0, type$.List_int._as(file.get$content(0)))));
          t1._parseRelations$0();
          t1._parseStyles$1(t13._stylesTarget);
          t1._parseSharedStrings$0();
          t1._parseContent$0();
          t1._parseMergedCells$0();
          return t13;
        default:
          throw A.wrapException(A.UnsupportedError$(string$.Excel_));
      }
    },
    Excel_Excel$decodeBytes(data) {
      var exception, t1, archive = null;
      try {
        archive = new A.ZipDecoder().decodeBuffer$3$password$verify(A.InputStream$(type$.List_int._as(data), 0, null, 0), null, false);
      } catch (exception) {
        t1 = A.UnsupportedError$(string$.Excel_);
        throw A.wrapException(t1);
      }
      return A._newExcel(archive);
    },
    _createInverseMap(map, $K, $V) {
      var t1, t2,
        inverse = A.LinkedHashMap_LinkedHashMap$_empty($V, $K);
      for (t1 = map.get$entries(map), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        inverse.$indexSet(0, t2.value, t2.key);
      }
      return inverse;
    },
    NumFormat_custom(formatCode) {
      if (formatCode === "General")
        return new A.CustomNumericNumFormat("General");
      if (A._formatCodeLooksLikeDateTime(formatCode))
        return new A.CustomDateTimeNumFormat(formatCode);
      else
        return new A.CustomNumericNumFormat(formatCode);
    },
    NumFormat_defaultFor(value) {
      var t1;
      $label0$0: {
        if (value == null || value instanceof A.FormulaCellValue || value instanceof A.TextCellValue) {
          t1 = B.StandardNumericNumFormat_0_General;
          break $label0$0;
        }
        if (value instanceof A.IntCellValue) {
          t1 = B.StandardNumericNumFormat_Jqe;
          break $label0$0;
        }
        if (value instanceof A.DoubleCellValue) {
          t1 = B.StandardNumericNumFormat_PLF;
          break $label0$0;
        }
        if (value instanceof A.DateCellValue) {
          t1 = B.StandardDateTimeNumFormat_8aB;
          break $label0$0;
        }
        if (value instanceof A.BoolCellValue) {
          t1 = B.StandardNumericNumFormat_0_General;
          break $label0$0;
        }
        if (value instanceof A.TimeCellValue) {
          t1 = B.StandardTimeNumFormat_QoF;
          break $label0$0;
        }
        if (value instanceof A.DateTimeCellValue) {
          t1 = B.StandardDateTimeNumFormat_s2S;
          break $label0$0;
        }
        throw A.wrapException(A.ReachabilityError$(string$.None_o));
      }
      return t1;
    },
    _formatCodeLooksLikeDateTime(formatCode) {
      var t1, inEscape, inQuotes, i, c;
      for (t1 = formatCode.length, inEscape = false, inQuotes = false, i = 0; i < t1; ++i) {
        c = formatCode[i];
        if (inEscape) {
          inEscape = false;
          continue;
        } else if (c === "\\") {
          inEscape = true;
          continue;
        }
        if (inQuotes) {
          inQuotes = c !== '"';
          continue;
        } else if (c === '"') {
          inQuotes = true;
          continue;
        }
        switch (c) {
          case "y":
          case "m":
          case "d":
          case "h":
          case "s":
            return true;
          case ";":
            return false;
          default:
            break;
        }
      }
      return false;
    },
    Parser__parseValue(node) {
      var buffer = new A.StringBuffer(""),
        t1 = node.XmlHasChildren_children;
      B.JSArray_methods.forEach$1(t1._base, t1.$ti._eval$1("~(1)")._as(new A.Parser__parseValue_closure(buffer)));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Border$(borderColorHex, borderStyle) {
      var t1 = borderStyle === B.BorderStyle_None ? null : borderStyle;
      return new A.Border(t1, borderColorHex != null ? A._isColorAppropriate(borderColorHex.get$colorHex()) : null);
    },
    getBorderStyleByName($name) {
      return A.IterableExtension_firstWhereOrNull(B.List_qtW, new A.getBorderStyleByName_closure($name), type$.BorderStyle);
    },
    CellIndex_CellIndex$indexByString(cellIndex) {
      var coords = A._cellCoordsFromCellId(cellIndex);
      return new A.CellIndex(coords._0, coords._1);
    },
    CellStyle$(backgroundColorHex, bold, bottomBorder, diagonalBorder, diagonalBorderDown, diagonalBorderUp, fontColorHex, fontFamily, fontScheme, fontSize, horizontalAlign, italic, leftBorder, numberFormat, rightBorder, rotation, textWrapping, topBorder, underline, verticalAlign) {
      var t1, t2, t3, t4, t5, t6, t7, _null = null;
      B.ExcelColor_FF000000_black_ColorType_0.get$colorHex();
      B.ExcelColor_none_null_null.get$colorHex();
      t1 = fontScheme == null ? B.FontScheme_0 : fontScheme;
      t2 = A._isColorAppropriate(fontColorHex.get$colorHex());
      t3 = A._isColorAppropriate(backgroundColorHex.get$colorHex());
      t4 = leftBorder == null ? A.Border$(_null, _null) : leftBorder;
      t5 = rightBorder == null ? A.Border$(_null, _null) : rightBorder;
      t6 = topBorder == null ? A.Border$(_null, _null) : topBorder;
      t7 = bottomBorder == null ? A.Border$(_null, _null) : bottomBorder;
      return new A.CellStyle(t2, t3, fontFamily, t1, horizontalAlign, verticalAlign, textWrapping, bold, italic, fontSize, rotation, t4, t5, t6, t7, diagonalBorder == null ? A.Border$(_null, _null) : diagonalBorder, diagonalBorderUp, diagonalBorderDown, numberFormat);
    },
    BoolParsing_parseBool(_this) {
      var value = _this.toLowerCase();
      if (value === "true" || value === "1")
        return true;
      else if (value === "false" || value === "0")
        return false;
      throw A.wrapException('"' + _this + '" can not be parsed to boolean.');
    },
    Sheet$_(_excel, _sheet) {
      var _null = null,
        t1 = type$.int,
        t2 = type$.double;
      t1 = new A.Sheet(_excel, _sheet, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.bool), new A.FastList(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t1), 0, type$.FastList_String), A._setArrayType([], type$.JSArray_nullable__Span), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_int_Data));
      t1.Sheet$_$12$columnAutoFitVal$columnWidthsVal$headerFooter$isRTLVal$maxColumnsVal$maxRowsVal$rowHeightsVal$sh$spanI_$spanL_(_excel, _sheet, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      return t1;
    },
    _assertHexString(hexString) {
      var t1, i;
      hexString = B.JSString_methods.trim$0(A.stringReplaceAllUnchecked(hexString, "#", "")).toUpperCase();
      if (0 >= hexString.length)
        return A.ioore(hexString, 0);
      if (hexString[0] === "-")
        hexString = B.JSString_methods.substring$1(hexString, 1);
      for (t1 = hexString.length, i = 0; i < t1; ++i)
        if (A.Primitives_parseInt(hexString[i], null) == null && !$.$get$_hexTableReverse().containsKey$1(0, hexString[i]))
          return false;
      return true;
    },
    _hexadecimalToDecimal(hexString) {
      var isNegative, t1, decimalVal, i, t2, t3;
      hexString = B.JSString_methods.trim$0(A.stringReplaceAllUnchecked(hexString, "#", "")).toUpperCase();
      if (0 >= hexString.length)
        return A.ioore(hexString, 0);
      isNegative = hexString[0] === "-";
      if (isNegative)
        hexString = B.JSString_methods.substring$1(hexString, 1);
      for (t1 = hexString.length, decimalVal = 0, i = 0; i < t1; ++i)
        if (A.Primitives_parseInt(hexString[i], null) == null && !$.$get$_hexTableReverse().containsKey$1(0, hexString[i]))
          throw A.wrapException(A.Exception_Exception("Non-hex value was passed to the function"));
        else {
          t2 = Math.pow(16, t1 - i - 1);
          if (A.Primitives_parseInt(hexString[i], null) != null)
            t3 = A.int_parse(hexString[i]);
          else {
            t3 = $.$get$_hexTableReverse().$index(0, hexString[i]);
            t3.toString;
          }
          decimalVal += B.JSNumber_methods.toInt$0(t2 * t3);
        }
      return isNegative ? -1 * decimalVal : decimalVal;
    },
    StringExt_get_excelColor(_this) {
      var t1;
      if (_this === "none")
        t1 = B.ExcelColor_none_null_null;
      else if (A._assertHexString(_this)) {
        t1 = A.ExcelColor_valuesAsMap().$index(0, _this);
        if (t1 == null)
          t1 = new A.ExcelColor(_this, null, null);
      } else
        t1 = B.ExcelColor_FF000000_black_ColorType_0;
      return t1;
    },
    ExcelColor_valuesAsMap() {
      var t1 = new A.ListMapView(A._setArrayType([B.ExcelColor_FF000000_black_ColorType_0, B.ExcelColor_W71, B.ExcelColor_Xfd, B.ExcelColor_43h, B.ExcelColor_lrp, B.ExcelColor_Qz5, B.ExcelColor_DD000000_black87_ColorType_0, B.ExcelColor_FFFFFFFF_white_ColorType_0, B.ExcelColor_gj4, B.ExcelColor_86y, B.ExcelColor_c9X, B.ExcelColor_PnK, B.ExcelColor_AmY, B.ExcelColor_ZKG, B.ExcelColor_46y, B.ExcelColor_B3FFFFFF_white70_ColorType_0, B.ExcelColor_FFFF5252_redAccent_ColorType_2, B.ExcelColor_FFFF4081_pinkAccent_ColorType_2, B.ExcelColor_FFE040FB_purpleAccent_ColorType_2, B.ExcelColor_ACQ, B.ExcelColor_FF536DFE_indigoAccent_ColorType_2, B.ExcelColor_FF448AFF_blueAccent_ColorType_2, B.ExcelColor_8Is, B.ExcelColor_FF18FFFF_cyanAccent_ColorType_2, B.ExcelColor_FF64FFDA_tealAccent_ColorType_2, B.ExcelColor_FF69F0AE_greenAccent_ColorType_2, B.ExcelColor_Gxg, B.ExcelColor_FFEEFF41_limeAccent_ColorType_2, B.ExcelColor_FFFFFF00_yellowAccent_ColorType_2, B.ExcelColor_FFFFD740_amberAccent_ColorType_2, B.ExcelColor_FFFFAB40_orangeAccent_ColorType_2, B.ExcelColor_S5B, B.ExcelColor_FFF44336_red_ColorType_1, B.ExcelColor_FFE91E63_pink_ColorType_1, B.ExcelColor_FF9C27B0_purple_ColorType_1, B.ExcelColor_FF673AB7_deepPurple_ColorType_1, B.ExcelColor_FF3F51B5_indigo_ColorType_1, B.ExcelColor_FF2196F3_blue_ColorType_1, B.ExcelColor_FF03A9F4_lightBlue_ColorType_1, B.ExcelColor_FF00BCD4_cyan_ColorType_1, B.ExcelColor_FF009688_teal_ColorType_1, B.ExcelColor_FF4CAF50_green_ColorType_1, B.ExcelColor_FF8BC34A_lightGreen_ColorType_1, B.ExcelColor_FFCDDC39_lime_ColorType_1, B.ExcelColor_FFFFEB3B_yellow_ColorType_1, B.ExcelColor_FFFFC107_amber_ColorType_1, B.ExcelColor_FFFF9800_orange_ColorType_1, B.ExcelColor_FFFF5722_deepOrange_ColorType_1, B.ExcelColor_FF795548_brown_ColorType_1, B.ExcelColor_FF9E9E9E_grey_ColorType_1, B.ExcelColor_FF607D8B_blueGrey_ColorType_1, B.ExcelColor_FFFF8A80_redAccent100_ColorType_2, B.ExcelColor_FFFF1744_redAccent400_ColorType_2, B.ExcelColor_FFD50000_redAccent700_ColorType_2, B.ExcelColor_FFFF80AB_pinkAccent100_ColorType_2, B.ExcelColor_FFF50057_pinkAccent400_ColorType_2, B.ExcelColor_FFC51162_pinkAccent700_ColorType_2, B.ExcelColor_qRa, B.ExcelColor_Sn6, B.ExcelColor_GU6, B.ExcelColor_kGg, B.ExcelColor_uzN, B.ExcelColor_J2a, B.ExcelColor_P5Z, B.ExcelColor_mDg, B.ExcelColor_XJ0, B.ExcelColor_FF82B1FF_blueAccent100_ColorType_2, B.ExcelColor_FF2979FF_blueAccent400_ColorType_2, B.ExcelColor_FF2962FF_blueAccent700_ColorType_2, B.ExcelColor_A8u, B.ExcelColor_Ix1, B.ExcelColor_QYm, B.ExcelColor_FF84FFFF_cyanAccent100_ColorType_2, B.ExcelColor_FF00E5FF_cyanAccent400_ColorType_2, B.ExcelColor_FF00B8D4_cyanAccent700_ColorType_2, B.ExcelColor_FFA7FFEB_tealAccent100_ColorType_2, B.ExcelColor_FF1DE9B6_tealAccent400_ColorType_2, B.ExcelColor_FF00BFA5_tealAccent700_ColorType_2, B.ExcelColor_oZX, B.ExcelColor_KAn, B.ExcelColor_k0I, B.ExcelColor_Qyo, B.ExcelColor_fld, B.ExcelColor_zPV, B.ExcelColor_FFF4FF81_limeAccent100_ColorType_2, B.ExcelColor_FFC6FF00_limeAccent400_ColorType_2, B.ExcelColor_FFAEEA00_limeAccent700_ColorType_2, B.ExcelColor_iXq, B.ExcelColor_PaG, B.ExcelColor_4C7, B.ExcelColor_2DL, B.ExcelColor_avb, B.ExcelColor_g2A, B.ExcelColor_7xV, B.ExcelColor_FV9, B.ExcelColor_ssp, B.ExcelColor_P8P, B.ExcelColor_AGO, B.ExcelColor_dMT, B.ExcelColor_FFFFEBEE_red50_ColorType_1, B.ExcelColor_FFFFCDD2_red100_ColorType_1, B.ExcelColor_FFEF9A9A_red200_ColorType_1, B.ExcelColor_FFE57373_red300_ColorType_1, B.ExcelColor_FFEF5350_red400_ColorType_1, B.ExcelColor_FFE53935_red600_ColorType_1, B.ExcelColor_FFD32F2F_red700_ColorType_1, B.ExcelColor_FFC62828_red800_ColorType_1, B.ExcelColor_FFB71C1C_red900_ColorType_1, B.ExcelColor_FFFCE4EC_pink50_ColorType_1, B.ExcelColor_FFF8BBD0_pink100_ColorType_1, B.ExcelColor_FFF48FB1_pink200_ColorType_1, B.ExcelColor_FFF06292_pink300_ColorType_1, B.ExcelColor_FFEC407A_pink400_ColorType_1, B.ExcelColor_FFD81B60_pink600_ColorType_1, B.ExcelColor_FFC2185B_pink700_ColorType_1, B.ExcelColor_FFAD1457_pink800_ColorType_1, B.ExcelColor_FF880E4F_pink900_ColorType_1, B.ExcelColor_FFF3E5F5_purple50_ColorType_1, B.ExcelColor_FFE1BEE7_purple100_ColorType_1, B.ExcelColor_FFCE93D8_purple200_ColorType_1, B.ExcelColor_FFBA68C8_purple300_ColorType_1, B.ExcelColor_FFAB47BC_purple400_ColorType_1, B.ExcelColor_FF8E24AA_purple600_ColorType_1, B.ExcelColor_FF7B1FA2_purple700_ColorType_1, B.ExcelColor_FF6A1B9A_purple800_ColorType_1, B.ExcelColor_FF4A148C_purple900_ColorType_1, B.ExcelColor_FFEDE7F6_deepPurple50_ColorType_1, B.ExcelColor_FFD1C4E9_deepPurple100_ColorType_1, B.ExcelColor_FFB39DDB_deepPurple200_ColorType_1, B.ExcelColor_FF9575CD_deepPurple300_ColorType_1, B.ExcelColor_FF7E57C2_deepPurple400_ColorType_1, B.ExcelColor_FF5E35B1_deepPurple600_ColorType_1, B.ExcelColor_FF512DA8_deepPurple700_ColorType_1, B.ExcelColor_FF4527A0_deepPurple800_ColorType_1, B.ExcelColor_FF311B92_deepPurple900_ColorType_1, B.ExcelColor_FFE8EAF6_indigo50_ColorType_1, B.ExcelColor_FFC5CAE9_indigo100_ColorType_1, B.ExcelColor_FF9FA8DA_indigo200_ColorType_1, B.ExcelColor_FF7986CB_indigo300_ColorType_1, B.ExcelColor_FF5C6BC0_indigo400_ColorType_1, B.ExcelColor_FF3949AB_indigo600_ColorType_1, B.ExcelColor_FF303F9F_indigo700_ColorType_1, B.ExcelColor_FF283593_indigo800_ColorType_1, B.ExcelColor_FF1A237E_indigo900_ColorType_1, B.ExcelColor_FFE3F2FD_blue50_ColorType_1, B.ExcelColor_FFBBDEFB_blue100_ColorType_1, B.ExcelColor_FF90CAF9_blue200_ColorType_1, B.ExcelColor_FF64B5F6_blue300_ColorType_1, B.ExcelColor_FF42A5F5_blue400_ColorType_1, B.ExcelColor_FF1E88E5_blue600_ColorType_1, B.ExcelColor_FF1976D2_blue700_ColorType_1, B.ExcelColor_FF1565C0_blue800_ColorType_1, B.ExcelColor_FF0D47A1_blue900_ColorType_1, B.ExcelColor_FFE1F5FE_lightBlue50_ColorType_1, B.ExcelColor_FFB3E5FC_lightBlue100_ColorType_1, B.ExcelColor_FF81D4FA_lightBlue200_ColorType_1, B.ExcelColor_FF4FC3F7_lightBlue300_ColorType_1, B.ExcelColor_FF29B6F6_lightBlue400_ColorType_1, B.ExcelColor_FF039BE5_lightBlue600_ColorType_1, B.ExcelColor_FF0288D1_lightBlue700_ColorType_1, B.ExcelColor_FF0277BD_lightBlue800_ColorType_1, B.ExcelColor_FF01579B_lightBlue900_ColorType_1, B.ExcelColor_FFE0F7FA_cyan50_ColorType_1, B.ExcelColor_FFB2EBF2_cyan100_ColorType_1, B.ExcelColor_FF80DEEA_cyan200_ColorType_1, B.ExcelColor_FF4DD0E1_cyan300_ColorType_1, B.ExcelColor_FF26C6DA_cyan400_ColorType_1, B.ExcelColor_FF00ACC1_cyan600_ColorType_1, B.ExcelColor_FF0097A7_cyan700_ColorType_1, B.ExcelColor_FF00838F_cyan800_ColorType_1, B.ExcelColor_FF006064_cyan900_ColorType_1, B.ExcelColor_FFE0F2F1_teal50_ColorType_1, B.ExcelColor_FFB2DFDB_teal100_ColorType_1, B.ExcelColor_FF80CBC4_teal200_ColorType_1, B.ExcelColor_FF4DB6AC_teal300_ColorType_1, B.ExcelColor_FF26A69A_teal400_ColorType_1, B.ExcelColor_FF00897B_teal600_ColorType_1, B.ExcelColor_FF00796B_teal700_ColorType_1, B.ExcelColor_FF00695C_teal800_ColorType_1, B.ExcelColor_FF004D40_teal900_ColorType_1, B.ExcelColor_FFE8F5E9_green50_ColorType_1, B.ExcelColor_FFC8E6C9_green100_ColorType_1, B.ExcelColor_FFA5D6A7_green200_ColorType_1, B.ExcelColor_FF81C784_green300_ColorType_1, B.ExcelColor_FF66BB6A_green400_ColorType_1, B.ExcelColor_FF43A047_green600_ColorType_1, B.ExcelColor_FF388E3C_green700_ColorType_1, B.ExcelColor_FF2E7D32_green800_ColorType_1, B.ExcelColor_FF1B5E20_green900_ColorType_1, B.ExcelColor_FFF1F8E9_lightGreen50_ColorType_1, B.ExcelColor_FFDCEDC8_lightGreen100_ColorType_1, B.ExcelColor_FFC5E1A5_lightGreen200_ColorType_1, B.ExcelColor_FFAED581_lightGreen300_ColorType_1, B.ExcelColor_FF9CCC65_lightGreen400_ColorType_1, B.ExcelColor_FF7CB342_lightGreen600_ColorType_1, B.ExcelColor_FF689F38_lightGreen700_ColorType_1, B.ExcelColor_FF558B2F_lightGreen800_ColorType_1, B.ExcelColor_FF33691E_lightGreen900_ColorType_1, B.ExcelColor_FFF9FBE7_lime50_ColorType_1, B.ExcelColor_FFF0F4C3_lime100_ColorType_1, B.ExcelColor_FFE6EE9C_lime200_ColorType_1, B.ExcelColor_FFDCE775_lime300_ColorType_1, B.ExcelColor_FFD4E157_lime400_ColorType_1, B.ExcelColor_FFC0CA33_lime600_ColorType_1, B.ExcelColor_FFAFB42B_lime700_ColorType_1, B.ExcelColor_FF9E9D24_lime800_ColorType_1, B.ExcelColor_FF827717_lime900_ColorType_1, B.ExcelColor_FFFFFDE7_yellow50_ColorType_1, B.ExcelColor_FFFFF9C4_yellow100_ColorType_1, B.ExcelColor_FFFFF59D_yellow200_ColorType_1, B.ExcelColor_FFFFF176_yellow300_ColorType_1, B.ExcelColor_FFFFEE58_yellow400_ColorType_1, B.ExcelColor_FFFDD835_yellow600_ColorType_1, B.ExcelColor_FFFBC02D_yellow700_ColorType_1, B.ExcelColor_FFF9A825_yellow800_ColorType_1, B.ExcelColor_FFF57F17_yellow900_ColorType_1, B.ExcelColor_FFFFF8E1_amber50_ColorType_1, B.ExcelColor_FFFFECB3_amber100_ColorType_1, B.ExcelColor_FFFFE082_amber200_ColorType_1, B.ExcelColor_FFFFD54F_amber300_ColorType_1, B.ExcelColor_FFFFCA28_amber400_ColorType_1, B.ExcelColor_FFFFB300_amber600_ColorType_1, B.ExcelColor_FFFFA000_amber700_ColorType_1, B.ExcelColor_FFFF8F00_amber800_ColorType_1, B.ExcelColor_FFFF6F00_amber900_ColorType_1, B.ExcelColor_FFFFF3E0_orange50_ColorType_1, B.ExcelColor_FFFFE0B2_orange100_ColorType_1, B.ExcelColor_FFFFCC80_orange200_ColorType_1, B.ExcelColor_FFFFB74D_orange300_ColorType_1, B.ExcelColor_FFFFA726_orange400_ColorType_1, B.ExcelColor_FFFB8C00_orange600_ColorType_1, B.ExcelColor_FFF57C00_orange700_ColorType_1, B.ExcelColor_FFEF6C00_orange800_ColorType_1, B.ExcelColor_FFE65100_orange900_ColorType_1, B.ExcelColor_FFFBE9E7_deepOrange50_ColorType_1, B.ExcelColor_FFFFCCBC_deepOrange100_ColorType_1, B.ExcelColor_FFFFAB91_deepOrange200_ColorType_1, B.ExcelColor_FFFF8A65_deepOrange300_ColorType_1, B.ExcelColor_FFFF7043_deepOrange400_ColorType_1, B.ExcelColor_FFF4511E_deepOrange600_ColorType_1, B.ExcelColor_FFE64A19_deepOrange700_ColorType_1, B.ExcelColor_FFD84315_deepOrange800_ColorType_1, B.ExcelColor_FFBF360C_deepOrange900_ColorType_1, B.ExcelColor_FFEFEBE9_brown50_ColorType_1, B.ExcelColor_FFD7CCC8_brown100_ColorType_1, B.ExcelColor_FFBCAAA4_brown200_ColorType_1, B.ExcelColor_FFA1887F_brown300_ColorType_1, B.ExcelColor_FF8D6E63_brown400_ColorType_1, B.ExcelColor_FF6D4C41_brown600_ColorType_1, B.ExcelColor_FF5D4037_brown700_ColorType_1, B.ExcelColor_FF4E342E_brown800_ColorType_1, B.ExcelColor_FF3E2723_brown900_ColorType_1, B.ExcelColor_FFFAFAFA_grey50_ColorType_1, B.ExcelColor_FFF5F5F5_grey100_ColorType_1, B.ExcelColor_FFEEEEEE_grey200_ColorType_1, B.ExcelColor_FFE0E0E0_grey300_ColorType_1, B.ExcelColor_FFD6D6D6_grey350_ColorType_1, B.ExcelColor_FFBDBDBD_grey400_ColorType_1, B.ExcelColor_FF757575_grey600_ColorType_1, B.ExcelColor_FF616161_grey700_ColorType_1, B.ExcelColor_FF424242_grey800_ColorType_1, B.ExcelColor_FF303030_grey850_ColorType_1, B.ExcelColor_FF212121_grey900_ColorType_1, B.ExcelColor_FFECEFF1_blueGrey50_ColorType_1, B.ExcelColor_FFCFD8DC_blueGrey100_ColorType_1, B.ExcelColor_FFB0BEC5_blueGrey200_ColorType_1, B.ExcelColor_FF90A4AE_blueGrey300_ColorType_1, B.ExcelColor_FF78909C_blueGrey400_ColorType_1, B.ExcelColor_FF546E7A_blueGrey600_ColorType_1, B.ExcelColor_FF455A64_blueGrey700_ColorType_1, B.ExcelColor_FF37474F_blueGrey800_ColorType_1, B.ExcelColor_FF263238_blueGrey900_ColorType_1], type$.JSArray_ExcelColor), type$.ListMapView_ExcelColor);
      return t1.map$2$1(t1, new A.ExcelColor_valuesAsMap_closure(), type$.String, type$.ExcelColor);
    },
    _isColorAppropriate(value) {
      var t1;
      switch (value.length) {
        case 7:
          t1 = A.RegExp_RegExp("#", true);
          return A.stringReplaceAllUnchecked(value, t1, "FF");
        case 9:
          t1 = A.RegExp_RegExp("#", true);
          return A.stringReplaceAllUnchecked(value, t1, "");
        default:
          return value;
      }
    },
    lettersToNumeric(letters) {
      var index, sum, mul, t1, c, n;
      for (index = letters.length - 1, sum = 0, mul = 1; index >= 0; --index) {
        t1 = letters[index];
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        c = t1.charCodeAt(0);
        if (65 <= c && c <= 90)
          n = 1 + (c - 65);
        else
          n = 97 <= c && c <= 122 ? 1 + (c - 97) : 1;
        sum += n * mul;
        mul *= 26;
      }
      return sum;
    },
    _getCellNumber(cell) {
      var r = cell.getAttribute$1(0, "r");
      if (r == null)
        return null;
      return A._cellCoordsFromCellId(r)._1;
    },
    _letterOnly(rune) {
      A._asInt(rune);
      if (65 <= rune && rune <= 90)
        return rune;
      else if (97 <= rune && rune <= 122)
        return rune - 32;
      return 0;
    },
    _twoDigits(n) {
      if (n > 9)
        return "" + n;
      return "0" + n;
    },
    _cellCoordsFromCellId(cellId) {
      var t2, lettersPart,
        t1 = type$.Runes,
        letters = A.MappedIterable_MappedIterable(new A.Runes(cellId), t1._eval$1("int(Iterable.E)")._as(A.excel___letterOnly$closure()), t1._eval$1("Iterable.E"), type$.int);
      t1 = A._instanceType(letters);
      t2 = t1._eval$1("WhereIterable<Iterable.E>");
      lettersPart = B.C_Utf8Codec.decode$1(0, A.List_List$of(new A.WhereIterable(letters, t1._eval$1("bool(Iterable.E)")._as(new A._cellCoordsFromCellId_closure()), t2), false, t2._eval$1("Iterable.E")));
      return new A._Record_2(A.int_parse(B.JSString_methods.substring$1(cellId, lettersPart.length)) - 1, A.lettersToNumeric(lettersPart) - 1);
    },
    _damagedExcel(text) {
      throw A.wrapException(A.ArgumentError$("\nDamaged Excel file: " + text + "\n", null));
    },
    Excel: function Excel(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._archive = t0;
      _._sheets = t1;
      _._xmlFiles = t2;
      _._xmlSheetId = t3;
      _._cellStyleReferenced = t4;
      _._sheetMap = t5;
      _._cellStyleList = t6;
      _._patternFill = t7;
      _._mergeChangeLook = t8;
      _._rtlChangeLook = t9;
      _._fontStyleList = t10;
      _._numFmtIds = t11;
      _._numFormats = t12;
      _._borderSetList = t13;
      _._sharedStrings = t14;
      _._sharedStringsTarget = _._stylesTarget = "";
      _.__Excel_parser_A = $;
    },
    NumFormatMaintainer: function NumFormatMaintainer(t0, t1) {
      this._nextFmtId = 164;
      this._excel$_map = t0;
      this._inverseMap = t1;
    },
    NumFormat: function NumFormat() {
    },
    NumericNumFormat: function NumericNumFormat() {
    },
    StandardNumericNumFormat: function StandardNumericNumFormat(t0, t1) {
      this.numFmtId = t0;
      this.formatCode = t1;
    },
    CustomNumericNumFormat: function CustomNumericNumFormat(t0) {
      this.formatCode = t0;
    },
    DateTimeNumFormat: function DateTimeNumFormat() {
    },
    StandardDateTimeNumFormat: function StandardDateTimeNumFormat(t0, t1) {
      this.numFmtId = t0;
      this.formatCode = t1;
    },
    CustomDateTimeNumFormat: function CustomDateTimeNumFormat(t0) {
      this.formatCode = t0;
    },
    TimeNumFormat: function TimeNumFormat() {
    },
    StandardTimeNumFormat: function StandardTimeNumFormat(t0, t1) {
      this.numFmtId = t0;
      this.formatCode = t1;
    },
    Parser: function Parser(t0, t1, t2) {
      this._excel = t0;
      this._rId = t1;
      this._worksheetTargets = t2;
    },
    Parser__parseRelations_closure: function Parser__parseRelations_closure(t0) {
      this.$this = t0;
    },
    Parser__parseSharedStrings_closure: function Parser__parseSharedStrings_closure(t0, t1) {
      this._box_0 = t0;
      this.content = t1;
    },
    Parser__parseSharedStrings_closure0: function Parser__parseSharedStrings_closure0(t0) {
      this.$this = t0;
    },
    Parser__parseContent_closure: function Parser__parseContent_closure(t0, t1) {
      this.$this = t0;
      this.run = t1;
    },
    Parser__parseMergedCells_closure: function Parser__parseMergedCells_closure(t0, t1) {
      this.$this = t0;
      this.spannedCells = t1;
    },
    Parser__parseMergedCells__closure: function Parser__parseMergedCells__closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.sheet = t1;
      _.spanList = t2;
      _.spannedCells = t3;
      _.sheetName = t4;
    },
    Parser__parseStyles_closure: function Parser__parseStyles_closure(t0) {
      this.$this = t0;
    },
    Parser__parseStyles__closure1: function Parser__parseStyles__closure1(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Parser__parseStyles_closure0: function Parser__parseStyles_closure0(t0) {
      this.$this = t0;
    },
    Parser__parseStyles_closure1: function Parser__parseStyles_closure1(t0) {
      this.$this = t0;
    },
    Parser__parseStyles__closure0: function Parser__parseStyles__closure0(t0) {
      this.$this = t0;
    },
    Parser__parseStyles_closure2: function Parser__parseStyles_closure2(t0, t1) {
      this.$this = t0;
      this.fontList = t1;
    },
    Parser__parseStyles__closure: function Parser__parseStyles__closure(t0, t1) {
      this.$this = t0;
      this.fontList = t1;
    },
    Parser__parseStyles___closure: function Parser__parseStyles___closure(t0, t1, t2) {
      this._box_1 = t0;
      this.$this = t1;
      this.node = t2;
    },
    Parser__parseTable_closure: function Parser__parseTable_closure(t0, t1, t2) {
      this.$this = t0;
      this.sheetObject = t1;
      this.name = t2;
    },
    Parser__parseRow_closure: function Parser__parseRow_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.sheetObject = t1;
      _.rowIndex = t2;
      _.name = t3;
    },
    Parser__parseValue_closure: function Parser__parseValue_closure(t0) {
      this.buffer = t0;
    },
    Parser__getAvailableRid_closure: function Parser__getAvailableRid_closure() {
    },
    Parser__getAvailableRid_closure0: function Parser__getAvailableRid_closure0() {
    },
    Parser__parseColWidthsRowHeights_closure: function Parser__parseColWidthsRowHeights_closure(t0) {
      this.sheetObject = t0;
    },
    Parser__parseColWidthsRowHeights_closure0: function Parser__parseColWidthsRowHeights_closure0(t0) {
      this.sheetObject = t0;
    },
    Parser__parseColWidthsRowHeights_closure1: function Parser__parseColWidthsRowHeights_closure1(t0) {
      this.sheetObject = t0;
    },
    _SharedStringsMaintainer: function _SharedStringsMaintainer(t0, t1, t2) {
      var _ = this;
      _._excel$_map = t0;
      _._mapString = t1;
      _._list = t2;
      _._excel$_index = 0;
    },
    _SharedStringsMaintainer_add_closure: function _SharedStringsMaintainer_add_closure(t0, t1, t2) {
      this.$this = t0;
      this.key = t1;
      this.val = t2;
    },
    _IndexingHolder: function _IndexingHolder() {
      this.count = 1;
    },
    SharedString: function SharedString(t0, t1) {
      this.node = t0;
      this._hashCode = t1;
    },
    SharedString_textSpan_getBool: function SharedString_textSpan_getBool() {
    },
    SharedString_textSpan_getDouble: function SharedString_textSpan_getDouble() {
    },
    SharedString_stringValue_closure: function SharedString_stringValue_closure(t0) {
      this.buffer = t0;
    },
    TextSpan: function TextSpan(t0, t1, t2) {
      this.text = t0;
      this.children = t1;
      this.style = t2;
    },
    Border: function Border(t0, t1) {
      this.borderStyle = t0;
      this.borderColorHex = t1;
    },
    _BorderSet: function _BorderSet(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.leftBorder = t0;
      _.rightBorder = t1;
      _.topBorder = t2;
      _.bottomBorder = t3;
      _.diagonalBorder = t4;
      _.diagonalBorderUp = t5;
      _.diagonalBorderDown = t6;
    },
    BorderStyle: function BorderStyle(t0) {
      this._core$_name = t0;
    },
    getBorderStyleByName_closure: function getBorderStyleByName_closure(t0) {
      this.name = t0;
    },
    CellIndex: function CellIndex(t0, t1) {
      this.rowIndex = t0;
      this.columnIndex = t1;
    },
    CellStyle: function CellStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _._fontColorHex = t0;
      _._backgroundColorHex = t1;
      _._fontFamily = t2;
      _._fontScheme = t3;
      _._horizontalAlign = t4;
      _._verticalAlign = t5;
      _._textWrapping = t6;
      _._bold = t7;
      _._italic = t8;
      _._fontSize = t9;
      _._rotation = t10;
      _._leftBorder = t11;
      _._rightBorder = t12;
      _._topBorder = t13;
      _._bottomBorder = t14;
      _._diagonalBorder = t15;
      _._diagonalBorderUp = t16;
      _._diagonalBorderDown = t17;
      _.numberFormat = t18;
    },
    Data: function Data(t0, t1, t2, t3, t4) {
      var _ = this;
      _._cellStyle = t0;
      _._excel$_value = t1;
      _._sheetName = t2;
      _._rowIndex = t3;
      _._columnIndex = t4;
    },
    CellValue: function CellValue() {
    },
    FormulaCellValue: function FormulaCellValue(t0) {
      this.formula = t0;
    },
    IntCellValue: function IntCellValue(t0) {
      this.value = t0;
    },
    DoubleCellValue: function DoubleCellValue(t0) {
      this.value = t0;
    },
    DateCellValue: function DateCellValue(t0, t1, t2) {
      this.year = t0;
      this.month = t1;
      this.day = t2;
    },
    TextCellValue: function TextCellValue(t0) {
      this.value = t0;
    },
    BoolCellValue: function BoolCellValue(t0) {
      this.value = t0;
    },
    TimeCellValue: function TimeCellValue(t0, t1, t2, t3, t4) {
      var _ = this;
      _.hour = t0;
      _.minute = t1;
      _.second = t2;
      _.millisecond = t3;
      _.microsecond = t4;
    },
    DateTimeCellValue: function DateTimeCellValue(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.year = t0;
      _.month = t1;
      _.day = t2;
      _.hour = t3;
      _.minute = t4;
      _.second = t5;
      _.millisecond = t6;
      _.microsecond = t7;
    },
    _FontStyle: function _FontStyle(t0, t1) {
      var _ = this;
      _._fontColorHex = t0;
      _._fontFamily = null;
      _._italic = _._bold = false;
      _._underline = t1;
      _._fontSize = null;
    },
    Sheet: function Sheet(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._excel = t0;
      _._sheet = t1;
      _._maxColumns = _._maxRows = 0;
      _._columnWidths = t2;
      _._rowHeights = t3;
      _._columnAutoFit = t4;
      _._spannedItems = t5;
      _._spanList = t6;
      _._sheetData = t7;
    },
    Sheet_rows_closure: function Sheet_rows_closure(t0, t1) {
      this.$this = t0;
      this.rowIndex = t1;
    },
    Sheet__countRowsAndColumns_closure: function Sheet__countRowsAndColumns_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _hexTableReverse_closure: function _hexTableReverse_closure() {
    },
    ExcelColor: function ExcelColor(t0, t1, t2) {
      this._color = t0;
      this._excel$_name = t1;
      this._type = t2;
    },
    ExcelColor_valuesAsMap_closure: function ExcelColor_valuesAsMap_closure() {
    },
    ColorType: function ColorType(t0) {
      this._core$_name = t0;
    },
    TextWrapping: function TextWrapping(t0) {
      this._core$_name = t0;
    },
    VerticalAlign: function VerticalAlign(t0) {
      this._core$_name = t0;
    },
    HorizontalAlign: function HorizontalAlign(t0) {
      this._core$_name = t0;
    },
    Underline: function Underline(t0) {
      this._core$_name = t0;
    },
    FontScheme: function FontScheme(t0) {
      this._core$_name = t0;
    },
    FastList: function FastList(t0, t1, t2) {
      this._excel$_map = t0;
      this._excel$_index = t1;
      this.$ti = t2;
    },
    _Span: function _Span(t0, t1, t2, t3) {
      var _ = this;
      _.rowSpanStart = t0;
      _.columnSpanStart = t1;
      _.rowSpanEnd = t2;
      _.columnSpanEnd = t3;
    },
    _cellCoordsFromCellId_closure: function _cellCoordsFromCellId_closure() {
    },
    $ExcelFileRepositoryInitializer($$$) {
      return new A._$ExcelFileRepositoryWorkerService(A._$X_$impl().$$dsr5$1(J.$index$asx(type$.List_dynamic._as(J.$index$asx($$$, 3)), 0)));
    },
    _$X$_() {
      return new A._$X();
    },
    _$X_$impl() {
      var t1 = $._$X__impl;
      if (t1 == null) {
        $.Squadron__converterChangeHandlers.$indexSet(0, new A.Object(), new A._$X_$impl_closure());
        t1 = $._$X__impl = A._$X$_();
      }
      return t1;
    },
    ExcelFileRepository: function ExcelFileRepository() {
    },
    ExcelFileRepository_getData_closure: function ExcelFileRepository_getData_closure() {
    },
    ExcelFileRepository_getData__closure: function ExcelFileRepository_getData__closure() {
    },
    _$ExcelFileRepositoryWorkerService: function _$ExcelFileRepositoryWorkerService(t0) {
      this.___$ExcelFileRepositoryWorkerService_operations_FI = $;
      this.excel = t0;
    },
    _$ExcelFileRepositoryWorkerService_operations_closure: function _$ExcelFileRepositoryWorkerService_operations_closure(t0) {
      this.$this = t0;
    },
    _$ExcelFileRepositoryWorkerService_operations_closure0: function _$ExcelFileRepositoryWorkerService_operations_closure0(t0) {
      this.$this = t0;
    },
    _$ExcelFileRepositoryWorkerService_operations_closure1: function _$ExcelFileRepositoryWorkerService_operations_closure1(t0) {
      this.$this = t0;
    },
    _$ExcelFileRepositoryWorkerService_operations_closure2: function _$ExcelFileRepositoryWorkerService_operations_closure2(t0) {
      this.$this = t0;
    },
    _$X: function _$X() {
      var _ = this;
      _.___$X_$dsr5_FI = _.___$X_$dsr4_FI = _.___$X_$dsr3_FI = _.___$X_$dsr2_FI = _.___$X_$sr1_FI = _.___$X_$sr0_FI = $;
    },
    _$X_$impl_closure: function _$X_$impl_closure() {
    },
    LogEvent: function LogEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.level = t0;
      _.message = t1;
      _.error = t2;
      _.stackTrace = t3;
      _.time = t4;
    },
    LogFilter: function LogFilter() {
    },
    Level: function Level(t0, t1) {
      this.value = t0;
      this._core$_name = t1;
    },
    LogOutput: function LogOutput() {
    },
    LogPrinter: function LogPrinter() {
    },
    Logger: function Logger() {
    },
    OutputEvent: function OutputEvent(t0, t1) {
      this.lines = t0;
      this.origin = t1;
    },
    Context: function Context(t0, t1) {
      this.buffer = t0;
      this.position = t1;
    },
    ParserException: function ParserException(t0) {
      this.failure = t0;
    },
    Parser0: function Parser0() {
    },
    Result: function Result() {
    },
    Success: function Success(t0, t1, t2, t3) {
      var _ = this;
      _.value = t0;
      _.buffer = t1;
      _.position = t2;
      _.$ti = t3;
    },
    Failure: function Failure(t0, t1, t2) {
      this.message = t0;
      this.buffer = t1;
      this.position = t2;
    },
    Token_lineAndColumnOf(buffer, position) {
      var t1, line, offset, t2, offset0;
      for (t1 = new A.MatchesIterable(new A.TokenParser($.$get$Token__newlineParser(), type$.TokenParser_String), buffer, 0, false, type$.MatchesIterable_Token_String).get$iterator(0), line = 1, offset = 0; t1.moveNext$0(); offset = offset0) {
        t2 = t1.__MatchesIterator_current_A;
        t2 === $ && A.throwLateFieldNI("current");
        offset0 = t2.stop;
        if (position < offset0)
          return A._setArrayType([line, position - offset + 1], type$.JSArray_int);
        ++line;
      }
      return A._setArrayType([line, position - offset + 1], type$.JSArray_int);
    },
    Token_positionString(buffer, position) {
      var lineAndColumn = A.Token_lineAndColumnOf(buffer, position);
      return "" + lineAndColumn[0] + ":" + lineAndColumn[1];
    },
    Token: function Token(t0, t1, t2, t3, t4) {
      var _ = this;
      _.value = t0;
      _.buffer = t1;
      _.start = t2;
      _.stop = t3;
      _.$ti = t4;
    },
    _throwUnsupported() {
      return A.throwExpression(A.UnsupportedError$("Unsupported operation on parser reference"));
    },
    ReferenceParser: function ReferenceParser(t0, t1, t2) {
      this.$function = t0;
      this.$arguments = t1;
      this.$ti = t2;
    },
    MatchesIterable: function MatchesIterable(t0, t1, t2, t3, t4) {
      var _ = this;
      _.parser = t0;
      _.input = t1;
      _.start = t2;
      _.overlapping = t3;
      _.$ti = t4;
    },
    MatchesIterator: function MatchesIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _.parser = t0;
      _.input = t1;
      _.overlapping = t2;
      _.start = t3;
      _.__MatchesIterator_current_A = $;
      _.$ti = t4;
    },
    FlattenParser: function FlattenParser(t0, t1, t2) {
      this.message = t0;
      this.delegate = t1;
      this.$ti = t2;
    },
    MapParserExtension_map(_this, callback, hasSideEffects, $R, $S) {
      return new A.MapParser(callback, false, _this, $R._eval$1("@<0>")._bind$1($S)._eval$1("MapParser<1,2>"));
    },
    MapParser: function MapParser(t0, t1, t2, t3) {
      var _ = this;
      _.callback = t0;
      _.hasSideEffects = t1;
      _.delegate = t2;
      _.$ti = t3;
    },
    TokenParser: function TokenParser(t0, t1) {
      this.delegate = t0;
      this.$ti = t1;
    },
    char(char, message) {
      var t1;
      if (0 >= char.length)
        return A.ioore(char, 0);
      t1 = type$.CodeUnits;
      t1 = new A.MappedListIterable(new A.CodeUnits(char), t1._eval$1("String(ListBase.E)")._as(A.code___toFormattedChar$closure()), t1._eval$1("MappedListIterable<ListBase.E,String>")).join$0(0);
      return new A.SingleCharacterParser(new A.SingleCharPredicate(char.charCodeAt(0)), '"' + t1 + '" expected');
    },
    SingleCharPredicate: function SingleCharPredicate(t0) {
      this.value = t0;
    },
    ConstantCharPredicate: function ConstantCharPredicate(t0) {
      this.constant = t0;
    },
    LookupCharPredicate: function LookupCharPredicate(t0, t1, t2) {
      this.start = t0;
      this.stop = t1;
      this.bits = t2;
    },
    NotCharacterPredicate: function NotCharacterPredicate(t0) {
      this.predicate = t0;
    },
    optimizedRanges(ranges) {
      var mergedRanges, t1, _i, thisRange, lastRange, matchingCount, t2, t3,
        sortedRanges = A.List_List$of(type$.Iterable_RangeCharPredicate._as(ranges), false, type$.RangeCharPredicate);
      B.JSArray_methods.sort$1(sortedRanges, new A.optimizedRanges_closure());
      mergedRanges = A._setArrayType([], type$.JSArray_RangeCharPredicate);
      for (t1 = sortedRanges.length, _i = 0; _i < t1; ++_i) {
        thisRange = sortedRanges[_i];
        if (mergedRanges.length === 0)
          B.JSArray_methods.add$1(mergedRanges, thisRange);
        else {
          lastRange = B.JSArray_methods.get$last(mergedRanges);
          if (lastRange.stop + 1 >= thisRange.start)
            B.JSArray_methods.$indexSet(mergedRanges, mergedRanges.length - 1, new A.RangeCharPredicate(lastRange.start, thisRange.stop));
          else
            B.JSArray_methods.add$1(mergedRanges, thisRange);
        }
      }
      matchingCount = B.JSArray_methods.fold$1$2(mergedRanges, 0, new A.optimizedRanges_closure0(), type$.int);
      if (matchingCount === 0)
        return B.ConstantCharPredicate_false;
      else if (matchingCount - 1 === 65535)
        return B.ConstantCharPredicate_true;
      else {
        t1 = mergedRanges.length;
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(mergedRanges, 0);
          t1 = mergedRanges[0];
          t2 = t1.start;
          return t2 === t1.stop ? new A.SingleCharPredicate(t2) : t1;
        } else {
          t1 = B.JSArray_methods.get$first(mergedRanges);
          t2 = B.JSArray_methods.get$last(mergedRanges);
          t3 = B.JSInt_methods._shrOtherPositive$1(B.JSArray_methods.get$last(mergedRanges).stop - B.JSArray_methods.get$first(mergedRanges).start + 1 + 31, 5);
          t1 = new A.LookupCharPredicate(t1.start, t2.stop, new Uint32Array(t3));
          t1.LookupCharPredicate$1(mergedRanges);
          return t1;
        }
      }
    },
    optimizedRanges_closure: function optimizedRanges_closure() {
    },
    optimizedRanges_closure0: function optimizedRanges_closure0() {
    },
    pattern(element, message) {
      var t2,
        t1 = $.$get$_pattern().parseOn$1(new A.Context(element, 0));
      t1 = t1.get$value(t1);
      if (message == null) {
        t2 = type$.CodeUnits;
        t2 = "[" + new A.MappedListIterable(new A.CodeUnits(element), t2._eval$1("String(ListBase.E)")._as(A.code___toFormattedChar$closure()), t2._eval$1("MappedListIterable<ListBase.E,String>")).join$0(0) + "] expected";
      } else
        t2 = message;
      return new A.SingleCharacterParser(t1, t2);
    },
    _single_closure: function _single_closure() {
    },
    _range_closure: function _range_closure() {
    },
    _pattern_closure: function _pattern_closure() {
    },
    CharacterPredicate: function CharacterPredicate() {
    },
    RangeCharPredicate: function RangeCharPredicate(t0, t1) {
      this.start = t0;
      this.stop = t1;
    },
    WhitespaceCharPredicate: function WhitespaceCharPredicate() {
    },
    ChoiceIterableExtension_toChoiceParser(_this, failureJoiner, $R) {
      var t1 = failureJoiner == null ? A.failure_joiner__selectLast$closure() : failureJoiner;
      return new A.ChoiceParser(t1, A.List_List$of(_this, false, $R._eval$1("Parser0<0>")), $R._eval$1("ChoiceParser<0>"));
    },
    ChoiceParser$(children, failureJoiner, $R) {
      var t1 = failureJoiner == null ? A.failure_joiner__selectLast$closure() : failureJoiner;
      return new A.ChoiceParser(t1, A.List_List$of(children, false, $R._eval$1("Parser0<0>")), $R._eval$1("ChoiceParser<0>"));
    },
    ChoiceParser: function ChoiceParser(t0, t1, t2) {
      this.failureJoiner = t0;
      this.children = t1;
      this.$ti = t2;
    },
    DelegateParser: function DelegateParser() {
    },
    seq2(parser1, parser2, R1, R2) {
      return new A.SequenceParser2(parser1, parser2, R1._eval$1("@<0>")._bind$1(R2)._eval$1("SequenceParser2<1,2>"));
    },
    SequenceParser2$(parser1, parser2, R1, R2) {
      return new A.SequenceParser2(parser1, parser2, R1._eval$1("@<0>")._bind$1(R2)._eval$1("SequenceParser2<1,2>"));
    },
    RecordParserExtension2_map2(_this, callback, T1, T2, $R) {
      return A.MapParserExtension_map(_this, new A.RecordParserExtension2_map2_closure(callback, T1, T2, $R), false, T1._eval$1("@<0>")._bind$1(T2)._eval$1("+(1,2)"), $R);
    },
    SequenceParser2: function SequenceParser2(t0, t1, t2) {
      this.parser1 = t0;
      this.parser2 = t1;
      this.$ti = t2;
    },
    RecordParserExtension2_map2_closure: function RecordParserExtension2_map2_closure(t0, t1, t2, t3) {
      var _ = this;
      _.callback = t0;
      _.T1 = t1;
      _.T2 = t2;
      _.R = t3;
    },
    seq3(parser1, parser2, parser3, R1, R2, R3) {
      return new A.SequenceParser3(parser1, parser2, parser3, R1._eval$1("@<0>")._bind$1(R2)._bind$1(R3)._eval$1("SequenceParser3<1,2,3>"));
    },
    SequenceParser3$(parser1, parser2, parser3, R1, R2, R3) {
      return new A.SequenceParser3(parser1, parser2, parser3, R1._eval$1("@<0>")._bind$1(R2)._bind$1(R3)._eval$1("SequenceParser3<1,2,3>"));
    },
    RecordParserExtension3_map3(_this, callback, T1, T2, T3, $R) {
      return A.MapParserExtension_map(_this, new A.RecordParserExtension3_map3_closure(callback, T1, T2, T3, $R), false, T1._eval$1("@<0>")._bind$1(T2)._bind$1(T3)._eval$1("+(1,2,3)"), $R);
    },
    SequenceParser3: function SequenceParser3(t0, t1, t2, t3) {
      var _ = this;
      _.parser1 = t0;
      _.parser2 = t1;
      _.parser3 = t2;
      _.$ti = t3;
    },
    RecordParserExtension3_map3_closure: function RecordParserExtension3_map3_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.callback = t0;
      _.T1 = t1;
      _.T2 = t2;
      _.T3 = t3;
      _.R = t4;
    },
    seq4(parser1, parser2, parser3, parser4, R1, R2, R3, R4) {
      return new A.SequenceParser4(parser1, parser2, parser3, parser4, R1._eval$1("@<0>")._bind$1(R2)._bind$1(R3)._bind$1(R4)._eval$1("SequenceParser4<1,2,3,4>"));
    },
    RecordParserExtension4_map4(_this, callback, T1, T2, T3, T4, $R) {
      return A.MapParserExtension_map(_this, new A.RecordParserExtension4_map4_closure(callback, T1, T2, T3, T4, $R), false, T1._eval$1("@<0>")._bind$1(T2)._bind$1(T3)._bind$1(T4)._eval$1("+(1,2,3,4)"), $R);
    },
    SequenceParser4: function SequenceParser4(t0, t1, t2, t3, t4) {
      var _ = this;
      _.parser1 = t0;
      _.parser2 = t1;
      _.parser3 = t2;
      _.parser4 = t3;
      _.$ti = t4;
    },
    RecordParserExtension4_map4_closure: function RecordParserExtension4_map4_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.callback = t0;
      _.T1 = t1;
      _.T2 = t2;
      _.T3 = t3;
      _.T4 = t4;
      _.R = t5;
    },
    seq5(parser1, parser2, parser3, parser4, parser5, R1, R2, R3, R4, R5) {
      return new A.SequenceParser5(parser1, parser2, parser3, parser4, parser5, R1._eval$1("@<0>")._bind$1(R2)._bind$1(R3)._bind$1(R4)._bind$1(R5)._eval$1("SequenceParser5<1,2,3,4,5>"));
    },
    RecordParserExtension5_map5(_this, callback, T1, T2, T3, T4, T5, $R) {
      return A.MapParserExtension_map(_this, new A.RecordParserExtension5_map5_closure(callback, T1, T2, T3, T4, T5, $R), false, T1._eval$1("@<0>")._bind$1(T2)._bind$1(T3)._bind$1(T4)._bind$1(T5)._eval$1("+(1,2,3,4,5)"), $R);
    },
    SequenceParser5: function SequenceParser5(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.parser1 = t0;
      _.parser2 = t1;
      _.parser3 = t2;
      _.parser4 = t3;
      _.parser5 = t4;
      _.$ti = t5;
    },
    RecordParserExtension5_map5_closure: function RecordParserExtension5_map5_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.callback = t0;
      _.T1 = t1;
      _.T2 = t2;
      _.T3 = t3;
      _.T4 = t4;
      _.T5 = t5;
      _.R = t6;
    },
    RecordParserExtension8_map8(_this, callback, T1, T2, T3, T4, T5, T6, T7, T8, $R) {
      return A.MapParserExtension_map(_this, new A.RecordParserExtension8_map8_closure(callback, T1, T2, T3, T4, T5, T6, T7, T8, $R), false, T1._eval$1("@<0>")._bind$1(T2)._bind$1(T3)._bind$1(T4)._bind$1(T5)._bind$1(T6)._bind$1(T7)._bind$1(T8)._eval$1("+(1,2,3,4,5,6,7,8)"), $R);
    },
    SequenceParser8: function SequenceParser8(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.parser1 = t0;
      _.parser2 = t1;
      _.parser3 = t2;
      _.parser4 = t3;
      _.parser5 = t4;
      _.parser6 = t5;
      _.parser7 = t6;
      _.parser8 = t7;
      _.$ti = t8;
    },
    RecordParserExtension8_map8_closure: function RecordParserExtension8_map8_closure(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.callback = t0;
      _.T1 = t1;
      _.T2 = t2;
      _.T3 = t3;
      _.T4 = t4;
      _.T5 = t5;
      _.T6 = t6;
      _.T7 = t7;
      _.T8 = t8;
      _.R = t9;
    },
    ListParser: function ListParser() {
    },
    OptionalParserExtension_optional(_this, $R) {
      return new A.OptionalParser(null, _this, $R._eval$1("OptionalParser<0?>"));
    },
    OptionalParser: function OptionalParser(t0, t1, t2) {
      this.otherwise = t0;
      this.delegate = t1;
      this.$ti = t2;
    },
    SkipParser: function SkipParser(t0, t1, t2, t3) {
      var _ = this;
      _.before = t0;
      _.after = t1;
      _.delegate = t2;
      _.$ti = t3;
    },
    EpsilonParser: function EpsilonParser(t0, t1) {
      this.result = t0;
      this.$ti = t1;
    },
    NewlineParser: function NewlineParser(t0) {
      this.message = t0;
    },
    any() {
      return new A.AnyCharacterParser("input expected");
    },
    AnyCharacterParser: function AnyCharacterParser(t0) {
      this.message = t0;
    },
    SingleCharacterParser: function SingleCharacterParser(t0, t1) {
      this.predicate = t0;
      this.message = t1;
    },
    PredicateParser: function PredicateParser(t0, t1, t2) {
      this.length = t0;
      this.predicate = t1;
      this.message = t2;
    },
    PredicateStringExtension_toParser(_this) {
      var t1 = _this.length;
      if (t1 === 0)
        return new A.EpsilonParser(_this, type$.EpsilonParser_String);
      else if (t1 === 1) {
        t1 = A.char(_this, null);
        return t1;
      } else {
        t1 = A.string(_this, null);
        return t1;
      }
    },
    string(element, message) {
      return new A.PredicateParser(element.length, new A.string_closure(element), '"' + element + '" expected');
    },
    string_closure: function string_closure(t0) {
      this.element = t0;
    },
    RepeatingCharacterParserExtension_repeatString(_this, min, max, message) {
      return new A.RepeatingCharacterParser(_this.predicate, message, min, max);
    },
    RepeatingCharacterParser: function RepeatingCharacterParser(t0, t1, t2, t3) {
      var _ = this;
      _.predicate = t0;
      _.message = t1;
      _.min = t2;
      _.max = t3;
    },
    LazyRepeatingParser: function LazyRepeatingParser(t0, t1, t2, t3, t4) {
      var _ = this;
      _.limit = t0;
      _.min = t1;
      _.max = t2;
      _.delegate = t3;
      _.$ti = t4;
    },
    LimitedRepeatingParser: function LimitedRepeatingParser() {
    },
    PossessiveRepeatingParserExtension_star(_this, $R) {
      return A.PossessiveRepeatingParserExtension_repeat(_this, 0, 9007199254740991, $R);
    },
    PossessiveRepeatingParserExtension_repeat(_this, min, max, $R) {
      return new A.PossessiveRepeatingParser(min, max, _this, $R._eval$1("PossessiveRepeatingParser<0>"));
    },
    PossessiveRepeatingParser: function PossessiveRepeatingParser(t0, t1, t2, t3) {
      var _ = this;
      _.min = t0;
      _.max = t1;
      _.delegate = t2;
      _.$ti = t3;
    },
    RepeatingParser: function RepeatingParser() {
    },
    bootstrap(initializer, command) {
      var transfer, message,
        t1 = self,
        t2 = type$.JSObject,
        com = t2._as(new t1.MessageChannel()),
        t3 = new A._LogAllFilter(),
        t4 = new A._DummyPrinter(),
        t5 = new A._NoLogOutput(),
        t6 = new A.InternalLogger(t3, t4, t5);
      t6.Logger$4$filter$level$output$printer(t3, null, t5, t4);
      t2._as(t1.self).onmessage = A._functionToJS1(new A.bootstrap_closure(com, new A.WorkerRunner(new A.bootstrap_closure0(com), t6, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.CancelationTokenReference), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.void_Function)), initializer));
      transfer = type$.JSArray_nullable_Object._as(new t1.Array());
      message = A.$jsify(A.WorkerResponseExt_wrapInPlace([A.microsecTimeStamp(null), true, null, null, null]), transfer);
      t2._as(t1.self).postMessage(message, transfer);
    },
    bootstrap_closure0: function bootstrap_closure0(t0) {
      this.com = t0;
    },
    bootstrap_closure: function bootstrap_closure(t0, t1, t2) {
      this.com = t0;
      this.runner = t1;
      this.initializer = t2;
    },
    _isTransferable(js) {
      var t1 = A.JSAnyUtilityExtension_instanceOfString(js, "MessagePort");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "ReadableStream");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "WritableStream");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "TransformStream");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "ImageBitmap");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "VideoFrame");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "OffscreenCanvas");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "RTCDataChannel");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "MediaSourceHandle");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "MIDIAccess");
      if (t1)
        return true;
      return false;
    },
    $jsify(message, transfer) {
      return new A.$jsify_squadronJsify(new A._IdentityHashMap(type$._IdentityHashMap_Object_Object), transfer).call$1(message);
    },
    $dartify(message) {
      return new A.$dartify_squadronDartify(new A._IdentityHashMap(type$._IdentityHashMap_Object_Object)).call$1(message);
    },
    $JSEventExt__getMessageEventData(obj) {
      var t1 = $.$get$_$JSProps_data();
      return A.$dartify(obj[t1]);
    },
    $jsify_squadronJsify: function $jsify_squadronJsify(t0, t1) {
      this.cache = t0;
      this.transfer = t1;
    },
    $dartify_squadronDartify: function $dartify_squadronDartify(t0) {
      this.cache = t0;
    },
    _WebWorkerChannel: function _WebWorkerChannel(t0, t1) {
      this._sendPort = t0;
      this._logger = t1;
    },
    _WebWorkerChannel__postResponse_closure: function _WebWorkerChannel__postResponse_closure(t0, t1) {
      this.res = t0;
      this.ex = t1;
    },
    _WebWorkerChannel__inspectAndPostResponse_closure: function _WebWorkerChannel__inspectAndPostResponse_closure(t0, t1) {
      this.res = t0;
      this.ex = t1;
    },
    JsWorkerRunnerExt_get_handle(_this) {
      return new A.JsWorkerRunnerExt_get_handle_closure(_this);
    },
    JsWorkerRunnerExt_get_handle_closure: function JsWorkerRunnerExt_get_handle_closure(t0) {
      this._this = t0;
    },
    InternalLogger: function InternalLogger(t0, t1, t2) {
      var _ = this;
      _.__Logger__initialization_F = $;
      _._filter = t0;
      _._printer = t1;
      _._output = t2;
    },
    _NoLogOutput: function _NoLogOutput() {
    },
    _DummyPrinter: function _DummyPrinter() {
    },
    _LogAllFilter: function _LogAllFilter() {
    },
    WorkerRunner: function WorkerRunner(t0, t1, t2, t3) {
      var _ = this;
      _._terminate = t0;
      _.internalLogger = t1;
      _._service = null;
      _._cancelTokens = t2;
      _._terminationRequested = false;
      _._executing = 0;
      _._streamCancelers = t3;
      _._streamId = 0;
      _._installError = _._installCompleter = _._logForwarder = null;
    },
    WorkerRunner_connect_closure: function WorkerRunner_connect_closure(t0) {
      this.logger = t0;
    },
    WorkerRunner_connect_closure0: function WorkerRunner_connect_closure0() {
    },
    WorkerRunner_connect_closure1: function WorkerRunner_connect_closure1(t0) {
      this.ex = t0;
    },
    WorkerRunner__getTokenRef_closure: function WorkerRunner__getTokenRef_closure(t0) {
      this.token = t0;
    },
    CastConverter: function CastConverter() {
    },
    Converter_identity(x, $T) {
      if ($T._is(x))
        return x;
      throw A.wrapException(A.WorkerException$("TypeError: " + J.get$runtimeType$(x).toString$0(0) + " is not a subtype of " + A.createRuntimeType($T).toString$0(0), null, null));
    },
    Converter_toList(x) {
      return type$.List_dynamic._is(x) ? x : J.toList$0$ax(type$.Iterable_dynamic._as(x));
    },
    Converter0: function Converter0() {
    },
    Converter_nullable_closure: function Converter_nullable_closure(t0, t1) {
      this.op = t0;
      this.T = t1;
    },
    Converter_list_closure: function Converter_list_closure(t0) {
      this.T = t0;
    },
    Converter_list_closure0: function Converter_list_closure0(t0, t1) {
      this.op = t0;
      this.T = t1;
    },
    SquadronCanceledException$(tokenId, message, stackTrace) {
      var t1 = new A.SquadronCanceledException(tokenId, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronCanceledException_SquadronCanceledException$from(tokenId, ex, stackTrace) {
      var t1, t2;
      if (ex instanceof A.SquadronTimeoutException)
        return A.SquadronTimeoutException$(tokenId, ex.message, ex.duration, ex._stackTrace);
      else if (ex instanceof A.SquadronCanceledExceptions) {
        t1 = ex._exceptions;
        t2 = A._arrayInstanceType(t1);
        return A.SquadronCanceledExceptions$(tokenId, new A.MappedListIterable(t1, t2._eval$1("SquadronCanceledException(1)")._as(new A.SquadronCanceledException_SquadronCanceledException$from_closure(tokenId)), t2._eval$1("MappedListIterable<1,SquadronCanceledException>")));
      } else
        return A.SquadronCanceledException$(tokenId, ex.get$message(ex), ex.get$stackTrace());
    },
    SquadronCanceledExceptionExt_deserialize(props) {
      var t1;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      switch (t1.$index(props, 0)) {
        case "$C":
          return A.SquadronCanceledException$(A._asString(t1.$index(props, 1)), A._asString(t1.$index(props, 2)), A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(props, 3))));
        case "$C*":
          return A.SquadronCanceledExceptionsExt_deserialize(props);
        case "$T":
          return A.SquadronTimeoutExceptionExt_deserialize(props);
        default:
          return null;
      }
    },
    SquadronCanceledException: function SquadronCanceledException(t0, t1, t2) {
      this.tokenId = t0;
      this.message = t1;
      this._stackTrace = t2;
    },
    SquadronCanceledException_SquadronCanceledException$from_closure: function SquadronCanceledException_SquadronCanceledException$from_closure(t0) {
      this.tokenId = t0;
    },
    SquadronCanceledExceptions$(tokenId, exceptions) {
      var t1 = new A.SquadronCanceledExceptions(exceptions.toList$0(0), tokenId, "", null);
      t1.SquadronException$init$2("", null);
      return t1;
    },
    SquadronCanceledExceptionsExt_deserialize(props) {
      var t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$C*"))
        return null;
      return A.SquadronCanceledExceptions$(A._asString(t1.$index(props, 1)), type$.Iterable_SquadronCanceledException._as(J.map$1$ax(t1.$index(props, 2), A.squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure())));
    },
    SquadronCanceledExceptions: function SquadronCanceledExceptions(t0, t1, t2, t3) {
      var _ = this;
      _._exceptions = t0;
      _.tokenId = t1;
      _.message = t2;
      _._stackTrace = t3;
    },
    SquadronCanceledExceptions_message_closure: function SquadronCanceledExceptions_message_closure() {
    },
    SquadronCanceledExceptions_serialize_closure: function SquadronCanceledExceptions_serialize_closure() {
    },
    SquadronErrorExt_create(message, stackTrace) {
      var t1 = new A.SquadronError(null, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronError: function SquadronError(t0, t1, t2) {
      this._squadron_error$_command = t0;
      this.message = t1;
      this._stackTrace = t2;
    },
    SquadronException_from(error, stackTrace, command) {
      if (error instanceof A.WorkerException) {
        if (command != null)
          error._command = command;
        return error;
      } else if (error instanceof A.SquadronException)
        return error;
      else if (error instanceof A.SquadronCanceledException)
        return A.SquadronCanceledException_SquadronCanceledException$from("", error, null);
      else if (error instanceof A.SquadronTimeoutException)
        return A.SquadronTimeoutException$("", error.message, error.duration, null);
      else
        return A.WorkerException$(J.toString$0$(error), stackTrace, command);
    },
    SquadronException_loadStackTrace(stackTrace) {
      var exception;
      if (stackTrace == null)
        return null;
      try {
        return new A._StringStackTrace(stackTrace);
      } catch (exception) {
        return null;
      }
    },
    SquadronException: function SquadronException() {
    },
    SquadronTimeoutException$(tokenId, message, duration, stackTrace) {
      var t1 = new A.SquadronTimeoutException(duration, tokenId, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronTimeoutExceptionExt_deserialize(props) {
      var t2, microSecs, t3, t4, _null = null,
        t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$T"))
        return _null;
      t2 = A._asNumQ(t1.$index(props, 4));
      microSecs = t2 == null ? _null : B.JSNumber_methods.toInt$0(t2);
      t2 = A._asString(t1.$index(props, 1));
      t3 = A._asString(t1.$index(props, 2));
      t4 = microSecs == null ? _null : A.Duration$(microSecs, 0);
      return A.SquadronTimeoutException$(t2, t3, t4, A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(props, 3))));
    },
    SquadronTimeoutException: function SquadronTimeoutException(t0, t1, t2, t3) {
      var _ = this;
      _.duration = t0;
      _.tokenId = t1;
      _.message = t2;
      _._stackTrace = t3;
    },
    WorkerException$(message, stackTrace, command) {
      var t1 = new A.WorkerException(command, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    WorkerException: function WorkerException(t0, t1, t2) {
      this._command = t0;
      this.message = t1;
      this._stackTrace = t2;
    },
    CancelationTokenReference: function CancelationTokenReference(t0, t1, t2) {
      var _ = this;
      _.id = t0;
      _.__cancelation_token_ref$_exception = null;
      _.__cancelation_token_ref$_completer = t1;
      _._hasRef = t2;
      _._refCount = 0;
    },
    SquadronCancelationToken_deserialize(props) {
      var t1, id, ex, token;
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      id = t1.$index(props, 0);
      ex = A.SquadronCanceledExceptionExt_deserialize(type$.nullable_List_dynamic._as(t1.$index(props, 1)));
      A._asString(id);
      t1 = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException);
      token = new A.SquadronCancelationToken(id, null, t1);
      if (ex != null) {
        token.__squadron_cancelation_token$_exception = ex;
        t1.complete$1(0, ex);
      }
      return token;
    },
    SquadronCancelationToken: function SquadronCancelationToken(t0, t1, t2) {
      var _ = this;
      _.id = t0;
      _.token = t1;
      _.__squadron_cancelation_token$_exception = null;
      _._completer = t2;
    },
    DtdExternalId: function DtdExternalId(t0, t1, t2, t3) {
      var _ = this;
      _.publicId = t0;
      _.publicIdType = t1;
      _.systemId = t2;
      _.systemIdType = t3;
    },
    _textReplace(match) {
      var t1 = match.group$1(0);
      t1.toString;
      switch (t1) {
        case "<":
          return "&lt;";
        case "&":
          return "&amp;";
        case "]]>":
          return "]]&gt;";
        default:
          return A._asNumericCharacterReferences(t1);
      }
    },
    _singeQuoteAttributeReplace(match) {
      var t1 = match.group$1(0);
      t1.toString;
      switch (t1) {
        case "'":
          return "&apos;";
        case "&":
          return "&amp;";
        case "<":
          return "&lt;";
        default:
          return A._asNumericCharacterReferences(t1);
      }
    },
    _doubleQuoteAttributeReplace(match) {
      var t1 = match.group$1(0);
      t1.toString;
      switch (t1) {
        case '"':
          return "&quot;";
        case "&":
          return "&amp;";
        case "<":
          return "&lt;";
        default:
          return A._asNumericCharacterReferences(t1);
      }
    },
    _asNumericCharacterReferences(toEscape) {
      var t1 = type$.Runes;
      return A.MappedIterable_MappedIterable(new A.Runes(toEscape), t1._eval$1("String(Iterable.E)")._as(new A._asNumericCharacterReferences_closure()), t1._eval$1("Iterable.E"), type$.String).join$0(0);
    },
    XmlDefaultEntityMapping: function XmlDefaultEntityMapping() {
    },
    _asNumericCharacterReferences_closure: function _asNumericCharacterReferences_closure() {
    },
    XmlEntityMapping: function XmlEntityMapping() {
    },
    XmlAttributeType: function XmlAttributeType(t0, t1) {
      this.token = t0;
      this._core$_name = t1;
    },
    XmlNodeType: function XmlNodeType(t0) {
      this._core$_name = t0;
    },
    XmlException: function XmlException() {
    },
    XmlFormatException: function XmlFormatException() {
    },
    XmlParentException$(message, node, $parent) {
      return new A.XmlParentException(message);
    },
    XmlParentException_checkNoParent(node) {
      if (node.get$parent(node) != null)
        throw A.wrapException(A.XmlParentException$(string$.Node_a, node, node.get$parent(node)));
    },
    XmlParentException: function XmlParentException(t0) {
      this.message = t0;
    },
    XmlParserException$(message, buffer, position) {
      return new A.XmlParserException(buffer, position, $, $, $, message);
    },
    XmlParserException: function XmlParserException(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.buffer = t0;
      _.position = t1;
      _.XmlFormatException___XmlFormatException_line_FI = t2;
      _.XmlFormatException___XmlFormatException_column_FI = t3;
      _.XmlFormatException___XmlFormatException__lineAndColumn_FI = t4;
      _.message = t5;
    },
    _XmlParserException_XmlException_XmlFormatException: function _XmlParserException_XmlException_XmlFormatException() {
    },
    XmlTagException$(message, actualName, buffer, expectedName, position) {
      return new A.XmlTagException(buffer, position, $, $, $, message);
    },
    XmlTagException_XmlTagException$mismatchClosingTag(expectedName, actualName, buffer, position) {
      return A.XmlTagException$("Expected </" + expectedName + ">, but found </" + actualName + ">", actualName, buffer, expectedName, position);
    },
    XmlTagException_XmlTagException$unexpectedClosingTag(actualName, buffer, position) {
      return A.XmlTagException$("Unexpected </" + actualName + ">", actualName, buffer, null, position);
    },
    XmlTagException_XmlTagException$missingClosingTag(expectedName, buffer, position) {
      return A.XmlTagException$("Missing </" + expectedName + ">", null, buffer, expectedName, position);
    },
    XmlTagException: function XmlTagException(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.buffer = t0;
      _.position = t1;
      _.XmlFormatException___XmlFormatException_line_FI = t2;
      _.XmlFormatException___XmlFormatException_column_FI = t3;
      _.XmlFormatException___XmlFormatException__lineAndColumn_FI = t4;
      _.message = t5;
    },
    _XmlTagException_XmlException_XmlFormatException: function _XmlTagException_XmlException_XmlFormatException() {
    },
    XmlNodeTypeException$(message, node, types) {
      return new A.XmlNodeTypeException(message);
    },
    XmlNodeTypeException_checkValidType(node, types) {
      if (!types.contains$1(0, node.get$nodeType(node)))
        throw A.wrapException(new A.XmlNodeTypeException("Got " + node.get$nodeType(node).toString$0(0) + ", but expected one of " + types.join$1(0, ", ")));
    },
    XmlNodeTypeException: function XmlNodeTypeException(t0) {
      this.message = t0;
    },
    XmlDescendantsIterable: function XmlDescendantsIterable(t0) {
      this._start = t0;
    },
    XmlDescendantsIterator: function XmlDescendantsIterator(t0) {
      this._todo = t0;
      this.__XmlDescendantsIterator__current_A = $;
    },
    XmlStringExtension_get_innerText(_this) {
      var t1 = type$.XmlDescendantsIterable;
      return new A.MappedIterable(new A.WhereIterable(new A.XmlDescendantsIterable(_this), t1._eval$1("bool(Iterable.E)")._as(new A.XmlStringExtension_get_innerText_closure()), t1._eval$1("WhereIterable<Iterable.E>")), t1._eval$1("String?(Iterable.E)")._as(new A.XmlStringExtension_get_innerText_closure0()), t1._eval$1("MappedIterable<Iterable.E,String?>")).join$0(0);
    },
    XmlStringExtension_get_innerText_closure: function XmlStringExtension_get_innerText_closure() {
    },
    XmlStringExtension_get_innerText_closure0: function XmlStringExtension_get_innerText_closure0() {
    },
    XmlAttributesBase: function XmlAttributesBase() {
    },
    XmlHasAttributes: function XmlHasAttributes() {
    },
    XmlChildrenBase: function XmlChildrenBase() {
    },
    XmlHasChildren: function XmlHasChildren() {
    },
    XmlHasName: function XmlHasName() {
    },
    XmlParentBase: function XmlParentBase() {
    },
    XmlHasParent: function XmlHasParent() {
    },
    XmlValueBase: function XmlValueBase() {
    },
    XmlHasVisitor: function XmlHasVisitor() {
    },
    XmlHasWriter: function XmlHasWriter() {
    },
    XmlAttribute$($name, value, attributeType) {
      var t1 = new A.XmlAttribute($name, value, attributeType, null);
      A._instanceType($name)._eval$1("XmlHasParent.T")._as(t1);
      A.XmlParentException_checkNoParent($name);
      $name.set$_parent(t1);
      return t1;
    },
    XmlAttribute: function XmlAttribute(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.attributeType = t2;
      _.XmlHasParent__parent = t3;
    },
    _XmlAttribute_XmlNode_XmlHasName: function _XmlAttribute_XmlNode_XmlHasName() {
    },
    _XmlAttribute_XmlNode_XmlHasName_XmlHasParent: function _XmlAttribute_XmlNode_XmlHasName_XmlHasParent() {
    },
    XmlCDATA: function XmlCDATA(t0, t1) {
      this.value = t0;
      this.XmlHasParent__parent = t1;
    },
    XmlComment: function XmlComment(t0, t1) {
      this.value = t0;
      this.XmlHasParent__parent = t1;
    },
    XmlData: function XmlData() {
    },
    _XmlData_XmlNode_XmlHasParent: function _XmlData_XmlNode_XmlHasParent() {
    },
    XmlDeclaration$(attributes) {
      var t1 = A.XmlNodeList$(type$.XmlAttribute),
        t2 = new A.XmlDeclaration(t1, null);
      type$.Set_XmlNodeType._as(B.Set_9UGP6);
      t1.__XmlNodeList__parent_F !== $ && A.throwLateFieldAI("_parent");
      t1.__XmlNodeList__parent_F = t2;
      t1.__XmlNodeList__nodeTypes_F !== $ && A.throwLateFieldAI("_nodeTypes");
      t1.set$__XmlNodeList__nodeTypes_F(B.Set_9UGP6);
      t1.addAll$1(0, attributes);
      return t2;
    },
    XmlDeclaration: function XmlDeclaration(t0, t1) {
      this.XmlHasAttributes_attributes = t0;
      this.XmlHasParent__parent = t1;
    },
    XmlDeclaration_copy_closure: function XmlDeclaration_copy_closure() {
    },
    _XmlDeclaration_XmlNode_XmlHasParent: function _XmlDeclaration_XmlNode_XmlHasParent() {
    },
    _XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes: function _XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes() {
    },
    XmlDoctype: function XmlDoctype(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.externalId = t1;
      _.internalSubset = t2;
      _.XmlHasParent__parent = t3;
    },
    _XmlDoctype_XmlNode_XmlHasParent: function _XmlDoctype_XmlNode_XmlHasParent() {
    },
    XmlDocument_XmlDocument$parse(input) {
      var t1 = type$.Iterable_XmlEvent._as(new A.XmlEventIterable(input, B.C_XmlDefaultEntityMapping, true, true, false, false, false)),
        result = A._setArrayType([], type$.JSArray_XmlNode);
      t1.forEach$1(0, new A._XmlNodeDecoderSink(new A.ConversionSink(type$.void_Function_Iterable_XmlNode._as(B.JSArray_methods.get$addAll(result)), type$.ConversionSink_List_XmlNode)).get$visit());
      return A.XmlDocument$(result);
    },
    XmlDocument$(children) {
      var t1 = A.XmlNodeList$(type$.XmlNode),
        t2 = new A.XmlDocument(t1);
      type$.Set_XmlNodeType._as(B.Set_uHvy);
      t1.__XmlNodeList__parent_F !== $ && A.throwLateFieldAI("_parent");
      t1.__XmlNodeList__parent_F = t2;
      t1.__XmlNodeList__nodeTypes_F !== $ && A.throwLateFieldAI("_nodeTypes");
      t1.set$__XmlNodeList__nodeTypes_F(B.Set_uHvy);
      t1.addAll$1(0, children);
      return t2;
    },
    XmlDocument: function XmlDocument(t0) {
      this.XmlHasChildren_children = t0;
    },
    XmlDocument_copy_closure: function XmlDocument_copy_closure() {
    },
    _XmlDocument_XmlNode_XmlHasChildren: function _XmlDocument_XmlNode_XmlHasChildren() {
    },
    XmlElement$($name, attributes, children, isSelfClosing) {
      var t4,
        _s10_ = "_nodeTypes",
        t1 = A.XmlNodeList$(type$.XmlNode),
        t2 = A.XmlNodeList$(type$.XmlAttribute),
        t3 = new A.XmlElement(isSelfClosing, $name, t1, t2, null);
      A._instanceType($name)._eval$1("XmlHasParent.T")._as(t3);
      A.XmlParentException_checkNoParent($name);
      $name.set$_parent(t3);
      t4 = type$.Set_XmlNodeType;
      t4._as(B.Set_9UGP6);
      t2.__XmlNodeList__parent_F !== $ && A.throwLateFieldAI("_parent");
      t2.__XmlNodeList__parent_F = t3;
      t2.__XmlNodeList__nodeTypes_F !== $ && A.throwLateFieldAI(_s10_);
      t2.set$__XmlNodeList__nodeTypes_F(B.Set_9UGP6);
      t2.addAll$1(0, attributes);
      t4._as(B.Set_HXHD4);
      t1.__XmlNodeList__parent_F !== $ && A.throwLateFieldAI("_parent");
      t1.__XmlNodeList__parent_F = t3;
      t1.__XmlNodeList__nodeTypes_F !== $ && A.throwLateFieldAI(_s10_);
      t1.set$__XmlNodeList__nodeTypes_F(B.Set_HXHD4);
      t1.addAll$1(0, children);
      return t3;
    },
    XmlElement$tag(qualifiedName, attributes, children, isSelfClosing) {
      var _s10_ = "_nodeTypes",
        t1 = A.XmlName_XmlName$fromString(qualifiedName),
        t2 = A.XmlNodeList$(type$.XmlNode),
        t3 = A.XmlNodeList$(type$.XmlAttribute),
        t4 = new A.XmlElement(isSelfClosing, t1, t2, t3, null);
      A._instanceType(t1)._eval$1("XmlHasParent.T")._as(t4);
      A.XmlParentException_checkNoParent(t1);
      t1.set$_parent(t4);
      t1 = type$.Set_XmlNodeType;
      t1._as(B.Set_9UGP6);
      t3.__XmlNodeList__parent_F !== $ && A.throwLateFieldAI("_parent");
      t3.__XmlNodeList__parent_F = t4;
      t3.__XmlNodeList__nodeTypes_F !== $ && A.throwLateFieldAI(_s10_);
      t3.set$__XmlNodeList__nodeTypes_F(B.Set_9UGP6);
      t3.addAll$1(0, attributes);
      t1._as(B.Set_HXHD4);
      t2.__XmlNodeList__parent_F !== $ && A.throwLateFieldAI("_parent");
      t2.__XmlNodeList__parent_F = t4;
      t2.__XmlNodeList__nodeTypes_F !== $ && A.throwLateFieldAI(_s10_);
      t2.set$__XmlNodeList__nodeTypes_F(B.Set_HXHD4);
      t2.addAll$1(0, children);
      return t4;
    },
    XmlElement: function XmlElement(t0, t1, t2, t3, t4) {
      var _ = this;
      _.isSelfClosing = t0;
      _.name = t1;
      _.XmlHasChildren_children = t2;
      _.XmlHasAttributes_attributes = t3;
      _.XmlHasParent__parent = t4;
    },
    XmlElement_copy_closure: function XmlElement_copy_closure() {
    },
    XmlElement_copy_closure0: function XmlElement_copy_closure0() {
    },
    _XmlElement_XmlNode_XmlHasName: function _XmlElement_XmlNode_XmlHasName() {
    },
    _XmlElement_XmlNode_XmlHasName_XmlHasParent: function _XmlElement_XmlNode_XmlHasName_XmlHasParent() {
    },
    _XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes: function _XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes() {
    },
    _XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes_XmlHasChildren: function _XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes_XmlHasChildren() {
    },
    XmlNode: function XmlNode() {
    },
    _XmlNode_Object_XmlAttributesBase: function _XmlNode_Object_XmlAttributesBase() {
    },
    _XmlNode_Object_XmlAttributesBase_XmlChildrenBase: function _XmlNode_Object_XmlAttributesBase_XmlChildrenBase() {
    },
    _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor: function _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor() {
    },
    _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter: function _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter() {
    },
    _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase: function _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase() {
    },
    _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase_XmlValueBase: function _XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase_XmlValueBase() {
    },
    XmlProcessing: function XmlProcessing(t0, t1, t2) {
      this.target = t0;
      this.value = t1;
      this.XmlHasParent__parent = t2;
    },
    XmlText: function XmlText(t0, t1) {
      this.value = t0;
      this.XmlHasParent__parent = t1;
    },
    XmlCache: function XmlCache(t0, t1, t2, t3) {
      var _ = this;
      _._loader = t0;
      _._maxSize = t1;
      _._cache$_values = t2;
      _.$ti = t3;
    },
    XmlCharacterDataParser: function XmlCharacterDataParser(t0, t1) {
      this._stopper = t0;
      this._minLength = t1;
    },
    XmlName_XmlName(local) {
      var t1 = new A.XmlSimpleName(local, null);
      return t1;
    },
    XmlName_XmlName$fromString(qualified) {
      var index = B.JSString_methods.indexOf$1(qualified, ":");
      if (index > 0)
        return new A.XmlPrefixName(B.JSString_methods.substring$2(qualified, 0, index), B.JSString_methods.substring$1(qualified, index + 1), qualified, null);
      else
        return new A.XmlSimpleName(qualified, null);
    },
    XmlName: function XmlName() {
    },
    _XmlName_Object_XmlHasVisitor: function _XmlName_Object_XmlHasVisitor() {
    },
    _XmlName_Object_XmlHasVisitor_XmlHasWriter: function _XmlName_Object_XmlHasVisitor_XmlHasWriter() {
    },
    _XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent: function _XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent() {
    },
    createNameMatcher($name, namespace) {
      if ($name === "*")
        return new A.createNameMatcher_closure();
      else
        return new A.createNameMatcher_closure0($name);
    },
    createNameMatcher_closure: function createNameMatcher_closure() {
    },
    createNameMatcher_closure0: function createNameMatcher_closure0(t0) {
      this.name = t0;
    },
    XmlNodeList$($E) {
      return new A.XmlNodeList(A._setArrayType([], $E._eval$1("JSArray<0>")), $E._eval$1("XmlNodeList<0>"));
    },
    XmlNodeList: function XmlNodeList(t0, t1) {
      var _ = this;
      _.__XmlNodeList__nodeTypes_F = _.__XmlNodeList__parent_F = $;
      _._base = t0;
      _.$ti = t1;
    },
    XmlNodeList__expandFragment_closure: function XmlNodeList__expandFragment_closure(t0) {
      this.$this = t0;
    },
    XmlPrefixName: function XmlPrefixName(t0, t1, t2, t3) {
      var _ = this;
      _.prefix = t0;
      _.local = t1;
      _.qualified = t2;
      _.XmlHasParent__parent = t3;
    },
    XmlSimpleName: function XmlSimpleName(t0, t1) {
      this.local = t0;
      this.XmlHasParent__parent = t1;
    },
    XmlVisitor: function XmlVisitor() {
    },
    XmlWriter: function XmlWriter(t0, t1) {
      this.buffer = t0;
      this.entityMapping = t1;
    },
    _XmlWriter_Object_XmlVisitor: function _XmlWriter_Object_XmlVisitor() {
    },
    XmlAnnotator: function XmlAnnotator(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.validateNesting = t0;
      _.validateDocument = t1;
      _.withBuffer = t2;
      _.withLocation = t3;
      _.withParent = t4;
      _._roots = t5;
      _._parents = t6;
    },
    XmlHasBuffer: function XmlHasBuffer() {
    },
    XmlHasLocation: function XmlHasLocation() {
    },
    XmlHasParent0: function XmlHasParent0() {
    },
    _XmlEventEncoderSink: function _XmlEventEncoderSink(t0, t1) {
      this.sink = t0;
      this.entityMapping = t1;
    },
    __XmlEventEncoderSink_Object_XmlEventVisitor: function __XmlEventEncoderSink_Object_XmlEventVisitor() {
    },
    _XmlNodeDecoderSink: function _XmlNodeDecoderSink(t0) {
      this.sink = t0;
      this.parent = null;
    },
    _XmlNodeDecoderSink_convertAttributes_closure: function _XmlNodeDecoderSink_convertAttributes_closure() {
    },
    __XmlNodeDecoderSink_Object_XmlEventVisitor: function __XmlNodeDecoderSink_Object_XmlEventVisitor() {
    },
    XmlEvent: function XmlEvent() {
    },
    _XmlEvent_Object_XmlHasParent: function _XmlEvent_Object_XmlHasParent() {
    },
    _XmlEvent_Object_XmlHasParent_XmlHasLocation: function _XmlEvent_Object_XmlHasParent_XmlHasLocation() {
    },
    _XmlEvent_Object_XmlHasParent_XmlHasLocation_XmlHasBuffer: function _XmlEvent_Object_XmlHasParent_XmlHasLocation_XmlHasBuffer() {
    },
    XmlCDATAEvent: function XmlCDATAEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.value = t0;
      _.XmlHasBuffer__buffer = t1;
      _.XmlHasLocation__start = t2;
      _.XmlHasLocation__stop = t3;
      _.XmlHasParent__parent0 = t4;
    },
    XmlCommentEvent: function XmlCommentEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.value = t0;
      _.XmlHasBuffer__buffer = t1;
      _.XmlHasLocation__start = t2;
      _.XmlHasLocation__stop = t3;
      _.XmlHasParent__parent0 = t4;
    },
    XmlDeclarationEvent: function XmlDeclarationEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.attributes = t0;
      _.XmlHasBuffer__buffer = t1;
      _.XmlHasLocation__start = t2;
      _.XmlHasLocation__stop = t3;
      _.XmlHasParent__parent0 = t4;
    },
    XmlDoctypeEvent: function XmlDoctypeEvent(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.externalId = t1;
      _.internalSubset = t2;
      _.XmlHasBuffer__buffer = t3;
      _.XmlHasLocation__start = t4;
      _.XmlHasLocation__stop = t5;
      _.XmlHasParent__parent0 = t6;
    },
    XmlEndElementEvent: function XmlEndElementEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.XmlHasBuffer__buffer = t1;
      _.XmlHasLocation__start = t2;
      _.XmlHasLocation__stop = t3;
      _.XmlHasParent__parent0 = t4;
    },
    _XmlEndElementEvent_XmlEvent_XmlNamed: function _XmlEndElementEvent_XmlEvent_XmlNamed() {
    },
    XmlProcessingEvent: function XmlProcessingEvent(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.target = t0;
      _.value = t1;
      _.XmlHasBuffer__buffer = t2;
      _.XmlHasLocation__start = t3;
      _.XmlHasLocation__stop = t4;
      _.XmlHasParent__parent0 = t5;
    },
    XmlStartElementEvent: function XmlStartElementEvent(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.attributes = t1;
      _.isSelfClosing = t2;
      _.XmlHasBuffer__buffer = t3;
      _.XmlHasLocation__start = t4;
      _.XmlHasLocation__stop = t5;
      _.XmlHasParent__parent0 = t6;
    },
    _XmlStartElementEvent_XmlEvent_XmlNamed: function _XmlStartElementEvent_XmlEvent_XmlNamed() {
    },
    XmlRawTextEvent: function XmlRawTextEvent(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.raw = t0;
      _.entityMapping = t1;
      _.__XmlRawTextEvent_value_FI = $;
      _.XmlHasBuffer__buffer = t2;
      _.XmlHasLocation__start = t3;
      _.XmlHasLocation__stop = t4;
      _.XmlHasParent__parent0 = t5;
    },
    XmlEventIterable: function XmlEventIterable(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.input = t0;
      _.entityMapping = t1;
      _.validateNesting = t2;
      _.validateDocument = t3;
      _.withBuffer = t4;
      _.withLocation = t5;
      _.withParent = t6;
    },
    XmlEventIterator: function XmlEventIterator(t0, t1, t2) {
      var _ = this;
      _._eventParser = t0;
      _._annotator = t1;
      _._context = t2;
      _._iterator$_current = null;
    },
    XmlEventParser: function XmlEventParser(t0) {
      this.entityMapping = t0;
    },
    XmlEventParser_characterData_closure: function XmlEventParser_characterData_closure(t0) {
      this.$this = t0;
    },
    XmlEventParser_startElement_closure: function XmlEventParser_startElement_closure() {
    },
    XmlEventParser_attribute_closure: function XmlEventParser_attribute_closure(t0) {
      this.$this = t0;
    },
    XmlEventParser_attributeAssignment_closure: function XmlEventParser_attributeAssignment_closure() {
    },
    XmlEventParser_attributeValueDoubleQuote_closure: function XmlEventParser_attributeValueDoubleQuote_closure() {
    },
    XmlEventParser_attributeValueSingleQuote_closure: function XmlEventParser_attributeValueSingleQuote_closure() {
    },
    XmlEventParser_attributeValueNoQuote_closure: function XmlEventParser_attributeValueNoQuote_closure() {
    },
    XmlEventParser_endElement_closure: function XmlEventParser_endElement_closure() {
    },
    XmlEventParser_comment_closure: function XmlEventParser_comment_closure() {
    },
    XmlEventParser_cdata_closure: function XmlEventParser_cdata_closure() {
    },
    XmlEventParser_declaration_closure: function XmlEventParser_declaration_closure() {
    },
    XmlEventParser_processing_closure: function XmlEventParser_processing_closure() {
    },
    XmlEventParser_processing_closure0: function XmlEventParser_processing_closure0() {
    },
    XmlEventParser_doctype_closure: function XmlEventParser_doctype_closure() {
    },
    XmlEventParser_doctypeExternalIdSystem_closure: function XmlEventParser_doctypeExternalIdSystem_closure() {
    },
    XmlEventParser_doctypeExternalIdPublic_closure: function XmlEventParser_doctypeExternalIdPublic_closure() {
    },
    XmlEventParser_doctypeIntSubset_closure: function XmlEventParser_doctypeIntSubset_closure() {
    },
    eventParserCache_closure: function eventParserCache_closure() {
    },
    ConversionSink: function ConversionSink(t0, t1) {
      this.callback = t0;
      this.$ti = t1;
    },
    XmlEventAttribute: function XmlEventAttribute(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.attributeType = t2;
      _.XmlHasParent__parent0 = t3;
    },
    _XmlEventAttribute_Object_XmlNamed: function _XmlEventAttribute_Object_XmlNamed() {
    },
    _XmlEventAttribute_Object_XmlNamed_XmlHasParent: function _XmlEventAttribute_Object_XmlNamed_XmlHasParent() {
    },
    XmlNamed: function XmlNamed() {
    },
    XmlEventVisitor: function XmlEventVisitor() {
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    _convertNativeToDart_Value(value) {
      var proto, t1, values, i;
      if (value == null)
        return value;
      if (typeof value == "string" || typeof value == "number" || A._isBool(value))
        return value;
      proto = Object.getPrototypeOf(value);
      t1 = proto === Object.prototype;
      t1.toString;
      if (!t1) {
        t1 = proto === null;
        t1.toString;
      } else
        t1 = true;
      if (t1)
        return A.convertNativeToDart_Dictionary(value);
      t1 = Array.isArray(value);
      t1.toString;
      if (t1) {
        values = [];
        i = 0;
        while (true) {
          t1 = value.length;
          t1.toString;
          if (!(i < t1))
            break;
          values.push(A._convertNativeToDart_Value(value[i]));
          ++i;
        }
        return values;
      }
      return value;
    },
    convertNativeToDart_Dictionary(object) {
      var dict, keys, t1, _i, key, t2;
      if (object == null)
        return null;
      dict = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
        key = keys[_i];
        t2 = key;
        t2.toString;
        dict.$indexSet(0, t2, A._convertNativeToDart_Value(object[key]));
      }
      return dict;
    },
    JSAnyUtilityExtension_instanceOfString(_this, constructorName) {
      var parts, $constructor, t1, t2, _i, part;
      if (constructorName.length === 0)
        return false;
      parts = constructorName.split(".");
      $constructor = type$.JSObject._as(self);
      for (t1 = parts.length, t2 = type$.nullable_JSObject, _i = 0; _i < t1; ++_i) {
        part = parts[_i];
        $constructor = t2._as($constructor[part]);
        if ($constructor == null)
          return false;
      }
      return _this instanceof type$.JavaScriptFunction._as($constructor);
    },
    JSObjectUnsafeUtilExtension__callMethod(_this, method, arg1, arg2, arg3, arg4) {
      var t1 = _this[method]();
      return t1;
    },
    CRC32(crc, b) {
      return (B.List_YyJ[(crc ^ b) & 255] ^ crc >>> 8) >>> 0;
    },
    IterableExtension_sorted(_this, compare, $T) {
      var t1 = A.List_List$of(_this, true, $T);
      B.JSArray_methods.sort$1(t1, compare);
      return t1;
    },
    IterableExtension_firstWhereOrNull(_this, test, $T) {
      var _i, element;
      for (_i = 0; _i < 14; ++_i) {
        element = _this[_i];
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
      }
      return null;
    },
    IterableExtension_get_firstOrNull(_this, $T) {
      var t1 = J.get$iterator$ax(_this.__internal$_iterable);
      if (new A.WhereIterator(t1, _this._f, _this.$ti._eval$1("WhereIterator<1>")).moveNext$0())
        return t1.get$current(t1);
      return null;
    },
    main() {
      A.bootstrap(A.excel_service__$ExcelFileRepositoryInitializer$closure(), null);
    },
    resolve(parser, $R) {
      var todo, seen, t2, $parent, t3, _i, child, referenced,
        t1 = type$.Parser_dynamic,
        mapping = A.LinkedHashMap_LinkedHashMap$_empty(type$.ResolvableParser_dynamic, t1);
      parser = A._dereference(parser, mapping, $R);
      todo = A._setArrayType([parser], type$.JSArray_Parser_dynamic);
      seen = A.LinkedHashSet_LinkedHashSet$_literal([parser], t1);
      for (t1 = type$.dynamic; t2 = todo.length, t2 !== 0;) {
        if (0 >= t2)
          return A.ioore(todo, -1);
        $parent = todo.pop();
        for (t2 = $parent.get$children($parent), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
          child = t2[_i];
          if (child instanceof A.ReferenceParser) {
            referenced = A._dereference(child, mapping, t1);
            $parent.replace$2(0, child, referenced);
            child = referenced;
          }
          if (seen.add$1(0, child))
            B.JSArray_methods.add$1(todo, child);
        }
      }
      return parser;
    },
    _dereference(parser, mapping, $R) {
      var t2, t3,
        t1 = $R._eval$1("ResolvableParser<0>"),
        references = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      for (; t1._is(parser);) {
        if (mapping.containsKey$1(0, parser))
          return $R._eval$1("Parser0<0>")._as(mapping.$index(0, parser));
        else if (!references.add$1(0, parser))
          throw A.wrapException(A.StateError$("Recursive references detected: " + references.toString$0(0)));
        parser = parser.$ti._eval$1("Parser0<1>")._as(A.Primitives_applyFunction(parser.$function, parser.$arguments, null));
      }
      for (t1 = A._LinkedHashSetIterator$(references, references._collection$_modifications, references.$ti._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        mapping.$indexSet(0, t3 == null ? t2._as(t3) : t3, parser);
      }
      return parser;
    },
    _toFormattedChar(code) {
      A._asInt(code);
      switch (code) {
        case 8:
          return "\\b";
        case 9:
          return "\\t";
        case 10:
          return "\\n";
        case 11:
          return "\\v";
        case 12:
          return "\\f";
        case 13:
          return "\\r";
        case 34:
          return '\\"';
        case 39:
          return "\\'";
        case 92:
          return "\\\\";
      }
      if (code < 32)
        return "\\x" + B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(code, 16), 2, "0");
      return A.Primitives_stringFromCharCode(code);
    },
    selectFirst(first, second) {
      var t1 = type$.Failure;
      t1._as(first);
      t1._as(second);
      return first;
    },
    selectLast(first, second) {
      var t1 = type$.Failure;
      t1._as(first);
      return t1._as(second);
    },
    selectFarthest(first, second) {
      var t1 = type$.Failure;
      t1._as(first);
      t1._as(second);
      return first.position <= second.position ? second : first;
    },
    microsecTimeStamp(time) {
      return (time == null ? new A.DateTime(Date.now(), 0, false) : time).toUtc$0().difference$1($.$get$_latestUPDEpoch())._duration;
    },
    WorkerRequestExt_unwrapInPlace(_this, logger) {
      var _null = null,
        t1 = J.getInterceptor$asx(_this),
        t2 = A._asNumQ(t1.$index(_this, 0)),
        ts = t2 == null ? _null : B.JSNumber_methods.toInt$0(t2);
      if (ts != null)
        t1.$indexSet(_this, 0, A.microsecTimeStamp(_null) - ts);
      t1.$indexSet(_this, 2, B.JSNumber_methods.toInt$0(A._asNum(t1.$index(_this, 2))));
      t2 = A._asNumQ(t1.$index(_this, 5));
      t1.$indexSet(_this, 5, t2 == null ? _null : B.JSNumber_methods.toInt$0(t2));
      t2 = type$.nullable_JSObject._as(t1.$index(_this, 1));
      t1.$indexSet(_this, 1, t2 == null ? _null : new A._WebWorkerChannel(t2, logger));
      t1.$indexSet(_this, 4, A.SquadronCancelationToken_deserialize(type$.nullable_List_dynamic._as(t1.$index(_this, 4))));
      if (t1.$index(_this, 6) == null)
        t1.$indexSet(_this, 6, false);
      if (t1.$index(_this, 3) == null)
        t1.$indexSet(_this, 3, B.List_empty2);
    },
    WorkerRequestExt_from(data) {
      if (J.get$length$asx(data) !== 7)
        throw A.wrapException(A.SquadronErrorExt_create("Invalid worker request", null));
      return data;
    },
    WorkerResponseExt_wrapInPlace(_this) {
      var result, t1;
      if (1 >= _this.length)
        return A.ioore(_this, 1);
      result = _this[1];
      if (type$.Iterable_dynamic._is(result) && !type$.List_dynamic._is(result))
        B.JSArray_methods.$indexSet(_this, 1, J.toList$0$ax(result));
      if (2 >= _this.length)
        return A.ioore(_this, 2);
      t1 = type$.nullable_SquadronException._as(_this[2]);
      B.JSArray_methods.$indexSet(_this, 2, t1 == null ? null : t1.serialize$0());
      return _this;
    },
    _LogEventSerializationExt__stringify(message) {
      var ex, t1, exception;
      if (type$.Function._is(message))
        try {
          t1 = A._LogEventSerializationExt__stringify(message.call$0());
          return t1;
        } catch (exception) {
          ex = A.unwrapException(exception);
          t1 = A.S(ex);
          return "Deferred message failed with error: " + t1;
        }
      else
        return J.toString$0$(message);
    },
    filterElements(iterable, $name, namespace) {
      var matcher = A.createNameMatcher($name, namespace),
        t1 = iterable.whereType$1$0(0, type$.XmlElement),
        t2 = t1.$ti;
      return new A.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(matcher), t2._eval$1("WhereIterable<Iterable.E>"));
    },
    XmlParentExtension_get_parentElement(_this) {
      var node;
      for (node = _this.XmlHasParent__parent; node != null; node = node.get$parent(node))
        if (node instanceof A.XmlElement)
          return node;
      return null;
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, type$.Invocation._as(invocation)));
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.Null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_0ua;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 29);
      receiver.push(value);
    },
    removeWhere$1(receiver, test) {
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 16);
      this._removeWhere$2(receiver, test, true);
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!A.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "addAll", 2);
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(receiver, f) {
      return this.map$1$1(receiver, f, type$.dynamic);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    fillRange$3(receiver, start, end, fillValue) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("1?")._as(fillValue);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "fillRange");
      A.RangeError_checkValidRange(start, end, receiver.length);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    replaceRange$3(receiver, start, end, replacement) {
      var removeLength, insertLength, insertEnd, t1, delta, newLength, _this = this;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(replacement);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "replaceRange", "remove from or add to");
      A.RangeError_checkValidRange(start, end, receiver.length);
      if (!type$.EfficientLengthIterable_dynamic._is(replacement))
        replacement = J.toList$0$ax(replacement);
      removeLength = end - start;
      insertLength = J.get$length$asx(replacement);
      insertEnd = start + insertLength;
      t1 = receiver.length;
      if (removeLength >= insertLength) {
        delta = removeLength - insertLength;
        newLength = t1 - delta;
        _this.setRange$3(receiver, start, insertEnd, replacement);
        if (delta !== 0) {
          _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          _this.set$length(receiver, newLength);
        }
      } else {
        newLength = t1 + (insertLength - removeLength);
        receiver.length = newLength;
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, replacement);
      }
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A._arrayInstanceType(receiver)._eval$1("ReversedListIterable<1>"));
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "sort");
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      undefineds = 0;
      if (t1._precomputed1._is(null))
        for (i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    sort$0(receiver) {
      return this.sort$1(receiver, null);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    indexOf$2(receiver, element, start) {
      var i,
        $length = receiver.length;
      if (start >= $length)
        return -1;
      for (i = start; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    indexOf$1(receiver, element) {
      return this.indexOf$2(receiver, element, 0);
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "set length", "change the length of");
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current(_) {
      var t1 = this.__interceptors$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$__interceptors$_current(null);
        return false;
      }
      _this.set$__interceptors$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$__interceptors$_current(_current) {
      this.__interceptors$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2, match, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1(receiver, string) {
      return this.allMatches$2(receiver, string, 0);
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      return A.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    startsWith$1(receiver, pattern) {
      var otherLength = pattern.length;
      if (otherLength > receiver.length)
        return false;
      return pattern === receiver.substring(0, otherLength);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    contains$2(receiver, other, startIndex) {
      var t1 = receiver.length;
      if (startIndex > t1)
        throw A.wrapException(A.RangeError$range(startIndex, 0, t1, null, null));
      return A.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1(receiver, other) {
      return this.contains$2(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), A._instanceType(this)._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current(_) {
      var t1 = this._source;
      return this.$ti._rest[1]._as(t1.get$current(t1));
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, start, end), t1._precomputed1, t1._rest[1]);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.ReachabilityError.prototype = {
    toString$0(_) {
      return "ReachabilityError: " + this._message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      var t1 = this.__internal$_string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.SubListIterable.prototype = {
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this.__internal$_start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.ListIterator.prototype = {
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, A._instanceType(this)._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current(t1)));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current(t1)))
          return true;
      return false;
    },
    get$current(_) {
      var t1 = this._source;
      return this.$ti._precomputed1._as(t1.get$current(t1));
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {};
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A._ListIndicesIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._backedList);
    },
    elementAt$1(_, index) {
      A.IndexError_check(index, J.get$length$asx(this._backedList), this, null, null);
      return index;
    }
  };
  A.ListMapView.prototype = {
    $index(_, key) {
      return this.containsKey$1(0, key) ? J.$index$asx(this.__internal$_values, A._asInt(key)) : null;
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_values);
    },
    get$keys(_) {
      return new A._ListIndicesIterable(this.__internal$_values);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_values);
    },
    containsKey$1(_, key) {
      return A._isInt(key) && key >= 0 && key < J.get$length$asx(this.__internal$_values);
    },
    forEach$1(_, f) {
      var t1, t2, $length, i;
      this.$ti._eval$1("~(int,1)")._as(f);
      t1 = this.__internal$_values;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i) {
        f.call$2(i, t2.$index(t1, i));
        if ($length !== t2.get$length(t1))
          throw A.wrapException(A.ConcurrentModificationError$(t1));
      }
    }
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * B.JSString_methods.get$hashCode(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + this.__internal$_name + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this.__internal$_name === other.__internal$_name;
    },
    $isSymbol0: 1
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A._Record_3.prototype = {$recipe: "+(1,2,3)", $shape: 2};
  A._Record_4.prototype = {$recipe: "+(1,2,3,4)", $shape: 3};
  A._Record_5.prototype = {$recipe: "+(1,2,3,4,5)", $shape: 4};
  A._Record_8.prototype = {$recipe: "+(1,2,3,4,5,6,7,8)", $shape: 5};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    get$entries(_) {
      return new A._SyncStarIterable(this.entries$body$ConstantMap(0), A._instanceType(this)._eval$1("_SyncStarIterable<MapEntry<1,2>>"));
    },
    entries$body$ConstantMap($async$_) {
      var $async$self = this;
      return function() {
        var _ = $async$_;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys($async$self), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current(t1);
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = new A.MapEntry(key, t4 == null ? t3._as(t4) : t4, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    map$2$1(_, transform, K2, V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    map$1(_, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, transform, t1, t1);
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._values.length;
    },
    get$__js_helper$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsKey$1(_, key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(0, key))
        return null;
      return this._values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$__js_helper$_keys();
      values = this._values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys(_) {
      return new A._KeysOrValues(this.get$__js_helper$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return 0 === this._elements.length;
    },
    get$isNotEmpty(_) {
      return 0 !== this._elements.length;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current(_) {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this.__js_helper$_length) {
        _this.set$__js_helper$_current(null);
        return false;
      }
      _this.set$__js_helper$_current(_this._elements[t1]);
      ++_this.__js_helper$_index;
      return true;
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,2>"));
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys(_) {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.ConstantSet.prototype = {};
  A.GeneralConstantSet.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return this._elements.length === 0;
    },
    get$isNotEmpty(_) {
      return this._elements.length !== 0;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    },
    _getMap$0() {
      var t1, t2, _i, key, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,1>"));
        for (t1 = _this._elements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          backingMap.$indexSet(0, key, key);
        }
        _this.$map = backingMap;
      }
      return backingMap;
    },
    contains$1(_, key) {
      return this._getMap$0().containsKey$1(0, key);
    }
  };
  A.Instantiation.prototype = {
    Instantiation$1(_genericClosure) {
      if (false)
        A.instantiatedGenericFunctionType(0, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation1 && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeTypeOfClosure(this) === A.getRuntimeTypeOfClosure(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeTypeOfClosure(this), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$1(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      if (t1 instanceof A.Symbol)
        return t1;
      return this._memberName = new A.Symbol(A._asString(t1));
    },
    get$positionalArguments() {
      var t1, t2, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty2;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = t2.get$length(t1) - J.get$length$asx(_this._namedArgumentNames) - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty2;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      list.$flags = 3;
      return list;
    },
    get$namedArguments() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, map, i, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = t4.get$length(t3) - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new A.Symbol(A._asString(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 3
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$keys(_) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(_, key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(_, key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(0, key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this.__js_helper$_unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    clear$0(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this._strings = _this._nums = _this.__js_helper$_rest = _this._first = _this._last = null;
        _this.__js_helper$_length = 0;
        _this._modified$0();
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this.__js_helper$_unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    __js_helper$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current(_) {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 15
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 61
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 39
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A._Record3.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1, this._2];
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A._Record3 && _this.$shape === other.$shape && J.$eq$(_this._0, other._0) && J.$eq$(_this._1, other._1) && J.$eq$(_this._2, other._2);
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(_this.$shape, _this._0, _this._1, _this._2, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A._RecordN.prototype = {
    _getFieldValues$0() {
      return this._values;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._RecordN && this.$shape === other.$shape && A._RecordN__equalValues(this._values, other._values);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, A.Object_hashAll(this._values), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1(_, string) {
      return this.allMatches$2(0, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start(_) {
      return this._match.index;
    },
    get$end(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    group$1(index) {
      var t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current(_) {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, t4, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(0);
          if (match._match.index === nextIndex) {
            t1 = false;
            if (t3._nativeRegExp.unicode) {
              t3 = _this._nextIndex;
              t4 = t3 + 1;
              if (t4 < t2) {
                if (!(t3 >= 0 && t3 < t2))
                  return A.ioore(string, t3);
                t3 = string.charCodeAt(t3);
                if (t3 >= 55296 && t3 <= 56319) {
                  if (!(t4 >= 0))
                    return A.ioore(string, t4);
                  t1 = string.charCodeAt(t4);
                  t1 = t1 >= 56320 && t1 <= 57343;
                }
              }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end(_) {
      return this.start + this.pattern.length;
    },
    group$1(group_) {
      if (group_ !== 0)
        throw A.wrapException(A.RangeError$value(group_, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start(receiver) {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current(_) {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readField$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this._name));
      return t1;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_EOZ;
    },
    asUint8List$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      return $length == null ? new Uint8Array(receiver, offsetInBytes) : new Uint8Array(receiver, offsetInBytes, $length);
    },
    asByteData$2(receiver, offsetInBytes, $length) {
      var t1;
      A._checkViewArguments(receiver, offsetInBytes, $length);
      t1 = new DataView(receiver, offsetInBytes, $length);
      return t1;
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    get$buffer(receiver) {
      if (((receiver.$flags | 0) & 2) !== 0)
        return new A._UnmodifiableNativeByteBufferView(receiver.buffer);
      else
        return receiver.buffer;
    },
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  A._UnmodifiableNativeByteBufferView.prototype = {
    asUint8List$2(_, offsetInBytes, $length) {
      var result = A.NativeUint8List_NativeUint8List$view(this._data, offsetInBytes, $length);
      result.$flags = 3;
      return result;
    },
    asByteData$2(_, offsetInBytes, $length) {
      var result = A.NativeByteData_NativeByteData$view(this._data, offsetInBytes, $length);
      result.$flags = 3;
      return result;
    },
    $isByteBuffer: 1
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_mF8;
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_Ymk;
    },
    sublist$2(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat32List: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_Ymk;
    },
    sublist$2(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat64List: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_cot;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isInt16List: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_m1p;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isInt32List: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_woc;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isInt8List: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2mh;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2mh;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_9Bb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isUint8ClampedList: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_CSc;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 16
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 64
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 17
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 17
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 1
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(_, value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 4
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 65
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 73
  };
  A._SyncStarIterator.prototype = {
    get$current(_) {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, _null = null, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this.set$_async$_current(J.get$current$z(nestedIterator));
              return true;
            } else
              _this.set$_nestedIterator(_null);
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this.set$_nestedIterator(_null);
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this.set$_async$_current(_null);
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this.set$_async$_current(_null);
            _this._body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._body);
        _this._body = t1;
        return 2;
      } else {
        _this.set$_nestedIterator(J.get$iterator$ax(iterable));
        return 2;
      }
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        t1.error = theError;
        t1.stackTrace = theStackTrace;
        if (t2 === 0 || _this.eagerError)
          _this._future._completeError$2(theError, theStackTrace);
      } else if (t2 === 0 && !_this.eagerError) {
        t2 = t1.error;
        t2.toString;
        t1 = t1.stackTrace;
        t1.toString;
        _this._future._completeError$2(t2, t1);
      }
    },
    $signature: 81
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var remainingResults, valueList, t1, value0, t3, t4, _i, t5, _this = this,
        t2 = _this.T;
      t2._as(value);
      t3 = _this._box_0;
      remainingResults = --t3.remaining;
      valueList = t3.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (J.$eq$(remainingResults, 0)) {
          t1 = A._setArrayType([], t2._eval$1("JSArray<0>"));
          for (t3 = valueList, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
            value0 = t3[_i];
            t5 = value0;
            if (t5 == null)
              t5 = t2._as(t5);
            J.add$1$ax(t1, t5);
          }
          _this._future._completeWithValue$1(t1);
        }
      } else if (J.$eq$(remainingResults, 0) && !_this.eagerError) {
        t1 = t3.error;
        t1.toString;
        t3 = t3.stackTrace;
        t3.toString;
        _this._future._completeError$2(t1, t3);
      }
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var _0_0,
        t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      _0_0 = A._interceptUserError(error, stackTrace);
      t1._asyncCompleteError$2(_0_0.error, _0_0.stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(_, value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    _setChained$1(source) {
      this._state = this._state & 1 | 4;
      this._resultOrListeners = source;
    },
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(new A.AsyncError(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      var t1 = this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        A._Future__chainCoreFutureAsync(value, this);
        return;
      }
      this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 1
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 1
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 16
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 87
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 1
  };
  A._Future__chainCoreFutureAsync_closure.prototype = {
    call$0() {
      A._Future__chainCoreFutureSync(this._box_0.source, this.target);
    },
    $signature: 1
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 1
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, t3, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 30
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        if (t2 == null)
          t2 = A.AsyncError_defaultStackTrace(t1);
        t3 = this._box_0;
        t3.listenerValueOrError = new A.AsyncError(t1, t2);
        t3.listenerHasError = true;
      }
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, t3, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        if (t1.error === e) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1;
          t1 = t2;
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  A._AsyncCallbackEntry.prototype = {};
  A._StreamIterator.prototype = {};
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 1
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$keys(_) {
      return new A._HashMapKeyIterable(this, this.$ti._eval$1("_HashMapKeyIterable<1>"));
    },
    containsKey$1(_, key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else {
        rest = _this._collection$_rest;
        if (rest == null)
          rest = _this._collection$_rest = A._HashMap__newHashTable();
        hash = A.objectHashCode(key) & 1073741823;
        bucket = rest[hash];
        if (bucket == null) {
          A._HashMap__setTableEntry(rest, hash, [key, value]);
          ++_this._collection$_length;
          _this._keys = null;
        } else {
          index = _this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            ++_this._collection$_length;
            _this._keys = null;
          }
        }
      }
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, index, names, entries, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      index = 0;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      }
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      var t1 = this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _getBucket$2(table, key) {
      return table[A.objectHashCode(key) & 1073741823];
    }
  };
  A._IdentityHashMap.prototype = {
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_map._collection$_length !== 0;
    },
    get$iterator(_) {
      var t1 = this._collection$_map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, _this.$ti._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      _this.$ti._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1(_, element) {
      var rest, hash, bucket, _this = this;
      _this.$ti._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = J.get$hashCode$(element) & 1073741823;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var t1 = this._remove$1(0, object);
      return t1;
    },
    _remove$1(_, object) {
      var hash, bucket, index, cell,
        rest = this._collection$_rest;
      if (rest == null)
        return false;
      hash = J.get$hashCode$(object) & 1073741823;
      bucket = rest[hash];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      this._unlinkCell$1(cell);
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      this.$ti._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(_this.$ti._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 36
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(receiver, f) {
      return this.map$1$1(receiver, f, type$.dynamic);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListBase.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListBase.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    sublist$2(receiver, start, end) {
      var listLength = this.get$length(receiver);
      A.RangeError_checkValidRange(start, end, listLength);
      return A.List_List$of(this.getRange$2(receiver, start, end), true, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      A.instanceType(receiver)._eval$1("ListBase.E?")._as(fill);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListBase.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    forEach$1(receiver, action) {
      var t2, key, t3,
        t1 = A.instanceType(receiver);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys(receiver)), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current(t2);
        t3 = this.$index(receiver, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    get$entries(receiver) {
      return J.map$1$1$ax(this.get$keys(receiver), new A.MapBase_entries_closure(receiver), A.instanceType(receiver)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(receiver, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A.instanceType(receiver);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = J.get$iterator$ax(this.get$keys(receiver)), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current(t2);
        t3 = this.$index(receiver, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    map$1(receiver, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(receiver, transform, t1, t1);
    },
    get$length(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    toString$0(receiver) {
      return A.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A.instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = J.$index$asx(t1, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    $signature() {
      return A.instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t2 = t1._contents += t2;
      t1._contents = t2 + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 9
  };
  A.UnmodifiableMapBase.prototype = {};
  A._UnmodifiableMapMixin.prototype = {};
  A.MapView.prototype = {
    $index(_, key) {
      return this._collection$_map.$index(0, key);
    },
    forEach$1(_, action) {
      this._collection$_map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      return this._collection$_map.__js_helper$_length === 0;
    },
    get$length(_) {
      return this._collection$_map.__js_helper$_length;
    },
    get$keys(_) {
      var t1 = this._collection$_map;
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._collection$_map);
    },
    get$entries(_) {
      var t1 = this._collection$_map;
      return t1.get$entries(t1);
    },
    map$2$1(_, transform, K2, V2) {
      var t1 = this._collection$_map;
      return t1.map$2$1(t1, this.$ti._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    map$1(_, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, transform, t1, t1);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._precomputed1);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    map$1$1(_, f, $T) {
      var t1 = A._instanceType(this);
      return new A.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1(_, f) {
      return this.map$1$1(0, f, type$.dynamic);
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current(iterator));
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (A.boolConversionCheck(test.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current(iterator);
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 18
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 18
  };
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    encode$2$toEncodable(value, toEncodable) {
      var t1 = this.get$encoder();
      t1 = A._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      return t1;
    },
    get$encoder() {
      return B.JsonEncoder_null_null;
    }
  };
  A.JsonEncoder.prototype = {};
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var t1, offset, i, charCode, t2, t3,
        $length = s.length;
      for (t1 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = s.charCodeAt(i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t2 = charCode & 64512;
            if (t2 === 55296) {
              t3 = i + 1;
              t3 = !(t3 < $length && (s.charCodeAt(t3) & 64512) === 56320);
            } else
              t3 = false;
            if (!t3)
              if (t2 === 56320) {
                t2 = i - 1;
                t2 = !(t2 >= 0 && (s.charCodeAt(t2) & 64512) === 55296);
              } else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              if (i > offset)
                t1._contents += B.JSString_methods.substring$2(s, offset, i);
              offset = i + 1;
              t2 = A.Primitives_stringFromCharCode(92);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(117);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(100);
              t1._contents += t2;
              t2 = charCode >>> 8 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode >>> 4 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = A.Primitives_stringFromCharCode(92);
          t1._contents += t2;
          switch (charCode) {
            case 8:
              t2 = A.Primitives_stringFromCharCode(98);
              t1._contents += t2;
              break;
            case 9:
              t2 = A.Primitives_stringFromCharCode(116);
              t1._contents += t2;
              break;
            case 10:
              t2 = A.Primitives_stringFromCharCode(110);
              t1._contents += t2;
              break;
            case 12:
              t2 = A.Primitives_stringFromCharCode(102);
              t1._contents += t2;
              break;
            case 13:
              t2 = A.Primitives_stringFromCharCode(114);
              t1._contents += t2;
              break;
            default:
              t2 = A.Primitives_stringFromCharCode(117);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(48);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(48);
              t1._contents += t2;
              t2 = charCode >>> 4 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = A.Primitives_stringFromCharCode(92);
          t1._contents += t2;
          t2 = A.Primitives_stringFromCharCode(charCode);
          t1._contents += t2;
        }
      }
      if (offset === 0)
        t1._contents += s;
      else if (offset < $length)
        t1._contents += B.JSString_methods.substring$2(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, t2, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        t1 = _this._sink;
        t2 = B.JSNumber_methods.toString$0(object);
        t1._contents += t2;
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object == "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1(map) {
      var t2, keyValueList, i, separator, t3, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t2 = t1.get$length(map) * 2;
      keyValueList = A.List_List$filled(t2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{";
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        t1._contents += separator;
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        t1._contents += '":';
        t3 = i + 1;
        if (!(t3 < t2))
          return A.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t1._contents += "}";
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 9
  };
  A._JsonPrettyPrintMixin.prototype = {
    writeList$1(list) {
      var i, _this = this,
        t1 = J.getInterceptor$asx(list),
        t2 = t1.get$isEmpty(list),
        t3 = _this._sink,
        t4 = t3._contents;
      if (t2)
        t3._contents = t4 + "[]";
      else {
        t3._contents = t4 + "[\n";
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          t3._contents += ",\n";
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
        }
        t3._contents += "\n";
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        t3._contents += "]";
      }
    },
    writeMap$1(map) {
      var t2, keyValueList, i, separator, t3, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t2 = t1.get$length(map) * 2;
      keyValueList = A.List_List$filled(t2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new A._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{\n";
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < t2; i += 2, separator = ",\n") {
        t1._contents += separator;
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        t1._contents += '"';
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        t1._contents += '": ';
        t3 = i + 1;
        if (!(t3 < t2))
          return A.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t1._contents += "\n";
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      t1._contents += "}";
      return true;
    }
  };
  A._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 9
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._JsonStringStringifierPretty.prototype = {
    writeIndentation$1(count) {
      var t1, t2, i;
      for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
        t2._contents += t1;
    }
  };
  A.Utf8Codec.prototype = {
    decode$1(_, codeUnits) {
      type$.List_int._as(codeUnits);
      return B.Utf8Decoder_false.convert$1(codeUnits);
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var t1, encoder, t2,
        stringLength = string.length,
        end = A.RangeError_checkValidRange(0, null, stringLength);
      if (end === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array(end * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < stringLength))
          return A.ioore(string, t2);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var t4, _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, t4, stringIndex, codeUnit, t5, t6, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._buffer, t2 = t1.$flags | 0, t3 = t1.length, t4 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t4))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t5 = _this._bufferIndex;
          if (t5 >= t3)
            break;
          _this._bufferIndex = t5 + 1;
          t2 & 2 && A.throwUnsupportedOperation(t1);
          t1[t5] = codeUnit;
        } else {
          t5 = codeUnit & 64512;
          if (t5 === 55296) {
            if (_this._bufferIndex + 4 > t3)
              break;
            t5 = stringIndex + 1;
            if (!(t5 < t4))
              return A.ioore(str, t5);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t5)))
              stringIndex = t5;
          } else if (t5 === 56320) {
            if (_this._bufferIndex + 3 > t3)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t5 = _this._bufferIndex;
            t6 = t5 + 1;
            if (t6 >= t3)
              break;
            _this._bufferIndex = t6;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t6 + 1;
            t1[t6] = codeUnit & 63 | 128;
          } else {
            t5 = _this._bufferIndex;
            if (t5 + 2 >= t3)
              break;
            t6 = _this._bufferIndex = t5 + 1;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 12 | 224;
            t5 = _this._bufferIndex = t6 + 1;
            if (!(t6 < t3))
              return A.ioore(t1, t6);
            t1[t6] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t5 + 1;
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      return new A._Utf8Decoder(this._allowMalformed)._convertGeneral$4(type$.List_int._as(codeUnits), 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, codeUnits.length);
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!t1)
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              t3 = A.Primitives_stringFromCharCode(char);
              buffer._contents += t3;
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    break;
                  case 65:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    --i;
                    break;
                  default:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    t3 = buffer._contents += t3;
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                t3 = A.Primitives_stringFromCharCode(bytes[m]);
                buffer._contents += t3;
              }
            else {
              t3 = A.String_String$fromCharCodes(bytes, i, markEnd);
              buffer._contents += t3;
            }
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2) {
          t1 = A.Primitives_stringFromCharCode(_65533);
          buffer._contents += t1;
        } else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {};
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) >>> 0 !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.$flags | 0;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t1 = yUsed0 + 2;
      nyDigits = new Uint16Array(t1);
      if (!(yUsed0 >= 0 && yUsed0 < t1))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (t1 = resultDigits.length; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits._value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed._value = resultUsed1;
      $._BigIntImpl____lastRemUsed._value = yUsed0;
      $._BigIntImpl____lastRem_nsh._value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 54
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 19
  };
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t3 = A.Error_safeToString(value);
      t1._contents += t3;
      t2.comma = ", ";
    },
    $signature: 66
  };
  A.DateTime.prototype = {
    _addMicroseconds$1(durationMicroseconds) {
      var _1000 = 1000,
        durationLo = B.JSInt_methods.$mod(durationMicroseconds, _1000),
        durationHi = B.JSInt_methods._tdivFast$1(durationMicroseconds - durationLo, _1000),
        sumLo = this._microsecond + durationLo,
        microsecond = B.JSInt_methods.$mod(sumLo, _1000),
        t1 = this.isUtc;
      return new A.DateTime(A.DateTime__validate(this._core$_value + B.JSInt_methods._tdivFast$1(sumLo - microsecond, _1000) + durationHi, microsecond, t1), microsecond, t1);
    },
    difference$1(other) {
      return A.Duration$(this._microsecond - other._microsecond, this._core$_value - other._core$_value);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this._microsecond === other._microsecond && this.isUtc === other.isUtc;
    },
    get$hashCode(_) {
      return A.Object_hash(this._core$_value, this._microsecond, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    compareTo$1(_, other) {
      var r;
      type$.DateTime._as(other);
      r = B.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
      if (r !== 0)
        return r;
      return B.JSInt_methods.compareTo$1(this._microsecond, other._microsecond);
    },
    toUtc$0() {
      var _this = this;
      if (_this.isUtc)
        return _this;
      return new A.DateTime(_this._core$_value, _this._microsecond, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    },
    toIso8601String$0() {
      var _this = this,
        y = A.Primitives_getYear(_this) >= -9999 && A.Primitives_getYear(_this) <= 9999 ? A.DateTime__fourDigits(A.Primitives_getYear(_this)) : A.DateTime__sixDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us;
    },
    $isComparable: 1
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = A.Error_safeToString(argument);
        t2 = sb._contents += t2;
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._core$_memberName.__internal$_name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, prefix, postfix, end, start,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        prefix = "";
        if (lineEnd - lineStart > 78) {
          postfix = "...";
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
            }
            prefix = "...";
          }
        } else {
          end = lineEnd;
          start = lineStart;
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this, $T._eval$1("WhereTypeIterable<0>"));
    },
    forEach$1(_, action) {
      var t1;
      A._instanceType(this)._eval$1("~(Iterable.E)")._as(action);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current(t1));
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current(iterator));
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += J.toString$0$(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + J.toString$0$(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (A.boolConversionCheck(test.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current(it);
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current(iterator);
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(this, type$.Invocation._as(invocation)));
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return this._core$_stackTrace;
    },
    $isStackTrace: 1
  };
  A.Runes.prototype = {
    get$iterator(_) {
      return new A.RuneIterator(this.string);
    }
  };
  A.RuneIterator.prototype = {
    get$current(_) {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._core$_position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      if (!(t1 < t3))
        return A.ioore(t2, t1);
      codeUnit = t2.charCodeAt(t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        if (!(nextPosition < t3))
          return A.ioore(t2, nextPosition);
        nextCodeUnit = t2.charCodeAt(nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = A._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    write$1(_, obj) {
      var t1 = A.S(obj);
      this._contents += t1;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.HtmlElement.prototype = {};
  A.AccessibleNodeList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AnchorElement.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.AreaElement.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.Blob.prototype = {};
  A.CharacterData.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssPerspective.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssRule.prototype = {$isCssRule: 1};
  A.CssStyleDeclaration.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.CssStyleDeclarationBase.prototype = {};
  A.CssStyleValue.prototype = {};
  A.CssTransformComponent.prototype = {};
  A.CssTransformValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssUnparsedValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.DataTransferItemList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.DomException.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.DomRectList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Rectangle_num._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomRectReadOnly.prototype = {
    toString$0(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      return "Rectangle (" + A.S(t1) + ", " + A.S(t2) + ") " + A.S(this.get$width(receiver)) + " x " + A.S(this.get$height(receiver));
    },
    $eq(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = false;
      if (type$.Rectangle_num._is(other)) {
        t2 = receiver.left;
        t2.toString;
        t3 = other.left;
        t3.toString;
        if (t2 === t3) {
          t2 = receiver.top;
          t2.toString;
          t3 = other.top;
          t3.toString;
          if (t2 === t3) {
            t1 = J.getInterceptor$x(other);
            t1 = this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
          }
        }
      }
      return t1;
    },
    get$hashCode(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      return A.Object_hash(t1, t2, this.get$width(receiver), this.get$height(receiver), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = this.get$_height(receiver);
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = this.get$_width(receiver);
      t1.toString;
      return t1;
    },
    $isRectangle: 1
  };
  A.DomStringList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      A._asString(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomTokenList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.Element.prototype = {
    toString$0(receiver) {
      var t1 = receiver.localName;
      t1.toString;
      return t1;
    }
  };
  A.EventTarget.prototype = {};
  A.File.prototype = {$isFile: 1};
  A.FileList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.File._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.FileWriter.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.FormElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Gamepad.prototype = {$isGamepad: 1};
  A.History.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.HtmlCollection.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Location.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.MediaList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.MidiInputMap.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    $isMap: 1
  };
  A.MidiInputMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 3
  };
  A.MidiOutputMap.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    $isMap: 1
  };
  A.MidiOutputMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 3
  };
  A.MimeType.prototype = {$isMimeType: 1};
  A.MimeTypeArray.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.MimeType._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Node.prototype = {
    toString$0(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode: 1
  };
  A.NodeList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Plugin.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isPlugin: 1
  };
  A.PluginArray.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Plugin._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.RtcStatsReport.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    $isMap: 1
  };
  A.RtcStatsReport_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 3
  };
  A.SelectElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.SourceBuffer.prototype = {$isSourceBuffer: 1};
  A.SourceBufferList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.SourceBuffer._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  A.SpeechGrammarList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.SpeechGrammar._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechRecognitionResult.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isSpeechRecognitionResult: 1
  };
  A.Storage.prototype = {
    $index(receiver, key) {
      return receiver.getItem(A._asString(key));
    },
    forEach$1(receiver, f) {
      var i, key, t1;
      type$.void_Function_String_String._as(f);
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        t1 = receiver.getItem(key);
        t1.toString;
        f.call$2(key, t1);
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.Storage_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      return receiver.key(0) == null;
    },
    $isMap: 1
  };
  A.Storage_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 72
  };
  A.StyleSheet.prototype = {$isStyleSheet: 1};
  A.TextTrack.prototype = {$isTextTrack: 1};
  A.TextTrackCue.prototype = {$isTextTrackCue: 1};
  A.TextTrackCueList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.TextTrackCue._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TextTrackList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.TextTrack._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TimeRanges.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.Touch.prototype = {$isTouch: 1};
  A.TouchList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Touch._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TrackDefaultList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Url.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.VideoTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A._CssRuleList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.CssRule._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._DomRect.prototype = {
    toString$0(receiver) {
      var t2, t3, t4,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      t3 = receiver.width;
      t3.toString;
      t4 = receiver.height;
      t4.toString;
      return "Rectangle (" + A.S(t1) + ", " + A.S(t2) + ") " + A.S(t3) + " x " + A.S(t4);
    },
    $eq(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = false;
      if (type$.Rectangle_num._is(other)) {
        t2 = receiver.left;
        t2.toString;
        t3 = other.left;
        t3.toString;
        if (t2 === t3) {
          t2 = receiver.top;
          t2.toString;
          t3 = other.top;
          t3.toString;
          if (t2 === t3) {
            t2 = receiver.width;
            t2.toString;
            t3 = J.getInterceptor$x(other);
            if (t2 === t3.get$width(other)) {
              t1 = receiver.height;
              t1.toString;
              t3 = t1 === t3.get$height(other);
              t1 = t3;
            }
          }
        }
      }
      return t1;
    },
    get$hashCode(receiver) {
      var t2, t3, t4,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      t3 = receiver.width;
      t3.toString;
      t4 = receiver.height;
      t4.toString;
      return A.Object_hash(t1, t2, t3, t4, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = receiver.height;
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = receiver.width;
      t1.toString;
      return t1;
    }
  };
  A._GamepadList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.nullable_Gamepad._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._NamedNodeMap.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._SpeechRecognitionResultList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.SpeechRecognitionResult._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._StyleSheetList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.StyleSheet._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.ImmutableListMixin.prototype = {
    get$iterator(receiver) {
      return new A.FixedSizeListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    }
  };
  A.FixedSizeListIterator.prototype = {
    moveNext$0() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._length;
      if (nextPosition < t1) {
        _this.set$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_current(null);
      _this._position = t1;
      return false;
    },
    get$current(_) {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase.prototype = {};
  A._DomRectList_JavaScriptObject_ListMixin.prototype = {};
  A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._DomStringList_JavaScriptObject_ListMixin.prototype = {};
  A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._FileList_JavaScriptObject_ListMixin.prototype = {};
  A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._MidiInputMap_JavaScriptObject_MapMixin.prototype = {};
  A._MidiOutputMap_JavaScriptObject_MapMixin.prototype = {};
  A._MimeTypeArray_JavaScriptObject_ListMixin.prototype = {};
  A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._PluginArray_JavaScriptObject_ListMixin.prototype = {};
  A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._RtcStatsReport_JavaScriptObject_MapMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._SpeechGrammarList_JavaScriptObject_ListMixin.prototype = {};
  A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._Storage_JavaScriptObject_MapMixin.prototype = {};
  A._TextTrackCueList_JavaScriptObject_ListMixin.prototype = {};
  A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._TouchList_JavaScriptObject_ListMixin.prototype = {};
  A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__CssRuleList_JavaScriptObject_ListMixin.prototype = {};
  A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__GamepadList_JavaScriptObject_ListMixin.prototype = {};
  A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin.prototype = {};
  A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__StyleSheetList_JavaScriptObject_ListMixin.prototype = {};
  A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.jsify__convert.prototype = {
    call$1(o) {
      var t1, convertedMap, t2, key, convertedList;
      if (A._noJsifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      if (type$.Map_of_nullable_Object_and_nullable_Object._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.getInterceptor$x(o), t2 = J.get$iterator$ax(t1.get$keys(o)); t2.moveNext$0();) {
          key = t2.get$current(t2);
          convertedMap[key] = this.call$1(t1.$index(o, key));
        }
        return convertedMap;
      } else if (type$.Iterable_nullable_Object._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 7
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(0, this.T._eval$1("0/?")._as(r));
    },
    $signature: 4
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 4
  };
  A.dartify_convert.prototype = {
    call$1(o) {
      var t1, millisSinceEpoch, proto, t2, dartObject, originalKeys, dartKeys, i, jsKey, dartKey, l, $length;
      if (A._noDartifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      o.toString;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      if (o instanceof Date) {
        millisSinceEpoch = o.getTime();
        if (millisSinceEpoch < -864e13 || millisSinceEpoch > 864e13)
          A.throwExpression(A.RangeError$range(millisSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
        A.checkNotNullable(true, "isUtc", type$.bool);
        return new A.DateTime(millisSinceEpoch, 0, true);
      }
      if (o instanceof RegExp)
        throw A.wrapException(A.ArgumentError$("structured clone of RegExp", null));
      if (typeof Promise != "undefined" && o instanceof Promise)
        return A.promiseToFuture(o, type$.nullable_Object);
      proto = Object.getPrototypeOf(o);
      if (proto === Object.prototype || proto === null) {
        t2 = type$.nullable_Object;
        dartObject = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        t1.$indexSet(0, o, dartObject);
        originalKeys = Object.keys(o);
        dartKeys = [];
        for (t1 = J.getInterceptor$ax(originalKeys), t2 = t1.get$iterator(originalKeys); t2.moveNext$0();)
          dartKeys.push(A.dartify(t2.get$current(t2)));
        for (i = 0; i < t1.get$length(originalKeys); ++i) {
          jsKey = t1.$index(originalKeys, i);
          if (!(i < dartKeys.length))
            return A.ioore(dartKeys, i);
          dartKey = dartKeys[i];
          if (jsKey != null)
            dartObject.$indexSet(0, dartKey, this.call$1(o[jsKey]));
        }
        return dartObject;
      }
      if (o instanceof Array) {
        l = o;
        dartObject = [];
        t1.$indexSet(0, o, dartObject);
        $length = A._asInt(o.length);
        for (t1 = J.getInterceptor$asx(l), i = 0; i < $length; ++i)
          dartObject.push(this.call$1(t1.$index(l, i)));
        return dartObject;
      }
      return o;
    },
    $signature: 7
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    }
  };
  A.Length.prototype = {$isLength: 1};
  A.LengthList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Length._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Number.prototype = {$isNumber: 1};
  A.NumberList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Number._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.PointList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.StringList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      A._asString(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Transform.prototype = {$isTransform: 1};
  A.TransformList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Transform._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._LengthList_JavaScriptObject_ListMixin.prototype = {};
  A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._NumberList_JavaScriptObject_ListMixin.prototype = {};
  A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._StringList_JavaScriptObject_ListMixin.prototype = {};
  A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._TransformList_JavaScriptObject_ListMixin.prototype = {};
  A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.Endian.prototype = {};
  A.AudioBuffer.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AudioParamMap.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    $isMap: 1
  };
  A.AudioParamMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 3
  };
  A.AudioTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.BaseAudioContext.prototype = {};
  A.OfflineAudioContext.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A._AudioParamMap_JavaScriptObject_MapMixin.prototype = {};
  A.Archive.prototype = {
    addFile$1(_, file) {
      var t2,
        t1 = this._fileMap,
        index = t1.$index(0, file.name);
      if (index != null) {
        B.JSArray_methods.$indexSet(this._files, index, file);
        return;
      }
      t2 = this._files;
      B.JSArray_methods.add$1(t2, file);
      t1.$indexSet(0, file.name, t2.length - 1);
    },
    get$length(_) {
      return this._files.length;
    },
    findFile$1($name) {
      var t1,
        index = this._fileMap.$index(0, $name);
      if (index != null) {
        t1 = this._files;
        if (index >>> 0 !== index || index >= t1.length)
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = null;
      return t1;
    },
    get$isEmpty(_) {
      return this._files.length === 0;
    },
    get$isNotEmpty(_) {
      return this._files.length !== 0;
    },
    get$iterator(_) {
      var t1 = this._files;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    }
  };
  A.ArchiveFile.prototype = {
    ArchiveFile$4($name, size, $content, _compressionType) {
      var t2, _this = this,
        t1 = _this.name;
      _this.name = A.stringReplaceAllUnchecked(t1, "\\", "/");
      t1 = type$.Uint8List;
      if (t1._is($content)) {
        _this._content = $content;
        _this._rawContent = A.InputStream$($content, 0, null, 0);
        if (_this.size <= 0)
          _this.size = $content.length;
      } else if (type$.TypedData._is($content)) {
        t2 = J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer($content), 0, null);
        _this._content = t2;
        _this._rawContent = A.InputStream$(t2, 0, null, 0);
        if (_this.size <= 0)
          _this.size = t1._as(_this._content).length;
      } else if (type$.List_int._is($content)) {
        _this._content = $content;
        _this._rawContent = A.InputStream$($content, 0, null, 0);
        if (_this.size <= 0)
          _this.size = $content.length;
      } else if ($content instanceof A.ZipFile) {
        t1 = $content.__ZipFile__rawContent_A;
        t1 === $ && A.throwLateFieldNI("_rawContent");
        _this._rawContent = t1;
        _this._content = $content;
      }
    },
    get$content(_) {
      var _this = this,
        t1 = _this._content;
      if ((t1 instanceof A.ZipFile ? _this._content = t1.get$content(0) : t1) == null)
        _this.decompress$0();
      return _this._content;
    },
    decompress$0() {
      var t1, _this = this;
      if (_this._content == null && _this._rawContent != null) {
        if (_this._compressionType === 8) {
          t1 = A.Inflate$(_this._rawContent.toUint8List$0()).output;
          _this._content = type$.List_int._as(J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(t1._output_stream$_buffer), 0, t1.length));
        } else
          _this._content = _this._rawContent.toUint8List$0();
        _this._compressionType = 0;
      }
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.Bz2BitReader.prototype = {
    readBits$1(numBits) {
      var t1, t2, t3, value, t4, t5, t6, _this = this;
      if (numBits === 0)
        return 0;
      if (_this._bitPos === 0) {
        _this._bitPos = 8;
        _this._bz2_bit_reader$_bitBuffer = _this.input.readByte$0();
      }
      for (t1 = _this.input, t2 = t1.buffer, t3 = J.getInterceptor$asx(t2), value = 0; t4 = _this._bitPos, numBits > t4;) {
        t5 = B.JSInt_methods.$shl(value, t4);
        t6 = _this._bz2_bit_reader$_bitBuffer;
        if (!(t4 >= 0 && t4 < 9))
          return A.ioore(B.List_Sry, t4);
        value = t5 + (t6 & B.List_Sry[t4]);
        numBits -= t4;
        _this._bitPos = 8;
        _this._bz2_bit_reader$_bitBuffer = t3.$index(t2, t1.offset++);
      }
      if (numBits > 0) {
        if (t4 === 0) {
          _this._bitPos = 8;
          _this._bz2_bit_reader$_bitBuffer = t1.readByte$0();
        }
        t1 = B.JSInt_methods.$shl(value, numBits);
        t2 = _this._bz2_bit_reader$_bitBuffer;
        t3 = _this._bitPos - numBits;
        t2 = B.JSInt_methods.$shr(t2, t3);
        if (!(numBits < 9))
          return A.ioore(B.List_Sry, numBits);
        value = t1 + (t2 & B.List_Sry[numBits]);
        _this._bitPos = t3;
      }
      return value;
    }
  };
  A.BZip2Decoder.prototype = {
    decodeStream$2(input, output) {
      var t1, combinedCrc, type, blockCrc, _this = this,
        br = new A.Bz2BitReader(input);
      _this._gMinlen = _this._gSel = _this._groupNo = _this._groupPos = 0;
      if (br.readBits$1(8) !== 66 || br.readBits$1(8) !== 90 || br.readBits$1(8) !== 104)
        throw A.wrapException(A.ArchiveException$("Invalid Signature"));
      t1 = _this.__BZip2Decoder__blockSize100k_A = br.readBits$1(8) - 48;
      if (t1 < 0 || t1 > 9)
        throw A.wrapException(A.ArchiveException$("Invalid BlockSize"));
      _this.__BZip2Decoder__tt_A = new Uint32Array(t1 * 100000);
      for (combinedCrc = 0; true;) {
        type = _this._readBlockType$1(br);
        if (type === 0) {
          br.readBits$1(8);
          br.readBits$1(8);
          br.readBits$1(8);
          br.readBits$1(8);
          blockCrc = _this._readCompressed$2(br, output);
          combinedCrc = (combinedCrc << 1 | combinedCrc >>> 31) ^ blockCrc ^ 4294967295;
        } else if (type === 2) {
          br.readBits$1(8);
          br.readBits$1(8);
          br.readBits$1(8);
          br.readBits$1(8);
          return;
        }
      }
    },
    _readBlockType$1(br) {
      var eos, compressed, i, b;
      for (eos = true, compressed = true, i = 0; i < 6; ++i) {
        b = br.readBits$1(8);
        if (b !== B.List_SMJ[i])
          compressed = false;
        if (b !== B.List_SMJ0[i])
          eos = false;
        if (!eos && !compressed)
          throw A.wrapException(A.ArchiveException$("Invalid Block Signature"));
      }
      return compressed ? 0 : 2;
    },
    _readCompressed$2(br, output) {
      var i, t1, t2, k, j, t3, alphaSize, numGroups, pos, t4, v, tmp, v0, t, c, minLen, maxLen, minLen0, eob, nblockMAX, kk, ii, jj, nextSym, nblock, es, $N, uc, nn, pp, z, lno, off, pp0, t5, tPos, tPos0, k0, rNToGo, rTPos, sSaveNBlockPP, blockCrc, cStateOutLen, cStateOutCh, cNBlockUsed, k1, k00, cK0, cK00, _this = this,
        _s10_ = "Data error",
        _s4_ = "_len",
        _s11_ = "_seqToUnseq",
        _s3_ = "_tt", _4294967295 = 4294967295,
        _s10_0 = "Data Error",
        blockRandomized = br.readBits$1(1),
        origPtr = ((br.readBits$1(8) << 8 | br.readBits$1(8)) << 8 | br.readBits$1(8)) >>> 0;
      _this.__BZip2Decoder__inUse16_A = new Uint8Array(16);
      for (i = 0; i < 16; ++i) {
        t1 = _this.__BZip2Decoder__inUse16_A;
        t2 = br.readBits$1(1);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[i] = t2;
      }
      _this.__BZip2Decoder__inUse_A = new Uint8Array(256);
      for (i = 0, k = 0; i < 16; ++i, k += 16)
        if (_this.__BZip2Decoder__inUse16_A[i] !== 0)
          for (j = 0; j < 16; ++j) {
            t1 = _this.__BZip2Decoder__inUse_A;
            t2 = k + j;
            t3 = br.readBits$1(1);
            t1.$flags & 2 && A.throwUnsupportedOperation(t1);
            if (!(t2 < 256))
              return A.ioore(t1, t2);
            t1[t2] = t3;
          }
      _this._makeMaps$0();
      t1 = _this._numInUse;
      if (t1 === 0)
        throw A.wrapException(A.ArchiveException$(_s10_));
      alphaSize = t1 + 2;
      numGroups = br.readBits$1(3);
      if (numGroups < 2 || numGroups > 6)
        throw A.wrapException(A.ArchiveException$(_s10_));
      t1 = br.readBits$1(15);
      _this.__BZip2Decoder__numSelectors_A = t1;
      if (t1 < 1)
        throw A.wrapException(A.ArchiveException$(_s10_));
      _this.__BZip2Decoder__selectorMtf_A = new Uint8Array(18002);
      _this.__BZip2Decoder__selector_A = new Uint8Array(18002);
      for (i = 0; t1 = _this.__BZip2Decoder__numSelectors_A, i < t1; ++i) {
        for (j = 0; true;) {
          if (br.readBits$1(1) === 0)
            break;
          ++j;
          if (j >= numGroups)
            throw A.wrapException(A.ArchiveException$(_s10_));
        }
        t1 = _this.__BZip2Decoder__selectorMtf_A;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(i < 18002))
          return A.ioore(t1, i);
        t1[i] = j;
      }
      pos = new Uint8Array(6);
      for (i = 0; i < numGroups; ++i) {
        if (!(i < 6))
          return A.ioore(pos, i);
        pos[i] = i;
      }
      for (t2 = _this.__BZip2Decoder__selector_A, t3 = _this.__BZip2Decoder__selectorMtf_A, t4 = t2.$flags | 0, i = 0; i < t1; ++i) {
        if (!(i < 18002))
          return A.ioore(t3, i);
        v = t3[i];
        if (!(v < 6))
          return A.ioore(pos, v);
        tmp = pos[v];
        for (; v > 0; v = v0) {
          v0 = v - 1;
          pos[v] = pos[v0];
        }
        pos[0] = tmp;
        t4 & 2 && A.throwUnsupportedOperation(t2);
        t2[i] = tmp;
      }
      _this.set$__BZip2Decoder__len_A(type$.List_Uint8List._as(A.List_List$filled(6, $.$get$BZip2_emptyUint8List(), false, type$.Uint8List)));
      for (t = 0; t < numGroups; ++t) {
        t1 = _this.__BZip2Decoder__len_A;
        t1 === $ && A.throwLateFieldNI(_s4_);
        B.JSArray_methods.$indexSet(t1, t, new Uint8Array(258));
        c = br.readBits$1(5);
        for (i = 0; i < alphaSize; ++i) {
          for (; true;) {
            if (c < 1 || c > 20)
              throw A.wrapException(A.ArchiveException$(_s10_));
            if (br.readBits$1(1) === 0)
              break;
            c = br.readBits$1(1) === 0 ? c + 1 : c - 1;
          }
          t1 = _this.__BZip2Decoder__len_A;
          if (!(t < 6))
            return A.ioore(t1, t);
          t1 = t1[t];
          t1.$flags & 2 && A.throwUnsupportedOperation(t1);
          if (!(i < t1.length))
            return A.ioore(t1, i);
          t1[i] = c;
        }
      }
      t1 = $.$get$BZip2_emptyInt32List();
      t2 = type$.Int32List;
      t3 = type$.List_Int32List;
      _this.set$__BZip2Decoder__limit_A(t3._as(A.List_List$filled(6, t1, false, t2)));
      _this.set$__BZip2Decoder__base_A(t3._as(A.List_List$filled(6, t1, false, t2)));
      _this.set$__BZip2Decoder__perm_A(t3._as(A.List_List$filled(6, t1, false, t2)));
      _this.__BZip2Decoder__minLens_A = new Int32Array(6);
      for (t = 0; t < numGroups; ++t) {
        t1 = _this.__BZip2Decoder__limit_A;
        t1 === $ && A.throwLateFieldNI("_limit");
        B.JSArray_methods.$indexSet(t1, t, new Int32Array(258));
        t1 = _this.__BZip2Decoder__base_A;
        t1 === $ && A.throwLateFieldNI("_base");
        B.JSArray_methods.$indexSet(t1, t, new Int32Array(258));
        t1 = _this.__BZip2Decoder__perm_A;
        t1 === $ && A.throwLateFieldNI("_perm");
        B.JSArray_methods.$indexSet(t1, t, new Int32Array(258));
        for (t1 = _this.__BZip2Decoder__len_A, minLen = 32, maxLen = 0, i = 0; i < alphaSize; ++i) {
          t1 === $ && A.throwLateFieldNI(_s4_);
          if (!(t < 6))
            return A.ioore(t1, t);
          t2 = t1[t];
          if (!(i < t2.length))
            return A.ioore(t2, i);
          minLen0 = t2[i];
          if (minLen0 > maxLen)
            maxLen = minLen0;
          if (minLen0 < minLen)
            minLen = minLen0;
        }
        t2 = _this.__BZip2Decoder__limit_A;
        if (!(t < 6))
          return A.ioore(t2, t);
        t2 = t2[t];
        t3 = _this.__BZip2Decoder__base_A[t];
        t4 = _this.__BZip2Decoder__perm_A[t];
        t1 === $ && A.throwLateFieldNI(_s4_);
        _this._hbCreateDecodeTables$7(t2, t3, t4, t1[t], minLen, maxLen, alphaSize);
        t1 = _this.__BZip2Decoder__minLens_A;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[t] = minLen;
      }
      eob = _this._numInUse + 1;
      t1 = _this.__BZip2Decoder__blockSize100k_A;
      t1 === $ && A.throwLateFieldNI("_blockSize100k");
      nblockMAX = 100000 * t1;
      _this.__BZip2Decoder__unzftab_A = new Int32Array(256);
      t1 = _this.__BZip2Decoder__mtfa_A = new Uint8Array(4096);
      t2 = new Int32Array(16);
      _this.__BZip2Decoder__mtfbase_A = t2;
      for (kk = 4095, ii = 15; ii >= 0; --ii) {
        for (t3 = ii * 16, jj = 15; jj >= 0; --jj) {
          if (!(kk >= 0 && kk < 4096))
            return A.ioore(t1, kk);
          t1[kk] = t3 + jj;
          --kk;
        }
        t2[ii] = kk + 1;
      }
      _this._groupPos = 0;
      _this._groupNo = -1;
      nextSym = _this._getMtfVal$1(br);
      for (nblock = 0; true;) {
        if (nextSym === eob)
          break;
        if (nextSym === 0 || nextSym === 1) {
          es = -1;
          $N = 1;
          do {
            if ($N >= 2097152)
              throw A.wrapException(A.ArchiveException$(_s10_));
            if (nextSym === 0)
              es += $N;
            else if (nextSym === 1)
              es += 2 * $N;
            $N *= 2;
            nextSym = _this._getMtfVal$1(br);
          } while (nextSym === 0 || nextSym === 1);
          ++es;
          t1 = _this.__BZip2Decoder__seqToUnseq_A;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t2 = _this.__BZip2Decoder__mtfa_A;
          t3 = _this.__BZip2Decoder__mtfbase_A[0];
          if (!(t3 >= 0 && t3 < 4096))
            return A.ioore(t2, t3);
          t3 = t2[t3];
          if (!(t3 >= 0 && t3 < 256))
            return A.ioore(t1, t3);
          uc = t1[t3];
          t3 = _this.__BZip2Decoder__unzftab_A;
          if (!(uc < 256))
            return A.ioore(t3, uc);
          t1 = t3[uc];
          t3.$flags & 2 && A.throwUnsupportedOperation(t3);
          t3[uc] = t1 + es;
          for (t1 = _this.__BZip2Decoder__tt_A; es > 0;) {
            if (nblock >= nblockMAX)
              throw A.wrapException(A.ArchiveException$(_s10_));
            t1 === $ && A.throwLateFieldNI(_s3_);
            t1.$flags & 2 && A.throwUnsupportedOperation(t1);
            if (!(nblock >= 0 && nblock < t1.length))
              return A.ioore(t1, nblock);
            t1[nblock] = uc;
            ++nblock;
            --es;
          }
          continue;
        } else {
          if (nblock >= nblockMAX)
            throw A.wrapException(A.ArchiveException$(_s10_));
          nn = nextSym - 1;
          t1 = _this.__BZip2Decoder__mtfbase_A;
          t2 = _this.__BZip2Decoder__mtfa_A;
          if (nn < 16) {
            pp = t1[0];
            t1 = pp + nn;
            if (!(t1 >= 0 && t1 < 4096))
              return A.ioore(t2, t1);
            uc = t2[t1];
            for (t1 = t2.$flags | 0; nn > 3;) {
              z = pp + nn;
              t3 = z - 1;
              if (!(t3 >= 0 && t3 < 4096))
                return A.ioore(t2, t3);
              t4 = t2[t3];
              t1 & 2 && A.throwUnsupportedOperation(t2);
              if (!(z >= 0 && z < 4096))
                return A.ioore(t2, z);
              t2[z] = t4;
              t4 = z - 2;
              if (!(t4 >= 0))
                return A.ioore(t2, t4);
              t2[t3] = t2[t4];
              t3 = z - 3;
              if (!(t3 >= 0))
                return A.ioore(t2, t3);
              t2[t4] = t2[t3];
              t4 = z - 4;
              if (!(t4 >= 0))
                return A.ioore(t2, t4);
              t2[t3] = t2[t4];
              nn -= 4;
            }
            for (; nn > 0;) {
              t3 = pp + nn;
              t4 = t3 - 1;
              if (!(t4 >= 0 && t4 < 4096))
                return A.ioore(t2, t4);
              t4 = t2[t4];
              t1 & 2 && A.throwUnsupportedOperation(t2);
              if (!(t3 >= 0 && t3 < 4096))
                return A.ioore(t2, t3);
              t2[t3] = t4;
              --nn;
            }
            t1 & 2 && A.throwUnsupportedOperation(t2);
            if (!(pp >= 0 && pp < 4096))
              return A.ioore(t2, pp);
            t2[pp] = uc;
          } else {
            lno = B.JSInt_methods._tdivFast$1(nn, 16);
            off = B.JSInt_methods.$mod(nn, 16);
            if (!(lno >= 0 && lno < 16))
              return A.ioore(t1, lno);
            pp = t1[lno] + off;
            if (!(pp >= 0 && pp < 4096))
              return A.ioore(t2, pp);
            uc = t2[pp];
            for (t3 = t2.$flags | 0; t4 = t1[lno], pp > t4; pp = pp0) {
              pp0 = pp - 1;
              if (!(pp0 >= 0))
                return A.ioore(t2, pp0);
              t4 = t2[pp0];
              t3 & 2 && A.throwUnsupportedOperation(t2);
              if (!(pp >= 0))
                return A.ioore(t2, pp);
              t2[pp] = t4;
            }
            t1.$flags & 2 && A.throwUnsupportedOperation(t1);
            t1[lno] = t4 + 1;
            for (; lno > 0;) {
              t1[lno] = t1[lno] - 1;
              t4 = t1[lno];
              --lno;
              t5 = t1[lno] + 16 - 1;
              if (!(t5 >= 0 && t5 < 4096))
                return A.ioore(t2, t5);
              t5 = t2[t5];
              t3 & 2 && A.throwUnsupportedOperation(t2);
              if (!(t4 >= 0 && t4 < 4096))
                return A.ioore(t2, t4);
              t2[t4] = t5;
            }
            t1[0] = t1[0] - 1;
            t4 = t1[0];
            t3 & 2 && A.throwUnsupportedOperation(t2);
            if (!(t4 >= 0 && t4 < 4096))
              return A.ioore(t2, t4);
            t2[t4] = uc;
            if (t1[0] === 0)
              for (kk = 4095, ii = 15; ii >= 0; --ii) {
                for (jj = 15; jj >= 0; --jj) {
                  t3 = t1[ii] + jj;
                  if (!(t3 >= 0 && t3 < 4096))
                    return A.ioore(t2, t3);
                  t3 = t2[t3];
                  if (!(kk >= 0 && kk < 4096))
                    return A.ioore(t2, kk);
                  t2[kk] = t3;
                  --kk;
                }
                t1[ii] = kk + 1;
              }
          }
          t1 = _this.__BZip2Decoder__unzftab_A;
          t2 = _this.__BZip2Decoder__seqToUnseq_A;
          t2 === $ && A.throwLateFieldNI(_s11_);
          if (!(uc >= 0 && uc < 256))
            return A.ioore(t2, uc);
          t3 = t2[uc];
          if (!(t3 < 256))
            return A.ioore(t1, t3);
          t4 = t1[t3];
          t1.$flags & 2 && A.throwUnsupportedOperation(t1);
          t1[t3] = t4 + 1;
          t4 = _this.__BZip2Decoder__tt_A;
          t4 === $ && A.throwLateFieldNI(_s3_);
          t2 = t2[uc];
          t4.$flags & 2 && A.throwUnsupportedOperation(t4);
          if (!(nblock >= 0 && nblock < t4.length))
            return A.ioore(t4, nblock);
          t4[nblock] = t2;
          ++nblock;
          nextSym = _this._getMtfVal$1(br);
          continue;
        }
      }
      if (origPtr >= nblock)
        throw A.wrapException(A.ArchiveException$(_s10_));
      for (t1 = _this.__BZip2Decoder__unzftab_A, i = 0; i <= 255; ++i) {
        t2 = t1[i];
        if (t2 < 0 || t2 > nblock)
          throw A.wrapException(A.ArchiveException$(_s10_));
      }
      t1 = _this.__BZip2Decoder__cftab_A = new Int32Array(257);
      t1[0] = 0;
      for (t2 = _this.__BZip2Decoder__unzftab_A, i = 1; i <= 256; ++i)
        t1[i] = t2[i - 1];
      for (i = 1; i <= 256; ++i)
        t1[i] = t1[i] + t1[i - 1];
      for (i = 0; i <= 256; ++i) {
        t2 = t1[i];
        if (t2 < 0 || t2 > nblock)
          throw A.wrapException(A.ArchiveException$(_s10_));
      }
      for (i = 1; i <= 256; ++i)
        if (t1[i - 1] > t1[i])
          throw A.wrapException(A.ArchiveException$(_s10_));
      for (t2 = _this.__BZip2Decoder__tt_A, i = 0; i < nblock; ++i) {
        t2 === $ && A.throwLateFieldNI(_s3_);
        t3 = t2.length;
        if (!(i < t3))
          return A.ioore(t2, i);
        uc = t2[i] & 255;
        t4 = t1[uc];
        if (!(t4 >= 0 && t4 < t3))
          return A.ioore(t2, t4);
        t3 = t2[t4];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        t2[t4] = (t3 | i << 8) >>> 0;
        t1[uc] = t1[uc] + 1;
      }
      t2 === $ && A.throwLateFieldNI(_s3_);
      t1 = t2.length;
      if (!(origPtr < t1))
        return A.ioore(t2, origPtr);
      tPos = t2[origPtr] >>> 8;
      t3 = blockRandomized !== 0;
      if (t3) {
        if (tPos >= 100000 * _this.__BZip2Decoder__blockSize100k_A)
          throw A.wrapException(A.ArchiveException$(_s10_));
        if (!(tPos < t1))
          return A.ioore(t2, tPos);
        tPos = t2[tPos];
        tPos0 = tPos >>> 8;
        k0 = tPos & 255 ^ 0;
        tPos = tPos0;
        rNToGo = 618;
        rTPos = 1;
      } else {
        if (tPos >= 100000 * _this.__BZip2Decoder__blockSize100k_A)
          return _4294967295;
        if (!(tPos < t1))
          return A.ioore(t2, tPos);
        tPos = t2[tPos];
        k0 = tPos & 255;
        tPos = tPos >>> 8;
        rNToGo = 0;
        rTPos = 0;
      }
      sSaveNBlockPP = nblock + 1;
      blockCrc = _4294967295;
      if (t3)
        for (cStateOutLen = 0, cStateOutCh = 0, cNBlockUsed = 1; true; cStateOutCh = k0, k0 = k00) {
          for (t1 = cStateOutCh & 255; true;) {
            if (cStateOutLen === 0)
              break;
            output.writeByte$1(cStateOutCh);
            t2 = blockCrc >>> 24 & 255 ^ t1;
            if (!(t2 < 256))
              return A.ioore(B.List_GZ8, t2);
            blockCrc = (blockCrc << 8 ^ B.List_GZ8[t2]) >>> 0;
            --cStateOutLen;
          }
          if (cNBlockUsed === sSaveNBlockPP)
            return blockCrc;
          if (cNBlockUsed > sSaveNBlockPP)
            throw A.wrapException(A.ArchiveException$("Data error."));
          t1 = _this.__BZip2Decoder__tt_A;
          t2 = t1.length;
          if (!(tPos >= 0 && tPos < t2))
            return A.ioore(t1, tPos);
          tPos = t1[tPos];
          tPos0 = tPos >>> 8;
          if (rNToGo === 0) {
            if (!(rTPos < 512))
              return A.ioore(B.List_Cxl, rTPos);
            rNToGo = B.List_Cxl[rTPos];
            ++rTPos;
            if (rTPos === 512)
              rTPos = 0;
          }
          --rNToGo;
          t3 = rNToGo === 1 ? 1 : 0;
          k1 = tPos & 255 ^ t3;
          ++cNBlockUsed;
          cStateOutLen = 1;
          if (cNBlockUsed === sSaveNBlockPP) {
            k00 = k0;
            tPos = tPos0;
            continue;
          }
          if (k1 !== k0) {
            k00 = k1;
            tPos = tPos0;
            continue;
          }
          if (!(tPos0 < t2))
            return A.ioore(t1, tPos0);
          tPos = t1[tPos0];
          tPos0 = tPos >>> 8;
          if (rNToGo === 0) {
            if (!(rTPos < 512))
              return A.ioore(B.List_Cxl, rTPos);
            rNToGo = B.List_Cxl[rTPos];
            ++rTPos;
            if (rTPos === 512)
              rTPos = 0;
          }
          t3 = rNToGo === 1 ? 1 : 0;
          k1 = tPos & 255 ^ t3;
          ++cNBlockUsed;
          if (cNBlockUsed === sSaveNBlockPP) {
            k00 = k0;
            tPos = tPos0;
            cStateOutLen = 2;
            continue;
          }
          if (k1 !== k0) {
            k00 = k1;
            tPos = tPos0;
            cStateOutLen = 2;
            continue;
          }
          if (!(tPos0 < t2))
            return A.ioore(t1, tPos0);
          tPos = t1[tPos0];
          tPos0 = tPos >>> 8;
          if (rNToGo === 0) {
            if (!(rTPos < 512))
              return A.ioore(B.List_Cxl, rTPos);
            rNToGo = B.List_Cxl[rTPos];
            ++rTPos;
            if (rTPos === 512)
              rTPos = 0;
          }
          t3 = rNToGo === 1 ? 1 : 0;
          k1 = tPos & 255 ^ t3;
          ++cNBlockUsed;
          if (cNBlockUsed === sSaveNBlockPP) {
            k00 = k0;
            tPos = tPos0;
            cStateOutLen = 3;
            continue;
          }
          if (k1 !== k0) {
            k00 = k1;
            tPos = tPos0;
            cStateOutLen = 3;
            continue;
          }
          if (!(tPos0 < t2))
            return A.ioore(t1, tPos0);
          tPos = t1[tPos0];
          tPos0 = tPos >>> 8;
          if (rNToGo === 0) {
            if (!(rTPos < 512))
              return A.ioore(B.List_Cxl, rTPos);
            rNToGo = B.List_Cxl[rTPos];
            ++rTPos;
            if (rTPos === 512)
              rTPos = 0;
          }
          t3 = rNToGo === 1 ? 1 : 0;
          cStateOutLen = (tPos & 255 ^ t3) + 4;
          if (!(tPos0 < t2))
            return A.ioore(t1, tPos0);
          tPos = t1[tPos0];
          tPos0 = tPos >>> 8;
          if (rNToGo === 0) {
            if (!(rTPos < 512))
              return A.ioore(B.List_Cxl, rTPos);
            rNToGo = B.List_Cxl[rTPos];
            ++rTPos;
            if (rTPos === 512)
              rTPos = 0;
          }
          t1 = rNToGo === 1 ? 1 : 0;
          k00 = tPos & 255 ^ t1;
          cNBlockUsed = cNBlockUsed + 1 + 1;
          tPos = tPos0;
        }
      else
        for (cK0 = k0, cStateOutLen = 0, cStateOutCh = 0, cNBlockUsed = 1; true; cStateOutCh = cK0, cK0 = cK00) {
          if (cStateOutLen > 0) {
            for (t1 = cStateOutCh & 255; true;) {
              if (cStateOutLen === 1)
                break;
              output.writeByte$1(cStateOutCh);
              t2 = blockCrc >>> 24 & 255 ^ t1;
              if (!(t2 < 256))
                return A.ioore(B.List_GZ8, t2);
              blockCrc = blockCrc << 8 ^ B.List_GZ8[t2];
              --cStateOutLen;
            }
            output.writeByte$1(cStateOutCh);
            t1 = blockCrc >>> 24 & 255 ^ t1;
            if (!(t1 < 256))
              return A.ioore(B.List_GZ8, t1);
            blockCrc = (blockCrc << 8 ^ B.List_GZ8[t1]) >>> 0;
          }
          if (cNBlockUsed > sSaveNBlockPP)
            throw A.wrapException(A.ArchiveException$(_s10_));
          if (cNBlockUsed === sSaveNBlockPP)
            return blockCrc;
          t1 = 100000 * _this.__BZip2Decoder__blockSize100k_A;
          if (tPos >= t1)
            throw A.wrapException(A.ArchiveException$(_s10_0));
          t2 = _this.__BZip2Decoder__tt_A;
          t3 = t2.length;
          if (!(tPos >= 0 && tPos < t3))
            return A.ioore(t2, tPos);
          tPos = t2[tPos];
          k1 = tPos & 255;
          tPos = tPos >>> 8;
          ++cNBlockUsed;
          cStateOutLen = 0;
          if (k1 !== cK0) {
            output.writeByte$1(cK0);
            t1 = blockCrc >>> 24 & 255 ^ cK0 & 255;
            if (!(t1 < 256))
              return A.ioore(B.List_GZ8, t1);
            blockCrc = (blockCrc << 8 ^ B.List_GZ8[t1]) >>> 0;
            cK00 = k1;
            continue;
          }
          if (cNBlockUsed === sSaveNBlockPP) {
            output.writeByte$1(cK0);
            t1 = blockCrc >>> 24 & 255 ^ cK0 & 255;
            if (!(t1 < 256))
              return A.ioore(B.List_GZ8, t1);
            blockCrc = (blockCrc << 8 ^ B.List_GZ8[t1]) >>> 0;
            cK00 = cK0;
            continue;
          }
          if (tPos >= t1)
            throw A.wrapException(A.ArchiveException$(_s10_0));
          if (!(tPos < t3))
            return A.ioore(t2, tPos);
          tPos = t2[tPos];
          k1 = tPos & 255;
          tPos = tPos >>> 8;
          ++cNBlockUsed;
          if (cNBlockUsed === sSaveNBlockPP) {
            cK00 = cK0;
            cStateOutLen = 2;
            continue;
          }
          if (k1 !== cK0) {
            cK00 = k1;
            cStateOutLen = 2;
            continue;
          }
          if (tPos >= t1)
            throw A.wrapException(A.ArchiveException$(_s10_0));
          if (!(tPos < t3))
            return A.ioore(t2, tPos);
          tPos = t2[tPos];
          k1 = tPos & 255;
          tPos = tPos >>> 8;
          ++cNBlockUsed;
          if (cNBlockUsed === sSaveNBlockPP) {
            cK00 = cK0;
            cStateOutLen = 3;
            continue;
          }
          if (k1 !== cK0) {
            cK00 = k1;
            cStateOutLen = 3;
            continue;
          }
          if (tPos >= t1)
            throw A.wrapException(A.ArchiveException$(_s10_0));
          if (!(tPos < t3))
            return A.ioore(t2, tPos);
          tPos = t2[tPos];
          tPos0 = tPos >>> 8;
          cStateOutLen = (tPos & 255) + 4;
          if (tPos0 >= t1)
            throw A.wrapException(A.ArchiveException$(_s10_0));
          if (!(tPos0 < t3))
            return A.ioore(t2, tPos0);
          tPos = t2[tPos0];
          cK00 = tPos & 255;
          tPos = tPos >>> 8;
          cNBlockUsed = cNBlockUsed + 1 + 1;
        }
      return blockCrc;
    },
    _getMtfVal$1(br) {
      var t2, t3, zn, zvec, _this = this,
        _s10_ = "Data error",
        t1 = _this._groupPos;
      if (t1 === 0) {
        t1 = ++_this._groupNo;
        t2 = _this.__BZip2Decoder__numSelectors_A;
        t2 === $ && A.throwLateFieldNI("_numSelectors");
        if (t1 >= t2)
          throw A.wrapException(A.ArchiveException$(_s10_));
        t2 = _this._groupPos = 50;
        t3 = _this.__BZip2Decoder__selector_A;
        t3 === $ && A.throwLateFieldNI("_selector");
        if (!(t1 >= 0 && t1 < 18002))
          return A.ioore(t3, t1);
        t1 = t3[t1];
        _this._gSel = t1;
        t3 = _this.__BZip2Decoder__minLens_A;
        t3 === $ && A.throwLateFieldNI("_minLens");
        if (!(t1 < 6))
          return A.ioore(t3, t1);
        _this._gMinlen = t3[t1];
        t3 = _this.__BZip2Decoder__limit_A;
        t3 === $ && A.throwLateFieldNI("_limit");
        _this.__BZip2Decoder__gLimit_A = t3[t1];
        t3 = _this.__BZip2Decoder__perm_A;
        t3 === $ && A.throwLateFieldNI("_perm");
        _this.__BZip2Decoder__gPerm_A = t3[t1];
        t3 = _this.__BZip2Decoder__base_A;
        t3 === $ && A.throwLateFieldNI("_base");
        _this.__BZip2Decoder__gBase_A = t3[t1];
        t1 = t2;
      }
      _this._groupPos = t1 - 1;
      zn = _this._gMinlen;
      zvec = br.readBits$1(zn);
      for (; true;) {
        if (zn > 20)
          throw A.wrapException(A.ArchiveException$(_s10_));
        t1 = _this.__BZip2Decoder__gLimit_A;
        t1 === $ && A.throwLateFieldNI("_gLimit");
        if (!(zn >= 0 && zn < t1.length))
          return A.ioore(t1, zn);
        if (zvec <= t1[zn])
          break;
        ++zn;
        zvec = (zvec << 1 | br.readBits$1(1)) >>> 0;
      }
      t1 = _this.__BZip2Decoder__gBase_A;
      t1 === $ && A.throwLateFieldNI("_gBase");
      if (!(zn >= 0 && zn < t1.length))
        return A.ioore(t1, zn);
      t1 = zvec - t1[zn];
      if (t1 < 0 || t1 >= 258)
        throw A.wrapException(A.ArchiveException$(_s10_));
      t2 = _this.__BZip2Decoder__gPerm_A;
      t2 === $ && A.throwLateFieldNI("_gPerm");
      if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
      return t2[t1];
    },
    _hbCreateDecodeTables$7(limit, base, perm, $length, minLen, maxLen, alphaSize) {
      var t1, t2, i, pp, j, t3, t4, t5, vec, i0;
      for (t1 = $length.length, t2 = perm.$flags | 0, i = minLen, pp = 0; i <= maxLen; ++i)
        for (j = 0; j < alphaSize; ++j) {
          if (!(j < t1))
            return A.ioore($length, j);
          if ($length[j] === i) {
            t2 & 2 && A.throwUnsupportedOperation(perm);
            if (!(pp >= 0 && pp < perm.length))
              return A.ioore(perm, pp);
            perm[pp] = j;
            ++pp;
          }
        }
      for (t2 = base.$flags | 0, i = 0; i < 23; ++i) {
        t2 & 2 && A.throwUnsupportedOperation(base);
        if (!(i < base.length))
          return A.ioore(base, i);
        base[i] = 0;
      }
      for (t3 = base.length, i = 0; i < alphaSize; ++i) {
        if (!(i < t1))
          return A.ioore($length, i);
        t4 = $length[i] + 1;
        if (!(t4 >= 0 && t4 < t3))
          return A.ioore(base, t4);
        t5 = base[t4];
        t2 & 2 && A.throwUnsupportedOperation(base);
        base[t4] = t5 + 1;
      }
      for (i = 1; i < 23; ++i) {
        if (!(i < t3))
          return A.ioore(base, i);
        t1 = base[i];
        t4 = i - 1;
        if (!(t4 < t3))
          return A.ioore(base, t4);
        t4 = base[t4];
        t2 & 2 && A.throwUnsupportedOperation(base);
        base[i] = t1 + t4;
      }
      for (t1 = limit.$flags | 0, i = 0; i < 23; ++i) {
        t1 & 2 && A.throwUnsupportedOperation(limit);
        if (!(i < limit.length))
          return A.ioore(limit, i);
        limit[i] = 0;
      }
      for (i = minLen, vec = 0; i <= maxLen; i = i0) {
        i0 = i + 1;
        if (!(i0 >= 0 && i0 < t3))
          return A.ioore(base, i0);
        t4 = base[i0];
        if (!(i >= 0 && i < t3))
          return A.ioore(base, i);
        vec += t4 - base[i];
        t1 & 2 && A.throwUnsupportedOperation(limit);
        if (!(i < limit.length))
          return A.ioore(limit, i);
        limit[i] = vec - 1;
        vec = vec << 1 >>> 0;
      }
      for (i = minLen + 1, t1 = limit.length; i <= maxLen; ++i) {
        t4 = i - 1;
        if (!(t4 >= 0 && t4 < t1))
          return A.ioore(limit, t4);
        t4 = limit[t4];
        if (!(i >= 0 && i < t3))
          return A.ioore(base, i);
        t5 = base[i];
        t2 & 2 && A.throwUnsupportedOperation(base);
        base[i] = (t4 + 1 << 1 >>> 0) - t5;
      }
    },
    _makeMaps$0() {
      var i, t1, t2, _this = this;
      _this._numInUse = 0;
      _this.__BZip2Decoder__seqToUnseq_A = new Uint8Array(256);
      for (i = 0; i < 256; ++i) {
        t1 = _this.__BZip2Decoder__inUse_A;
        t1 === $ && A.throwLateFieldNI("_inUse");
        if (t1[i] !== 0) {
          t1 = _this.__BZip2Decoder__seqToUnseq_A;
          t2 = _this._numInUse++;
          t1.$flags & 2 && A.throwUnsupportedOperation(t1);
          if (!(t2 < 256))
            return A.ioore(t1, t2);
          t1[t2] = i;
        }
      }
    },
    set$__BZip2Decoder__limit_A(__BZip2Decoder__limit_A) {
      this.__BZip2Decoder__limit_A = type$.List_Int32List._as(__BZip2Decoder__limit_A);
    },
    set$__BZip2Decoder__base_A(__BZip2Decoder__base_A) {
      this.__BZip2Decoder__base_A = type$.List_Int32List._as(__BZip2Decoder__base_A);
    },
    set$__BZip2Decoder__perm_A(__BZip2Decoder__perm_A) {
      this.__BZip2Decoder__perm_A = type$.List_Int32List._as(__BZip2Decoder__perm_A);
    },
    set$__BZip2Decoder__len_A(__BZip2Decoder__len_A) {
      this.__BZip2Decoder__len_A = type$.List_Uint8List._as(__BZip2Decoder__len_A);
    }
  };
  A.FileContent.prototype = {};
  A.Aes.prototype = {
    processData$3(buff, start, len) {
      var t2, t3, t4, t5, j, j0, loopCount, t6, t7, t8, k, _this = this,
        _s11_ = "_workingKey",
        t1 = _this.__Aes__macGen_A;
      t1 === $ && A.throwLateFieldNI("_macGen");
      t1._digest.update$3(0, buff, 0, len);
      for (t1 = start + len, t2 = buff.length, t3 = _this.counterBlock, t4 = _this.iv, t5 = buff.$flags | 0, j = start; j < t1; j = j0) {
        j0 = j + 16;
        loopCount = j0 <= t1 ? 16 : t1 - j;
        A.AesCipherUtil_prepareBuffAESIVBytes(t4, _this.nonce);
        t6 = _this.aesEngine;
        if (16 > t4.byteLength)
          A.throwExpression(A.ArgumentError$("Input buffer too short", null));
        if (16 > t3.byteLength)
          A.throwExpression(A.ArgumentError$("Output buffer too short", null));
        t7 = t6._forEncryption;
        t8 = t6.__AESEngine__workingKey_A;
        if (t7) {
          t8 === $ && A.throwLateFieldNI(_s11_);
          t6._encryptBlock$5(t4, 0, t3, 0, t8);
        } else {
          t8 === $ && A.throwLateFieldNI(_s11_);
          t6._decryptBlock$5(t4, 0, t3, 0, t8);
        }
        for (k = 0; k < loopCount; ++k) {
          t6 = j + k;
          if (!(t6 < t2))
            return A.ioore(buff, t6);
          t7 = buff[t6];
          if (!(k < 16))
            return A.ioore(t3, k);
          t8 = t3[k];
          t5 & 2 && A.throwUnsupportedOperation(buff);
          buff[t6] = t7 ^ t8;
        }
        ++_this.nonce;
      }
      t1 = _this.__Aes__macGen_A;
      t2 = t1.__HMac__digestSize_A;
      t2 === $ && A.throwLateFieldNI("_digestSize");
      t2 = new Uint8Array(t2);
      _this.__Aes_mac_A = t2;
      t1.doFinal$2(t2, 0);
      _this.__Aes_mac_A = B.NativeUint8List_methods.sublist$2(_this.__Aes_mac_A, 0, 10);
      t2 = _this.__Aes__macGen_A;
      t1 = t2._digest;
      t1.reset$0(0);
      t2 = t2.__HMac__inputPad_A;
      t2 === $ && A.throwLateFieldNI("_inputPad");
      t1.update$3(0, t2, 0, t2.length);
      return len;
    }
  };
  A.ArchiveException.prototype = {};
  A.CipherParameters.prototype = {};
  A.Pbkdf2Parameters.prototype = {};
  A.BaseKeyDerivator.prototype = {};
  A.KeyParameter.prototype = {};
  A.PBKDF2KeyDerivator.prototype = {
    deriveKey$4(inp, inpOff, out, outOff) {
      var dkLen, t2, l, iBuf, outBytes, outPos, i, pos, _this = this,
        t1 = _this.__PBKDF2KeyDerivator__params_A;
      t1 === $ && A.throwLateFieldNI("_params");
      dkLen = t1.desiredKeyLength;
      t1 = _this._mac;
      t2 = t1.__HMac__digestSize_A;
      t2 === $ && A.throwLateFieldNI("_digestSize");
      l = B.JSInt_methods.$tdiv(dkLen + t2 - 1, t2);
      iBuf = new Uint8Array(4);
      outBytes = new Uint8Array(l * t2);
      t1.init$1(new A.KeyParameter(B.NativeUint8List_methods.sublist$1(inp, inpOff)));
      for (outPos = 0, i = 1; i <= l; ++i) {
        for (pos = 3; true; --pos) {
          if (!(pos >= 0))
            return A.ioore(iBuf, pos);
          t1 = iBuf[pos];
          if (!(pos < 4))
            return A.ioore(iBuf, pos);
          iBuf[pos] = t1 + 1;
          if (iBuf[pos] !== 0)
            break;
        }
        t1 = _this.__PBKDF2KeyDerivator__params_A;
        _this._encryption$_f$5(t1.salt, t1.iterationCount, iBuf, outBytes, outPos);
        outPos += t2;
      }
      B.NativeUint8List_methods.setRange$3(out, outOff, outOff + dkLen, outBytes);
      return _this.__PBKDF2KeyDerivator__params_A.desiredKeyLength;
    },
    _encryption$_f$5($S, c, iBuf, out, outOff) {
      var t1, t2, t3, count, t4, t5, t6, j, t7, t8, t9, _this = this;
      if (c <= 0)
        throw A.wrapException(A.ArgumentError$("Iteration count must be at least 1.", null));
      t1 = _this._mac;
      t2 = t1._digest;
      t2.update$3(0, $S, 0, $S.length);
      t2.update$3(0, iBuf, 0, 4);
      t3 = _this.__PBKDF2KeyDerivator__state_A;
      t3 === $ && A.throwLateFieldNI("_state");
      t1.doFinal$2(t3, 0);
      t3 = _this.__PBKDF2KeyDerivator__state_A;
      B.NativeUint8List_methods.setRange$3(out, outOff, outOff + t3.length, t3);
      for (t3 = out.length, count = 1; count < c; ++count) {
        t4 = _this.__PBKDF2KeyDerivator__state_A;
        t2.update$3(0, t4, 0, t4.length);
        t1.doFinal$2(_this.__PBKDF2KeyDerivator__state_A, 0);
        for (t4 = _this.__PBKDF2KeyDerivator__state_A, t5 = t4.length, t6 = out.$flags | 0, j = 0; j !== t5; ++j) {
          t7 = outOff + j;
          if (!(t7 < t3))
            return A.ioore(out, t7);
          t8 = out[t7];
          if (!(j < t5))
            return A.ioore(t4, j);
          t9 = t4[j];
          t6 & 2 && A.throwUnsupportedOperation(out);
          out[t7] = t8 ^ t9;
        }
      }
    }
  };
  A.BaseMac.prototype = {$isMac: 1};
  A.BaseDigest.prototype = {$isDigest: 1};
  A.Register64.prototype = {
    $eq(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = false;
      if (other instanceof A.Register64) {
        t2 = this.__Register64__hi32_A;
        t2 === $ && A.throwLateFieldNI("_hi32");
        t3 = other.__Register64__hi32_A;
        t3 === $ && A.throwLateFieldNI("_hi32");
        if (t2 === t3) {
          t1 = this.__Register64__lo32_A;
          t1 === $ && A.throwLateFieldNI("_lo32");
          t2 = other.__Register64__lo32_A;
          t2 === $ && A.throwLateFieldNI("_lo32");
          t2 = t1 === t2;
          t1 = t2;
        }
      }
      return t1;
    },
    setInt$2(hiOrLo32OrY, lo32) {
      this.__Register64__hi32_A = 0;
      this.__Register64__lo32_A = hiOrLo32OrY;
    },
    setInt$1(hiOrLo32OrY) {
      return this.setInt$2(hiOrLo32OrY, null);
    },
    sum$1(y) {
      var slo32, _this = this,
        t1 = _this.__Register64__lo32_A;
      t1 === $ && A.throwLateFieldNI("_lo32");
      slo32 = t1 + y;
      t1 = slo32 >>> 0;
      _this.__Register64__lo32_A = t1;
      if (slo32 !== t1) {
        t1 = _this.__Register64__hi32_A;
        t1 === $ && A.throwLateFieldNI("_hi32");
        ++t1;
        _this.__Register64__hi32_A = t1;
        _this.__Register64__hi32_A = t1 >>> 0;
      }
    },
    toString$0(_) {
      var _this = this,
        sb = new A.StringBuffer(""),
        t1 = _this.__Register64__hi32_A;
      t1 === $ && A.throwLateFieldNI("_hi32");
      _this._padWrite$2(sb, t1);
      t1 = _this.__Register64__lo32_A;
      t1 === $ && A.throwLateFieldNI("_lo32");
      _this._padWrite$2(sb, t1);
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _padWrite$2(sb, value) {
      var i,
        str = B.JSInt_methods.toRadixString$1(value, 16);
      for (i = 8 - str.length; i > 0; --i)
        sb._contents += "0";
      sb._contents += str;
    },
    get$hashCode(_) {
      var t2,
        t1 = this.__Register64__hi32_A;
      t1 === $ && A.throwLateFieldNI("_hi32");
      t2 = this.__Register64__lo32_A;
      t2 === $ && A.throwLateFieldNI("_lo32");
      return A.Object_hash(t1, t2, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.MD4FamilyDigest.prototype = {
    reset$0(_) {
      var t1, _this = this;
      _this._byteCount.setInt$1(0);
      _this.__MD4FamilyDigest__wordBufferOffset_A = 0;
      B.NativeUint8List_methods.fillRange$3(_this._wordBuffer, 0, 4, 0);
      _this.__MD4FamilyDigest_bufferOffset_A = 0;
      t1 = _this.buffer;
      B.JSArray_methods.fillRange$3(t1, 0, t1.length, 0);
      t1 = _this.state;
      B.JSArray_methods.$indexSet(t1, 0, 1732584193);
      B.JSArray_methods.$indexSet(t1, 1, 4023233417);
      B.JSArray_methods.$indexSet(t1, 2, 2562383102);
      B.JSArray_methods.$indexSet(t1, 3, 271733878);
      B.JSArray_methods.$indexSet(t1, 4, 3285377520);
    },
    updateByte$1(inp) {
      var t3, _this = this,
        t1 = _this._wordBuffer,
        t2 = _this.__MD4FamilyDigest__wordBufferOffset_A;
      t2 === $ && A.throwLateFieldNI("_wordBufferOffset");
      t3 = t2 + 1;
      _this.__MD4FamilyDigest__wordBufferOffset_A = t3;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      if (!(t2 < 4))
        return A.ioore(t1, t2);
      t1[t2] = inp & 255;
      if (t3 === 4) {
        _this._processWord$2(t1, 0);
        _this.__MD4FamilyDigest__wordBufferOffset_A = 0;
      }
      _this._byteCount.sum$1(1);
    },
    update$3(_, inp, inpOff, len) {
      var nbytes = this._processUntilNextWord$3(inp, inpOff, len);
      inpOff += nbytes;
      len -= nbytes;
      nbytes = this._processWholeWords$3(inp, inpOff, len);
      this._processBytes$3(inp, inpOff + nbytes, len - nbytes);
    },
    doFinal$2(out, outOff) {
      var t2, _this = this,
        bitLength = A.Register64$(_this._byteCount),
        t1 = bitLength.__Register64__hi32_A;
      t1 === $ && A.throwLateFieldNI("_hi32");
      t1 = A.shiftl32(t1, 3);
      bitLength.__Register64__hi32_A = t1;
      t2 = bitLength.__Register64__lo32_A;
      t2 === $ && A.throwLateFieldNI("_lo32");
      bitLength.__Register64__hi32_A = (t1 | t2 >>> 29) >>> 0;
      bitLength.__Register64__lo32_A = A.shiftl32(t2, 3);
      _this._processPadding$0();
      _this._processLength$1(bitLength);
      _this._doProcessBlock$0();
      _this._packState$2(out, outOff);
      _this.reset$0(0);
      return 20;
    },
    _processWord$2(inp, inpOff) {
      var _this = this,
        t1 = _this.__MD4FamilyDigest_bufferOffset_A;
      t1 === $ && A.throwLateFieldNI("bufferOffset");
      _this.__MD4FamilyDigest_bufferOffset_A = t1 + 1;
      B.JSArray_methods.$indexSet(_this.buffer, t1, J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(inp), inp.byteOffset, inp.length).getUint32(inpOff, B.C_Endian === _this._endian));
      if (_this.__MD4FamilyDigest_bufferOffset_A === 16)
        _this._doProcessBlock$0();
    },
    _doProcessBlock$0() {
      this.processBlock$0();
      this.__MD4FamilyDigest_bufferOffset_A = 0;
      B.JSArray_methods.fillRange$3(this.buffer, 0, 16, 0);
    },
    _processBytes$3(inp, inpOff, len) {
      var t1;
      for (t1 = inp.length; len > 0;) {
        if (!(inpOff < t1))
          return A.ioore(inp, inpOff);
        this.updateByte$1(inp[inpOff]);
        ++inpOff;
        --len;
      }
    },
    _processWholeWords$3(inp, inpOff, len) {
      var t1, processed;
      for (t1 = this._byteCount, processed = 0; len > 4;) {
        this._processWord$2(inp, inpOff);
        inpOff += 4;
        len -= 4;
        t1.sum$1(4);
        processed += 4;
      }
      return processed;
    },
    _processUntilNextWord$3(inp, inpOff, len) {
      var t2,
        t1 = inp.length,
        processed = 0;
      while (true) {
        t2 = this.__MD4FamilyDigest__wordBufferOffset_A;
        t2 === $ && A.throwLateFieldNI("_wordBufferOffset");
        if (!(t2 !== 0 && len > 0))
          break;
        if (!(inpOff < t1))
          return A.ioore(inp, inpOff);
        this.updateByte$1(inp[inpOff]);
        ++inpOff;
        --len;
        ++processed;
      }
      return processed;
    },
    _processPadding$0() {
      this.updateByte$1(128);
      while (true) {
        var t1 = this.__MD4FamilyDigest__wordBufferOffset_A;
        t1 === $ && A.throwLateFieldNI("_wordBufferOffset");
        if (!(t1 !== 0))
          break;
        this.updateByte$1(0);
      }
    },
    _processLength$1(bitLength) {
      var t2, _this = this,
        t1 = _this.__MD4FamilyDigest_bufferOffset_A;
      t1 === $ && A.throwLateFieldNI("bufferOffset");
      if (t1 > 14)
        _this._doProcessBlock$0();
      t1 = _this._endian;
      switch (t1) {
        case B.C_Endian:
          t1 = _this.buffer;
          t2 = bitLength.__Register64__lo32_A;
          t2 === $ && A.throwLateFieldNI("_lo32");
          B.JSArray_methods.$indexSet(t1, 14, t2);
          t2 = bitLength.__Register64__hi32_A;
          t2 === $ && A.throwLateFieldNI("_hi32");
          B.JSArray_methods.$indexSet(t1, 15, t2);
          break;
        case B.C_Endian0:
          t1 = _this.buffer;
          t2 = bitLength.__Register64__hi32_A;
          t2 === $ && A.throwLateFieldNI("_hi32");
          B.JSArray_methods.$indexSet(t1, 14, t2);
          t2 = bitLength.__Register64__lo32_A;
          t2 === $ && A.throwLateFieldNI("_lo32");
          B.JSArray_methods.$indexSet(t1, 15, t2);
          break;
        default:
          throw A.wrapException(A.StateError$("Invalid endianness: " + t1.toString$0(0)));
      }
    },
    _packState$2(out, outOff) {
      var t1, t2, t3, t4, t5, i, t6, t7;
      for (t1 = this._packedStateSize, t2 = this.state, t3 = t2.length, t4 = out.length, t5 = B.C_Endian === this._endian, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        t6 = t2[i];
        t7 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(out), out.byteOffset, t4);
        t7.$flags & 2 && A.throwUnsupportedOperation(t7, 11);
        t7.setUint32(outOff + i * 4, t6, t5);
      }
    }
  };
  A.SHA1Digest.prototype = {
    processBlock$0() {
      var t1, t2, i, t3, t4, t5, t6, t, $A, $B, $C, $D, $E, A0, idx, j, idx0;
      for (t1 = this.buffer, t2 = t1.length, i = 16; i < 80; ++i) {
        t3 = i - 3;
        if (!(t3 < t2))
          return A.ioore(t1, t3);
        t3 = t1[t3];
        t4 = i - 8;
        if (!(t4 < t2))
          return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = i - 14;
        if (!(t5 < t2))
          return A.ioore(t1, t5);
        t5 = t1[t5];
        t6 = i - 16;
        if (!(t6 < t2))
          return A.ioore(t1, t6);
        t = t3 ^ t4 ^ t5 ^ t1[t6];
        B.JSArray_methods.$indexSet(t1, i, ((t & $._mask32HiBits[1]) << 1 | t >>> 31) >>> 0);
      }
      t3 = this.state;
      t4 = t3.length;
      if (0 >= t4)
        return A.ioore(t3, 0);
      $A = t3[0];
      if (1 >= t4)
        return A.ioore(t3, 1);
      $B = t3[1];
      if (2 >= t4)
        return A.ioore(t3, 2);
      $C = t3[2];
      if (3 >= t4)
        return A.ioore(t3, 3);
      $D = t3[3];
      if (4 >= t4)
        return A.ioore(t3, 4);
      $E = t3[4];
      for (A0 = $A, idx = 0, j = 0; j < 4; ++j, idx = idx0) {
        t4 = $._mask32HiBits[5];
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $E = $E + (((A0 & t4) << 5 | A0 >>> 27) >>> 0) + (($B & $C | ~$B & $D) >>> 0) + t1[idx] + 1518500249 >>> 0;
        t5 = $._mask32HiBits[30];
        $B = (($B & t5) << 30 | $B >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $D = $D + ((($E & t4) << 5 | $E >>> 27) >>> 0) + ((A0 & $B | ~A0 & $C) >>> 0) + t1[idx0] + 1518500249 >>> 0;
        A0 = ((A0 & t5) << 30 | A0 >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $C = $C + ((($D & t4) << 5 | $D >>> 27) >>> 0) + (($E & A0 | ~$E & $B) >>> 0) + t1[idx] + 1518500249 >>> 0;
        $E = (($E & t5) << 30 | $E >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $B = $B + ((($C & t4) << 5 | $C >>> 27) >>> 0) + (($D & $E | ~$D & A0) >>> 0) + t1[idx0] + 1518500249 >>> 0;
        $D = (($D & t5) << 30 | $D >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        A0 = A0 + ((($B & t4) << 5 | $B >>> 27) >>> 0) + (($C & $D | ~$C & $E) >>> 0) + t1[idx] + 1518500249 >>> 0;
        $C = (($C & t5) << 30 | $C >>> 2) >>> 0;
      }
      for (j = 0; j < 4; ++j, idx = idx0) {
        t4 = $._mask32HiBits[5];
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $E = $E + (((A0 & t4) << 5 | A0 >>> 27) >>> 0) + (($B ^ $C ^ $D) >>> 0) + t1[idx] + 1859775393 >>> 0;
        t5 = $._mask32HiBits[30];
        $B = (($B & t5) << 30 | $B >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $D = $D + ((($E & t4) << 5 | $E >>> 27) >>> 0) + ((A0 ^ $B ^ $C) >>> 0) + t1[idx0] + 1859775393 >>> 0;
        A0 = ((A0 & t5) << 30 | A0 >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $C = $C + ((($D & t4) << 5 | $D >>> 27) >>> 0) + (($E ^ A0 ^ $B) >>> 0) + t1[idx] + 1859775393 >>> 0;
        $E = (($E & t5) << 30 | $E >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $B = $B + ((($C & t4) << 5 | $C >>> 27) >>> 0) + (($D ^ $E ^ A0) >>> 0) + t1[idx0] + 1859775393 >>> 0;
        $D = (($D & t5) << 30 | $D >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        A0 = A0 + ((($B & t4) << 5 | $B >>> 27) >>> 0) + (($C ^ $D ^ $E) >>> 0) + t1[idx] + 1859775393 >>> 0;
        $C = (($C & t5) << 30 | $C >>> 2) >>> 0;
      }
      for (j = 0; j < 4; ++j, idx = idx0) {
        t4 = $._mask32HiBits[5];
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $E = $E + (((A0 & t4) << 5 | A0 >>> 27) >>> 0) + (($B & $C | $B & $D | $C & $D) >>> 0) + t1[idx] + 2400959708 >>> 0;
        t5 = $._mask32HiBits[30];
        $B = (($B & t5) << 30 | $B >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $D = $D + ((($E & t4) << 5 | $E >>> 27) >>> 0) + ((A0 & $B | A0 & $C | $B & $C) >>> 0) + t1[idx0] + 2400959708 >>> 0;
        A0 = ((A0 & t5) << 30 | A0 >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $C = $C + ((($D & t4) << 5 | $D >>> 27) >>> 0) + (($E & A0 | $E & $B | A0 & $B) >>> 0) + t1[idx] + 2400959708 >>> 0;
        $E = (($E & t5) << 30 | $E >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $B = $B + ((($C & t4) << 5 | $C >>> 27) >>> 0) + (($D & $E | $D & A0 | $E & A0) >>> 0) + t1[idx0] + 2400959708 >>> 0;
        $D = (($D & t5) << 30 | $D >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        A0 = A0 + ((($B & t4) << 5 | $B >>> 27) >>> 0) + (($C & $D | $C & $E | $D & $E) >>> 0) + t1[idx] + 2400959708 >>> 0;
        $C = (($C & t5) << 30 | $C >>> 2) >>> 0;
      }
      for (j = 0; j < 4; ++j, idx = idx0) {
        t4 = $._mask32HiBits[5];
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $E = $E + (((A0 & t4) << 5 | A0 >>> 27) >>> 0) + (($B ^ $C ^ $D) >>> 0) + t1[idx] + 3395469782 >>> 0;
        t5 = $._mask32HiBits[30];
        $B = (($B & t5) << 30 | $B >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $D = $D + ((($E & t4) << 5 | $E >>> 27) >>> 0) + ((A0 ^ $B ^ $C) >>> 0) + t1[idx0] + 3395469782 >>> 0;
        A0 = ((A0 & t5) << 30 | A0 >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        $C = $C + ((($D & t4) << 5 | $D >>> 27) >>> 0) + (($E ^ A0 ^ $B) >>> 0) + t1[idx] + 3395469782 >>> 0;
        $E = (($E & t5) << 30 | $E >>> 2) >>> 0;
        idx = idx0 + 1;
        if (!(idx0 < t2))
          return A.ioore(t1, idx0);
        $B = $B + ((($C & t4) << 5 | $C >>> 27) >>> 0) + (($D ^ $E ^ A0) >>> 0) + t1[idx0] + 3395469782 >>> 0;
        $D = (($D & t5) << 30 | $D >>> 2) >>> 0;
        idx0 = idx + 1;
        if (!(idx < t2))
          return A.ioore(t1, idx);
        A0 = A0 + ((($B & t4) << 5 | $B >>> 27) >>> 0) + (($C ^ $D ^ $E) >>> 0) + t1[idx] + 3395469782 >>> 0;
        $C = (($C & t5) << 30 | $C >>> 2) >>> 0;
      }
      B.JSArray_methods.$indexSet(t3, 0, $A + A0 >>> 0);
      B.JSArray_methods.$indexSet(t3, 1, t3[1] + $B >>> 0);
      B.JSArray_methods.$indexSet(t3, 2, t3[2] + $C >>> 0);
      B.JSArray_methods.$indexSet(t3, 3, t3[3] + $D >>> 0);
      B.JSArray_methods.$indexSet(t3, 4, t3[4] + $E >>> 0);
    }
  };
  A.HMac.prototype = {
    init$1(params) {
      var t2, keyLength, t3, t4, _this = this,
        _s9_ = "_inputPad",
        t1 = _this._digest;
      t1.reset$0(0);
      t2 = params.__KeyParameter_key_A;
      t2 === $ && A.throwLateFieldNI("key");
      keyLength = t2.length;
      t3 = _this.__HMac__blockLength_A;
      t3 === $ && A.throwLateFieldNI("_blockLength");
      if (keyLength > t3) {
        t1.update$3(0, t2, 0, keyLength);
        t2 = _this.__HMac__inputPad_A;
        t2 === $ && A.throwLateFieldNI(_s9_);
        t1.doFinal$2(t2, 0);
        t2 = _this.__HMac__digestSize_A;
        t2 === $ && A.throwLateFieldNI("_digestSize");
        keyLength = t2;
      } else {
        t4 = _this.__HMac__inputPad_A;
        t4 === $ && A.throwLateFieldNI(_s9_);
        B.NativeUint8List_methods.setRange$3(t4, 0, keyLength, t2);
      }
      t2 = _this.__HMac__inputPad_A;
      t2 === $ && A.throwLateFieldNI(_s9_);
      B.NativeUint8List_methods.fillRange$3(t2, keyLength, t2.length, 0);
      t2 = _this.__HMac__outputBuf_A;
      t2 === $ && A.throwLateFieldNI("_outputBuf");
      B.NativeUint8List_methods.setRange$3(t2, 0, t3, _this.__HMac__inputPad_A);
      _this._xorPad$3(_this.__HMac__inputPad_A, t3, 54);
      _this._xorPad$3(_this.__HMac__outputBuf_A, t3, 92);
      t3 = _this.__HMac__inputPad_A;
      t1.update$3(0, t3, 0, t3.length);
    },
    doFinal$2(out, outOff) {
      var t3, len, _this = this,
        t1 = _this._digest,
        t2 = _this.__HMac__outputBuf_A;
      t2 === $ && A.throwLateFieldNI("_outputBuf");
      t3 = _this.__HMac__blockLength_A;
      t3 === $ && A.throwLateFieldNI("_blockLength");
      t1.doFinal$2(t2, t3);
      t2 = _this.__HMac__outputBuf_A;
      t1.update$3(0, t2, 0, t2.length);
      len = t1.doFinal$2(out, outOff);
      t2 = _this.__HMac__outputBuf_A;
      B.NativeUint8List_methods.fillRange$3(t2, t3, t2.length, 0);
      t2 = _this.__HMac__inputPad_A;
      t2 === $ && A.throwLateFieldNI("_inputPad");
      t1.update$3(0, t2, 0, t2.length);
      return len;
    },
    _xorPad$3(pad, len, n) {
      var t1, t2, i, t3;
      for (t1 = pad.length, t2 = pad.$flags | 0, i = 0; i < len; ++i) {
        if (!(i < t1))
          return A.ioore(pad, i);
        t3 = pad[i];
        t2 & 2 && A.throwUnsupportedOperation(pad);
        pad[i] = t3 ^ n;
      }
    }
  };
  A.BaseBlockCipher.prototype = {};
  A.AESEngine.prototype = {
    _subWord$1(x) {
      return (B.List_9Wx[x & 255] & 255 | (B.List_9Wx[x >>> 8 & 255] & 255) << 8 | (B.List_9Wx[x >>> 16 & 255] & 255) << 16 | B.List_9Wx[x >>> 24 & 255] << 24) >>> 0;
    },
    generateWorkingKey$2(forEncryption, params) {
      var keyLen, kc, t2, _length, $W, i, bKey, col0, col1, col2, col3, col4, col5, rcon, rcon0, col6, col7, _this = this,
        t1 = params.__KeyParameter_key_A;
      t1 === $ && A.throwLateFieldNI("key");
      keyLen = t1.length;
      if (keyLen < 16 || keyLen > 32 || (keyLen & 7) !== 0)
        throw A.wrapException(A.ArgumentError$("Key length not 128/192/256 bits.", null));
      kc = keyLen >>> 2;
      t2 = kc + 6;
      _this._rounds = t2;
      _length = t2 + 1;
      $W = J.JSArray_JSArray$allocateGrowable(_length, type$.List_int);
      for (t2 = type$.int, i = 0; i < _length; ++i)
        $W[i] = A.List_List$filled(4, 0, false, t2);
      switch (kc) {
        case 4:
          bKey = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(t1), t1.byteOffset, keyLen);
          col0 = bKey.getUint32(0, true);
          t1 = $W.length;
          if (0 >= t1)
            return A.ioore($W, 0);
          t2 = $W[0];
          B.JSArray_methods.$indexSet(t2, 0, col0);
          col1 = bKey.getUint32(4, true);
          B.JSArray_methods.$indexSet(t2, 1, col1);
          col2 = bKey.getUint32(8, true);
          B.JSArray_methods.$indexSet(t2, 2, col2);
          col3 = bKey.getUint32(12, true);
          B.JSArray_methods.$indexSet(t2, 3, col3);
          for (i = 1; i <= 10; ++i) {
            col0 = (col0 ^ _this._subWord$1((col3 >>> 8 | (col3 & $._mask32HiBits[24]) << 24) >>> 0) ^ B.List_bh5[i - 1]) >>> 0;
            if (!(i < t1))
              return A.ioore($W, i);
            t2 = $W[i];
            B.JSArray_methods.$indexSet(t2, 0, col0);
            col1 = (col1 ^ col0) >>> 0;
            B.JSArray_methods.$indexSet(t2, 1, col1);
            col2 = (col2 ^ col1) >>> 0;
            B.JSArray_methods.$indexSet(t2, 2, col2);
            col3 = (col3 ^ col2) >>> 0;
            B.JSArray_methods.$indexSet(t2, 3, col3);
          }
          break;
        case 6:
          bKey = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(t1), t1.byteOffset, keyLen);
          col0 = bKey.getUint32(0, true);
          t1 = $W.length;
          if (0 >= t1)
            return A.ioore($W, 0);
          t2 = $W[0];
          B.JSArray_methods.$indexSet(t2, 0, col0);
          col1 = bKey.getUint32(4, true);
          B.JSArray_methods.$indexSet(t2, 1, col1);
          col2 = bKey.getUint32(8, true);
          B.JSArray_methods.$indexSet(t2, 2, col2);
          col3 = bKey.getUint32(12, true);
          B.JSArray_methods.$indexSet(t2, 3, col3);
          col4 = bKey.getUint32(16, true);
          col5 = bKey.getUint32(20, true);
          for (i = 1, rcon = 1; true;) {
            if (!(i < t1))
              return A.ioore($W, i);
            t2 = $W[i];
            B.JSArray_methods.$indexSet(t2, 0, col4);
            B.JSArray_methods.$indexSet(t2, 1, col5);
            rcon0 = rcon << 1;
            col0 = (col0 ^ _this._subWord$1((col5 >>> 8 | (col5 & $._mask32HiBits[24]) << 24) >>> 0) ^ rcon) >>> 0;
            B.JSArray_methods.$indexSet(t2, 2, col0);
            col1 = (col1 ^ col0) >>> 0;
            B.JSArray_methods.$indexSet(t2, 3, col1);
            col2 = (col2 ^ col1) >>> 0;
            t2 = i + 1;
            if (!(t2 < t1))
              return A.ioore($W, t2);
            t2 = $W[t2];
            B.JSArray_methods.$indexSet(t2, 0, col2);
            col3 = (col3 ^ col2) >>> 0;
            B.JSArray_methods.$indexSet(t2, 1, col3);
            col4 = (col4 ^ col3) >>> 0;
            B.JSArray_methods.$indexSet(t2, 2, col4);
            col5 = (col5 ^ col4) >>> 0;
            B.JSArray_methods.$indexSet(t2, 3, col5);
            rcon = rcon0 << 1;
            col0 = (col0 ^ _this._subWord$1((col5 >>> 8 | (col5 & $._mask32HiBits[24]) << 24) >>> 0) ^ rcon0) >>> 0;
            t2 = i + 2;
            if (!(t2 < t1))
              return A.ioore($W, t2);
            t2 = $W[t2];
            B.JSArray_methods.$indexSet(t2, 0, col0);
            col1 = (col1 ^ col0) >>> 0;
            B.JSArray_methods.$indexSet(t2, 1, col1);
            col2 = (col2 ^ col1) >>> 0;
            B.JSArray_methods.$indexSet(t2, 2, col2);
            col3 = (col3 ^ col2) >>> 0;
            B.JSArray_methods.$indexSet(t2, 3, col3);
            i += 3;
            if (i >= 13)
              break;
            col4 = (col4 ^ col3) >>> 0;
            col5 = (col5 ^ col4) >>> 0;
          }
          break;
        case 8:
          bKey = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(t1), t1.byteOffset, keyLen);
          col0 = bKey.getUint32(0, true);
          t1 = $W.length;
          if (0 >= t1)
            return A.ioore($W, 0);
          t2 = $W[0];
          B.JSArray_methods.$indexSet(t2, 0, col0);
          col1 = bKey.getUint32(4, true);
          B.JSArray_methods.$indexSet(t2, 1, col1);
          col2 = bKey.getUint32(8, true);
          B.JSArray_methods.$indexSet(t2, 2, col2);
          col3 = bKey.getUint32(12, true);
          B.JSArray_methods.$indexSet(t2, 3, col3);
          col4 = bKey.getUint32(16, true);
          if (1 >= t1)
            return A.ioore($W, 1);
          t2 = $W[1];
          B.JSArray_methods.$indexSet(t2, 0, col4);
          col5 = bKey.getUint32(20, true);
          B.JSArray_methods.$indexSet(t2, 1, col5);
          col6 = bKey.getUint32(24, true);
          B.JSArray_methods.$indexSet(t2, 2, col6);
          col7 = bKey.getUint32(28, true);
          B.JSArray_methods.$indexSet(t2, 3, col7);
          for (i = 2, rcon = 1; true; rcon = rcon0) {
            rcon0 = rcon << 1;
            col0 = (col0 ^ _this._subWord$1((col7 >>> 8 | (col7 & $._mask32HiBits[24]) << 24) >>> 0) ^ rcon) >>> 0;
            if (!(i < t1))
              return A.ioore($W, i);
            t2 = $W[i];
            B.JSArray_methods.$indexSet(t2, 0, col0);
            col1 = (col1 ^ col0) >>> 0;
            B.JSArray_methods.$indexSet(t2, 1, col1);
            col2 = (col2 ^ col1) >>> 0;
            B.JSArray_methods.$indexSet(t2, 2, col2);
            col3 = (col3 ^ col2) >>> 0;
            B.JSArray_methods.$indexSet(t2, 3, col3);
            ++i;
            if (i >= 15)
              break;
            col4 = (col4 ^ _this._subWord$1(col3)) >>> 0;
            if (!(i < t1))
              return A.ioore($W, i);
            t2 = $W[i];
            B.JSArray_methods.$indexSet(t2, 0, col4);
            col5 = (col5 ^ col4) >>> 0;
            B.JSArray_methods.$indexSet(t2, 1, col5);
            col6 = (col6 ^ col5) >>> 0;
            B.JSArray_methods.$indexSet(t2, 2, col6);
            col7 = (col7 ^ col6) >>> 0;
            B.JSArray_methods.$indexSet(t2, 3, col7);
            ++i;
          }
          break;
        default:
          throw A.wrapException(A.StateError$("Should never get here"));
      }
      return $W;
    },
    _encryptBlock$5(input, inOff, out, outOff, kw) {
      var bInput, c0, c1, c2, c3, t1, t2, t00, t10, t20, r3, r, t3, t4, t5, t6, t7, t8, t9, t11, r0, r1, r2, r30, t12, t13, t14, t15, t16, t17, t18, t19;
      type$.List_List_int._as(kw);
      bInput = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(input), input.byteOffset, 16);
      c0 = bInput.getUint32(inOff, true);
      c1 = bInput.getUint32(inOff + 4, true);
      c2 = bInput.getUint32(inOff + 8, true);
      c3 = bInput.getUint32(inOff + 12, true);
      t1 = kw.length;
      if (0 >= t1)
        return A.ioore(kw, 0);
      t2 = kw[0];
      t00 = c0 ^ t2[0];
      t10 = c1 ^ t2[1];
      t20 = c2 ^ t2[2];
      r3 = c3 ^ t2[3];
      for (t2 = this._rounds - 1, r = 1; r < t2;) {
        t3 = B.List_oyU[t00 & 255];
        t4 = B.List_oyU[t10 >>> 8 & 255];
        t5 = $._mask32HiBits[8];
        t6 = B.List_oyU[t20 >>> 16 & 255];
        t7 = $._mask32HiBits[16];
        t8 = B.List_oyU[r3 >>> 24 & 255];
        t9 = $._mask32HiBits[24];
        if (!(r < t1))
          return A.ioore(kw, r);
        t11 = kw[r];
        r0 = t3 ^ (t4 >>> 24 | (t4 & t5) << 8) ^ (t6 >>> 16 | (t6 & t7) << 16) ^ (t8 >>> 8 | (t8 & t9) << 24) ^ t11[0];
        t8 = B.List_oyU[t10 & 255];
        t6 = B.List_oyU[t20 >>> 8 & 255];
        t4 = B.List_oyU[r3 >>> 16 & 255];
        t3 = B.List_oyU[t00 >>> 24 & 255];
        r1 = t8 ^ (t6 >>> 24 | (t6 & t5) << 8) ^ (t4 >>> 16 | (t4 & t7) << 16) ^ (t3 >>> 8 | (t3 & t9) << 24) ^ t11[1];
        t3 = B.List_oyU[t20 & 255];
        t4 = B.List_oyU[r3 >>> 8 & 255];
        t6 = B.List_oyU[t00 >>> 16 & 255];
        t8 = B.List_oyU[t10 >>> 24 & 255];
        r2 = t3 ^ (t4 >>> 24 | (t4 & t5) << 8) ^ (t6 >>> 16 | (t6 & t7) << 16) ^ (t8 >>> 8 | (t8 & t9) << 24) ^ t11[2];
        t8 = B.List_oyU[r3 & 255];
        t00 = B.List_oyU[t00 >>> 8 & 255];
        t10 = B.List_oyU[t10 >>> 16 & 255];
        t20 = B.List_oyU[t20 >>> 24 & 255];
        ++r;
        r3 = t8 ^ (t00 >>> 24 | (t00 & t5) << 8) ^ (t10 >>> 16 | (t10 & t7) << 16) ^ (t20 >>> 8 | (t20 & t9) << 24) ^ t11[3];
        t11 = B.List_oyU[r0 & 255];
        t20 = B.List_oyU[r1 >>> 8 & 255];
        t10 = B.List_oyU[r2 >>> 16 & 255];
        t00 = B.List_oyU[r3 >>> 24 & 255];
        if (!(r < t1))
          return A.ioore(kw, r);
        t8 = kw[r];
        t00 = t11 ^ (t20 >>> 24 | (t20 & t5) << 8) ^ (t10 >>> 16 | (t10 & t7) << 16) ^ (t00 >>> 8 | (t00 & t9) << 24) ^ t8[0];
        t10 = B.List_oyU[r1 & 255];
        t20 = B.List_oyU[r2 >>> 8 & 255];
        t11 = B.List_oyU[r3 >>> 16 & 255];
        t6 = B.List_oyU[r0 >>> 24 & 255];
        t10 = t10 ^ (t20 >>> 24 | (t20 & t5) << 8) ^ (t11 >>> 16 | (t11 & t7) << 16) ^ (t6 >>> 8 | (t6 & t9) << 24) ^ t8[1];
        t6 = B.List_oyU[r2 & 255];
        t11 = B.List_oyU[r3 >>> 8 & 255];
        t20 = B.List_oyU[r0 >>> 16 & 255];
        t4 = B.List_oyU[r1 >>> 24 & 255];
        t20 = t6 ^ (t11 >>> 24 | (t11 & t5) << 8) ^ (t20 >>> 16 | (t20 & t7) << 16) ^ (t4 >>> 8 | (t4 & t9) << 24) ^ t8[2];
        t4 = B.List_oyU[r3 & 255];
        t11 = B.List_oyU[r0 >>> 8 & 255];
        t6 = B.List_oyU[r1 >>> 16 & 255];
        t3 = B.List_oyU[r2 >>> 24 & 255];
        ++r;
        r3 = t4 ^ (t11 >>> 24 | (t11 & t5) << 8) ^ (t6 >>> 16 | (t6 & t7) << 16) ^ (t3 >>> 8 | (t3 & t9) << 24) ^ t8[3];
      }
      t1 = B.List_oyU[t00 & 255];
      t2 = A.rotr32(B.List_oyU[t10 >>> 8 & 255], 24);
      t3 = A.rotr32(B.List_oyU[t20 >>> 16 & 255], 16);
      t4 = A.rotr32(B.List_oyU[r3 >>> 24 & 255], 8);
      if (!(r < kw.length))
        return A.ioore(kw, r);
      r0 = t1 ^ t2 ^ t3 ^ t4 ^ kw[r][0];
      t4 = B.List_oyU[t10 & 255];
      t3 = A.rotr32(B.List_oyU[t20 >>> 8 & 255], 24);
      t2 = A.rotr32(B.List_oyU[r3 >>> 16 & 255], 16);
      t1 = A.rotr32(B.List_oyU[t00 >>> 24 & 255], 8);
      if (!(r < kw.length))
        return A.ioore(kw, r);
      r1 = t4 ^ t3 ^ t2 ^ t1 ^ kw[r][1];
      t1 = B.List_oyU[t20 & 255];
      t2 = A.rotr32(B.List_oyU[r3 >>> 8 & 255], 24);
      t3 = A.rotr32(B.List_oyU[t00 >>> 16 & 255], 16);
      t4 = A.rotr32(B.List_oyU[t10 >>> 24 & 255], 8);
      if (!(r < kw.length))
        return A.ioore(kw, r);
      r2 = t1 ^ t2 ^ t3 ^ t4 ^ kw[r][2];
      t4 = B.List_oyU[r3 & 255];
      t00 = A.rotr32(B.List_oyU[t00 >>> 8 & 255], 24);
      t10 = A.rotr32(B.List_oyU[t10 >>> 16 & 255], 16);
      t20 = A.rotr32(B.List_oyU[t20 >>> 24 & 255], 8);
      r3 = r + 1;
      t3 = kw.length;
      if (!(r < t3))
        return A.ioore(kw, r);
      r30 = t4 ^ t00 ^ t10 ^ t20 ^ kw[r][3];
      t20 = B.List_9Wx[r0 & 255];
      t10 = B.List_9Wx[r1 >>> 8 & 255];
      t00 = this._s;
      t4 = r2 >>> 16 & 255;
      t2 = t00.length;
      if (!(t4 < t2))
        return A.ioore(t00, t4);
      t4 = t00[t4];
      t1 = r30 >>> 24 & 255;
      if (!(t1 < t2))
        return A.ioore(t00, t1);
      t1 = t00[t1];
      if (!(r3 < t3))
        return A.ioore(kw, r3);
      t3 = kw[r3];
      t5 = t3[0];
      t6 = r1 & 255;
      if (!(t6 < t2))
        return A.ioore(t00, t6);
      t6 = t00[t6];
      t7 = B.List_9Wx[r2 >>> 8 & 255];
      t8 = B.List_9Wx[r30 >>> 16 & 255];
      t9 = r0 >>> 24 & 255;
      if (!(t9 < t2))
        return A.ioore(t00, t9);
      t9 = t00[t9];
      t11 = t3[1];
      t12 = r2 & 255;
      if (!(t12 < t2))
        return A.ioore(t00, t12);
      t12 = t00[t12];
      t13 = B.List_9Wx[r30 >>> 8 & 255];
      t14 = B.List_9Wx[r0 >>> 16 & 255];
      t15 = B.List_9Wx[r1 >>> 24 & 255];
      t16 = t3[2];
      t17 = r30 & 255;
      if (!(t17 < t2))
        return A.ioore(t00, t17);
      t17 = t00[t17];
      t18 = r0 >>> 8 & 255;
      if (!(t18 < t2))
        return A.ioore(t00, t18);
      t18 = t00[t18];
      t19 = r1 >>> 16 & 255;
      if (!(t19 < t2))
        return A.ioore(t00, t19);
      t19 = t00[t19];
      t00 = B.List_9Wx[r2 >>> 24 & 255];
      t3 = t3[3];
      t2 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(out), out.byteOffset, 16);
      t2.$flags & 2 && A.throwUnsupportedOperation(t2, 11);
      t2.setUint32(outOff, (t20 & 255 ^ (t10 & 255) << 8 ^ (t4 & 255) << 16 ^ t1 << 24 ^ t5) >>> 0, true);
      t5 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(out), out.byteOffset, 16);
      t5.$flags & 2 && A.throwUnsupportedOperation(t5, 11);
      t5.setUint32(outOff + 4, (t6 & 255 ^ (t7 & 255) << 8 ^ (t8 & 255) << 16 ^ t9 << 24 ^ t11) >>> 0, true);
      t11 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(out), out.byteOffset, 16);
      t11.$flags & 2 && A.throwUnsupportedOperation(t11, 11);
      t11.setUint32(outOff + 8, (t12 & 255 ^ (t13 & 255) << 8 ^ (t14 & 255) << 16 ^ t15 << 24 ^ t16) >>> 0, true);
      t16 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(out), out.byteOffset, 16);
      t16.$flags & 2 && A.throwUnsupportedOperation(t16, 11);
      t16.setUint32(outOff + 12, (t17 & 255 ^ (t18 & 255) << 8 ^ (t19 & 255) << 16 ^ t00 << 24 ^ t3) >>> 0, true);
    },
    _decryptBlock$5(input, inOff, out, outOff, kw) {
      var c0, c1, c2, c3, t1, t2, t3, t00, t10, t20, r, r3, t4, t5, t6, t7, t8, t9, r0, r1, r2, t11, t12, t13, t14, t15, t16, t17, t18, t19, t21, bOut;
      type$.List_List_int._as(kw);
      c0 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(input), input.byteOffset, 16).getUint32(inOff, true);
      c1 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(input), input.byteOffset, 16).getUint32(inOff + 4, true);
      c2 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(input), input.byteOffset, 16).getUint32(inOff + 8, true);
      c3 = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(input), input.byteOffset, 16).getUint32(inOff + 12, true);
      t1 = this._rounds;
      t2 = kw.length;
      if (!(t1 < t2))
        return A.ioore(kw, t1);
      t3 = kw[t1];
      t00 = c0 ^ t3[0];
      t10 = c1 ^ t3[1];
      t20 = c2 ^ t3[2];
      r = t1 - 1;
      r3 = c3 ^ t3[3];
      for (t1 = t10; r > 1;) {
        t3 = B.List_kqe[t00 & 255];
        t4 = B.List_kqe[r3 >>> 8 & 255];
        t5 = $._mask32HiBits[8];
        t6 = B.List_kqe[t20 >>> 16 & 255];
        t7 = $._mask32HiBits[16];
        t8 = B.List_kqe[t1 >>> 24 & 255];
        t9 = $._mask32HiBits[24];
        if (!(r < t2))
          return A.ioore(kw, r);
        t10 = kw[r];
        r0 = t3 ^ (t4 >>> 24 | (t4 & t5) << 8) ^ (t6 >>> 16 | (t6 & t7) << 16) ^ (t8 >>> 8 | (t8 & t9) << 24) ^ t10[0];
        t8 = B.List_kqe[t1 & 255];
        t6 = B.List_kqe[t00 >>> 8 & 255];
        t4 = B.List_kqe[r3 >>> 16 & 255];
        t3 = B.List_kqe[t20 >>> 24 & 255];
        r1 = t8 ^ (t6 >>> 24 | (t6 & t5) << 8) ^ (t4 >>> 16 | (t4 & t7) << 16) ^ (t3 >>> 8 | (t3 & t9) << 24) ^ t10[1];
        t3 = B.List_kqe[t20 & 255];
        t4 = B.List_kqe[t1 >>> 8 & 255];
        t6 = B.List_kqe[t00 >>> 16 & 255];
        t8 = B.List_kqe[r3 >>> 24 & 255];
        r2 = t3 ^ (t4 >>> 24 | (t4 & t5) << 8) ^ (t6 >>> 16 | (t6 & t7) << 16) ^ (t8 >>> 8 | (t8 & t9) << 24) ^ t10[2];
        t8 = B.List_kqe[r3 & 255];
        t20 = B.List_kqe[t20 >>> 8 & 255];
        t1 = B.List_kqe[t1 >>> 16 & 255];
        t00 = B.List_kqe[t00 >>> 24 & 255];
        --r;
        r3 = t8 ^ (t20 >>> 24 | (t20 & t5) << 8) ^ (t1 >>> 16 | (t1 & t7) << 16) ^ (t00 >>> 8 | (t00 & t9) << 24) ^ t10[3];
        t10 = B.List_kqe[r0 & 255];
        t00 = B.List_kqe[r3 >>> 8 & 255];
        t1 = B.List_kqe[r2 >>> 16 & 255];
        t20 = B.List_kqe[r1 >>> 24 & 255];
        if (!(r < t2))
          return A.ioore(kw, r);
        t8 = kw[r];
        t00 = t10 ^ (t00 >>> 24 | (t00 & t5) << 8) ^ (t1 >>> 16 | (t1 & t7) << 16) ^ (t20 >>> 8 | (t20 & t9) << 24) ^ t8[0];
        t20 = B.List_kqe[r1 & 255];
        t1 = B.List_kqe[r0 >>> 8 & 255];
        t10 = B.List_kqe[r3 >>> 16 & 255];
        t6 = B.List_kqe[r2 >>> 24 & 255];
        t1 = t20 ^ (t1 >>> 24 | (t1 & t5) << 8) ^ (t10 >>> 16 | (t10 & t7) << 16) ^ (t6 >>> 8 | (t6 & t9) << 24) ^ t8[1];
        t6 = B.List_kqe[r2 & 255];
        t10 = B.List_kqe[r1 >>> 8 & 255];
        t20 = B.List_kqe[r0 >>> 16 & 255];
        t4 = B.List_kqe[r3 >>> 24 & 255];
        t20 = t6 ^ (t10 >>> 24 | (t10 & t5) << 8) ^ (t20 >>> 16 | (t20 & t7) << 16) ^ (t4 >>> 8 | (t4 & t9) << 24) ^ t8[2];
        t4 = B.List_kqe[r3 & 255];
        t10 = B.List_kqe[r2 >>> 8 & 255];
        t6 = B.List_kqe[r1 >>> 16 & 255];
        t3 = B.List_kqe[r0 >>> 24 & 255];
        --r;
        r3 = t4 ^ (t10 >>> 24 | (t10 & t5) << 8) ^ (t6 >>> 16 | (t6 & t7) << 16) ^ (t3 >>> 8 | (t3 & t9) << 24) ^ t8[3];
      }
      t2 = B.List_kqe[t00 & 255];
      t3 = A.rotr32(B.List_kqe[r3 >>> 8 & 255], 24);
      t4 = A.rotr32(B.List_kqe[t20 >>> 16 & 255], 16);
      t5 = A.rotr32(B.List_kqe[t1 >>> 24 & 255], 8);
      if (!(r >= 0 && r < kw.length))
        return A.ioore(kw, r);
      r0 = t2 ^ t3 ^ t4 ^ t5 ^ kw[r][0];
      t5 = B.List_kqe[t1 & 255];
      t4 = A.rotr32(B.List_kqe[t00 >>> 8 & 255], 24);
      t3 = A.rotr32(B.List_kqe[r3 >>> 16 & 255], 16);
      t2 = A.rotr32(B.List_kqe[t20 >>> 24 & 255], 8);
      if (!(r < kw.length))
        return A.ioore(kw, r);
      r1 = t5 ^ t4 ^ t3 ^ t2 ^ kw[r][1];
      t2 = B.List_kqe[t20 & 255];
      t3 = A.rotr32(B.List_kqe[t1 >>> 8 & 255], 24);
      t4 = A.rotr32(B.List_kqe[t00 >>> 16 & 255], 16);
      t5 = A.rotr32(B.List_kqe[r3 >>> 24 & 255], 8);
      if (!(r < kw.length))
        return A.ioore(kw, r);
      r2 = t2 ^ t3 ^ t4 ^ t5 ^ kw[r][2];
      t5 = B.List_kqe[r3 & 255];
      t20 = A.rotr32(B.List_kqe[t20 >>> 8 & 255], 24);
      t1 = A.rotr32(B.List_kqe[t1 >>> 16 & 255], 16);
      t00 = A.rotr32(B.List_kqe[t00 >>> 24 & 255], 8);
      t4 = kw.length;
      if (!(r < t4))
        return A.ioore(kw, r);
      r3 = t5 ^ t20 ^ t1 ^ t00 ^ kw[r][3];
      t00 = B.List_8aB[r0 & 255];
      t1 = this._s;
      t20 = r3 >>> 8 & 255;
      t5 = t1.length;
      if (!(t20 < t5))
        return A.ioore(t1, t20);
      t20 = t1[t20];
      t3 = r2 >>> 16 & 255;
      if (!(t3 < t5))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      t2 = B.List_8aB[r1 >>> 24 & 255];
      if (0 >= t4)
        return A.ioore(kw, 0);
      t4 = kw[0];
      t6 = t4[0];
      t7 = r1 & 255;
      if (!(t7 < t5))
        return A.ioore(t1, t7);
      t7 = t1[t7];
      t8 = r0 >>> 8 & 255;
      if (!(t8 < t5))
        return A.ioore(t1, t8);
      t8 = t1[t8];
      t9 = B.List_8aB[r3 >>> 16 & 255];
      t10 = r2 >>> 24 & 255;
      if (!(t10 < t5))
        return A.ioore(t1, t10);
      t10 = t1[t10];
      t11 = t4[1];
      t12 = r2 & 255;
      if (!(t12 < t5))
        return A.ioore(t1, t12);
      t12 = t1[t12];
      t13 = B.List_8aB[r1 >>> 8 & 255];
      t14 = B.List_8aB[r0 >>> 16 & 255];
      t15 = r3 >>> 24 & 255;
      if (!(t15 < t5))
        return A.ioore(t1, t15);
      t15 = t1[t15];
      t16 = t4[2];
      t17 = B.List_8aB[r3 & 255];
      t18 = r2 >>> 8 & 255;
      if (!(t18 < t5))
        return A.ioore(t1, t18);
      t18 = t1[t18];
      t19 = r1 >>> 16 & 255;
      if (!(t19 < t5))
        return A.ioore(t1, t19);
      t19 = t1[t19];
      t21 = r0 >>> 24 & 255;
      if (!(t21 < t5))
        return A.ioore(t1, t21);
      t21 = t1[t21];
      t4 = t4[3];
      bOut = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(out), out.byteOffset, 16);
      bOut.$flags & 2 && A.throwUnsupportedOperation(bOut, 11);
      bOut.setUint32(outOff, (t00 & 255 ^ (t20 & 255) << 8 ^ (t3 & 255) << 16 ^ t2 << 24 ^ t6) >>> 0, true);
      bOut.setUint32(outOff + 4, (t7 & 255 ^ (t8 & 255) << 8 ^ (t9 & 255) << 16 ^ t10 << 24 ^ t11) >>> 0, true);
      bOut.setUint32(outOff + 8, (t12 & 255 ^ (t13 & 255) << 8 ^ (t14 & 255) << 16 ^ t15 << 24 ^ t16) >>> 0, true);
      bOut.setUint32(outOff + 12, (t17 & 255 ^ (t18 & 255) << 8 ^ (t19 & 255) << 16 ^ t21 << 24 ^ t4) >>> 0, true);
    },
    set$__AESEngine__workingKey_A(__AESEngine__workingKey_A) {
      this.__AESEngine__workingKey_A = type$.List_List_int._as(__AESEngine__workingKey_A);
    },
    set$_s(_s) {
      this._s = type$.List_int._as(_s);
    }
  };
  A.InputStreamBase.prototype = {};
  A.InputStream.prototype = {
    get$length(_) {
      var t1 = this.__InputStream__length_A;
      t1 === $ && A.throwLateFieldNI("_length");
      return t1 - (this.offset - this.start);
    },
    get$isEOS() {
      var t1 = this.offset,
        t2 = this.__InputStream__length_A;
      t2 === $ && A.throwLateFieldNI("_length");
      return t1 >= this.start + t2;
    },
    subset$2(position, $length) {
      var t2, _this = this,
        t1 = _this.start;
      position += t1;
      if ($length < 0) {
        t2 = _this.__InputStream__length_A;
        t2 === $ && A.throwLateFieldNI("_length");
        $length = t2 - (position - t1);
      }
      return A.InputStream$(_this.buffer, _this.byteOrder, $length, position);
    },
    readByte$0() {
      return J.$index$asx(this.buffer, this.offset++);
    },
    readBytes$1(count) {
      var _this = this,
        bytes = _this.subset$2(_this.offset - _this.start, count);
      _this.offset = _this.offset + bytes.get$length(0);
      return bytes;
    },
    readString$2$size$utf8(size, utf8) {
      var str, exception, t1,
        bytes = this.readBytes$1(size).toUint8List$0();
      try {
        str = utf8 ? new A.Utf8Decoder(false).convert$1(bytes) : A.String_String$fromCharCodes(bytes, 0, null);
        return str;
      } catch (exception) {
        t1 = A.String_String$fromCharCodes(bytes, 0, null);
        return t1;
      }
    },
    readString$1$size(size) {
      return this.readString$2$size$utf8(size, true);
    },
    readUint16$0() {
      var _this = this,
        t1 = _this.buffer,
        t2 = J.getInterceptor$asx(t1),
        b1 = t2.$index(t1, _this.offset++) & 255,
        b2 = t2.$index(t1, _this.offset++) & 255;
      if (_this.byteOrder === 1)
        return b1 << 8 | b2;
      return b2 << 8 | b1;
    },
    readUint32$0() {
      var _this = this,
        t1 = _this.buffer,
        t2 = J.getInterceptor$asx(t1),
        b1 = t2.$index(t1, _this.offset++) & 255,
        b2 = t2.$index(t1, _this.offset++) & 255,
        b3 = t2.$index(t1, _this.offset++) & 255,
        b4 = t2.$index(t1, _this.offset++) & 255;
      if (_this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    readUint64$0() {
      var _this = this,
        t1 = _this.buffer,
        t2 = J.getInterceptor$asx(t1),
        b1 = t2.$index(t1, _this.offset++) & 255,
        b2 = t2.$index(t1, _this.offset++) & 255,
        b3 = t2.$index(t1, _this.offset++) & 255,
        b4 = t2.$index(t1, _this.offset++) & 255,
        b5 = t2.$index(t1, _this.offset++) & 255,
        b6 = t2.$index(t1, _this.offset++) & 255,
        b7 = t2.$index(t1, _this.offset++) & 255,
        b8 = t2.$index(t1, _this.offset++) & 255;
      if (_this.byteOrder === 1)
        return (B.JSInt_methods._shlPositive$1(b1, 56) | B.JSInt_methods._shlPositive$1(b2, 48) | B.JSInt_methods._shlPositive$1(b3, 40) | B.JSInt_methods._shlPositive$1(b4, 32) | b5 << 24 | b6 << 16 | b7 << 8 | b8) >>> 0;
      return (B.JSInt_methods._shlPositive$1(b8, 56) | B.JSInt_methods._shlPositive$1(b7, 48) | B.JSInt_methods._shlPositive$1(b6, 40) | B.JSInt_methods._shlPositive$1(b5, 32) | b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toUint8List$0() {
      var t2, t3, end, _this = this,
        len = _this.get$length(0),
        t1 = _this.buffer;
      if (type$.Uint8List._is(t1)) {
        t2 = _this.offset;
        t3 = t1.length;
        if (t2 + len > t3)
          len = t3 - t2;
        return J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(t1), t1.byteOffset + _this.offset, len);
      }
      end = _this.offset + len;
      t2 = J.getInterceptor$asx(t1);
      if (end > t2.get$length(t1))
        end = t2.get$length(t1);
      return new Uint8Array(A._ensureNativeList(t2.sublist$2(t1, _this.offset, end)));
    }
  };
  A.OutputStreamBase.prototype = {};
  A.OutputStream.prototype = {
    writeByte$1(value) {
      var t1, t2, _this = this;
      if (_this.length === _this._output_stream$_buffer.length)
        _this._expandBuffer$0();
      t1 = _this._output_stream$_buffer;
      t2 = _this.length++;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = value & 255;
    },
    writeBytes$1(bytes) {
      var len, j, t1, t2, t3, t4, t5, i, _this = this;
      type$.List_int._as(bytes);
      len = bytes.length;
      for (; j = _this.length, t1 = j + len, t2 = _this._output_stream$_buffer, t3 = t2.length, t1 > t3;)
        _this._expandBuffer$1(t1 - t3);
      if (len === 1) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
      } else if (len === 2) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
      } else if (len === 3) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
      } else if (len === 4) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 3;
        if (3 >= len)
          return A.ioore(bytes, 3);
        t5 = bytes[3];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
      } else if (len === 5) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 3;
        if (3 >= len)
          return A.ioore(bytes, 3);
        t5 = bytes[3];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 4;
        if (4 >= len)
          return A.ioore(bytes, 4);
        t4 = bytes[4];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
      } else if (len === 6) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 3;
        if (3 >= len)
          return A.ioore(bytes, 3);
        t5 = bytes[3];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 4;
        if (4 >= len)
          return A.ioore(bytes, 4);
        t4 = bytes[4];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 5;
        if (5 >= len)
          return A.ioore(bytes, 5);
        t5 = bytes[5];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
      } else if (len === 7) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 3;
        if (3 >= len)
          return A.ioore(bytes, 3);
        t5 = bytes[3];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 4;
        if (4 >= len)
          return A.ioore(bytes, 4);
        t4 = bytes[4];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 5;
        if (5 >= len)
          return A.ioore(bytes, 5);
        t5 = bytes[5];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 6;
        if (6 >= len)
          return A.ioore(bytes, 6);
        t4 = bytes[6];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
      } else if (len === 8) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 3;
        if (3 >= len)
          return A.ioore(bytes, 3);
        t5 = bytes[3];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 4;
        if (4 >= len)
          return A.ioore(bytes, 4);
        t4 = bytes[4];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 5;
        if (5 >= len)
          return A.ioore(bytes, 5);
        t5 = bytes[5];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 6;
        if (6 >= len)
          return A.ioore(bytes, 6);
        t4 = bytes[6];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 7;
        if (7 >= len)
          return A.ioore(bytes, 7);
        t5 = bytes[7];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
      } else if (len === 9) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 3;
        if (3 >= len)
          return A.ioore(bytes, 3);
        t5 = bytes[3];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 4;
        if (4 >= len)
          return A.ioore(bytes, 4);
        t4 = bytes[4];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 5;
        if (5 >= len)
          return A.ioore(bytes, 5);
        t5 = bytes[5];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 6;
        if (6 >= len)
          return A.ioore(bytes, 6);
        t4 = bytes[6];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 7;
        if (7 >= len)
          return A.ioore(bytes, 7);
        t5 = bytes[7];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 8;
        if (8 >= len)
          return A.ioore(bytes, 8);
        t4 = bytes[8];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
      } else if (len === 10) {
        if (0 >= len)
          return A.ioore(bytes, 0);
        t4 = bytes[0];
        t2.$flags & 2 && A.throwUnsupportedOperation(t2);
        if (!(j >= 0 && j < t3))
          return A.ioore(t2, j);
        t2[j] = t4;
        t4 = j + 1;
        if (1 >= len)
          return A.ioore(bytes, 1);
        t5 = bytes[1];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 2;
        if (2 >= len)
          return A.ioore(bytes, 2);
        t4 = bytes[2];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 3;
        if (3 >= len)
          return A.ioore(bytes, 3);
        t5 = bytes[3];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 4;
        if (4 >= len)
          return A.ioore(bytes, 4);
        t4 = bytes[4];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 5;
        if (5 >= len)
          return A.ioore(bytes, 5);
        t5 = bytes[5];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 6;
        if (6 >= len)
          return A.ioore(bytes, 6);
        t4 = bytes[6];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 7;
        if (7 >= len)
          return A.ioore(bytes, 7);
        t5 = bytes[7];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
        t5 = j + 8;
        if (8 >= len)
          return A.ioore(bytes, 8);
        t4 = bytes[8];
        if (!(t5 < t3))
          return A.ioore(t2, t5);
        t2[t5] = t4;
        t4 = j + 9;
        if (9 >= len)
          return A.ioore(bytes, 9);
        t5 = bytes[9];
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t2[t4] = t5;
      } else
        for (t4 = t2.$flags | 0, i = 0; i < len; ++i, ++j) {
          if (!(i < len))
            return A.ioore(bytes, i);
          t5 = bytes[i];
          t4 & 2 && A.throwUnsupportedOperation(t2);
          if (!(j >= 0 && j < t3))
            return A.ioore(t2, j);
          t2[j] = t5;
        }
      _this.length = t1;
    },
    writeInputStream$1(stream) {
      var t2, t3, t4, t5, _this = this,
        t1 = stream.start;
      while (true) {
        t2 = _this.length;
        t3 = stream.__InputStream__length_A;
        t3 === $ && A.throwLateFieldNI("_length");
        t3 = t2 + (t3 - (stream.offset - t1));
        t4 = _this._output_stream$_buffer;
        t5 = t4.length;
        if (!(t3 > t5))
          break;
        _this._expandBuffer$1(t3 - t5);
      }
      B.NativeUint8List_methods.setRange$4(t4, t2, t2 + stream.get$length(0), stream.buffer, stream.offset);
      _this.length = _this.length + stream.get$length(0);
    },
    subset$2(start, end) {
      var _this = this;
      if (start < 0)
        start = _this.length + start;
      if (end == null)
        end = _this.length;
      else if (end < 0)
        end = _this.length + end;
      return J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(_this._output_stream$_buffer), start, end - start);
    },
    subset$1(start) {
      return this.subset$2(start, null);
    },
    _expandBuffer$1(required) {
      var blockSize = required != null ? required > 32768 ? required : 32768 : 32768,
        t1 = this._output_stream$_buffer,
        t2 = t1.length,
        newBuffer = new Uint8Array((t2 + blockSize) * 2);
      B.NativeUint8List_methods.setRange$3(newBuffer, 0, t2, t1);
      this._output_stream$_buffer = newBuffer;
    },
    _expandBuffer$0() {
      return this._expandBuffer$1(null);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.ZipDirectory.prototype = {
    ZipDirectory$read$2$password(input, password) {
      var t2, len, dirStream, t3, t4, t5, t6, _i, file, _this = this,
        t1 = _this._findEocdrSignature$1(input);
      _this.filePosition = t1;
      t2 = input.start;
      input.offset = t2 + t1;
      input.readUint32$0();
      _this.numberOfThisDisk = input.readUint16$0();
      input.readUint16$0();
      _this.totalCentralDirectoryEntriesOnThisDisk = input.readUint16$0();
      input.readUint16$0();
      _this.__ZipDirectory_centralDirectorySize_A = input.readUint32$0();
      _this.__ZipDirectory_centralDirectoryOffset_A = input.readUint32$0();
      len = input.readUint16$0();
      if (len > 0)
        input.readString$2$size$utf8(len, false);
      if (_this.__ZipDirectory_centralDirectoryOffset_A === 4294967295 || _this.__ZipDirectory_centralDirectorySize_A === 4294967295 || _this.totalCentralDirectoryEntriesOnThisDisk === 65535 || _this.numberOfThisDisk === 65535)
        _this._readZip64Data$1(input);
      dirStream = A.InputStream$(input.subset$2(_this.__ZipDirectory_centralDirectoryOffset_A, _this.__ZipDirectory_centralDirectorySize_A).toUint8List$0(), 0, null, 0);
      t1 = dirStream.start;
      t3 = _this.fileHeaders;
      t4 = type$.JSArray_int;
      while (true) {
        t5 = dirStream.offset;
        t6 = dirStream.__InputStream__length_A;
        t6 === $ && A.throwLateFieldNI("_length");
        if (!(t5 < t1 + t6))
          break;
        if (dirStream.readUint32$0() !== 33639248)
          break;
        t5 = new A.ZipFileHeader(A._setArrayType([], t4));
        t5.ZipFileHeader$1(dirStream);
        B.JSArray_methods.add$1(t3, t5);
      }
      for (t1 = t3.length, _i = 0; _i < t3.length; t3.length === t1 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
        file = t3[_i];
        t5 = file.localHeaderOffset;
        t5.toString;
        input.offset = t2 + t5;
        t5 = new A.ZipFile(A._setArrayType([], t4), file, A._setArrayType([0, 0, 0], t4));
        t5.ZipFile$3(input, file, password);
        file.file = t5;
      }
    },
    _readZip64Data$1(input) {
      var zip64, zip64DirOffset, zip64DiskNumber, zip64NumEntriesOnDisk, dirSize, dirOffset, _this = this,
        t1 = input.start,
        ip = input.offset - t1,
        locPos = _this.filePosition - 20;
      if (locPos < 0)
        return;
      zip64 = input.subset$2(locPos, 20);
      if (zip64.readUint32$0() !== 117853008) {
        input.offset = t1 + ip;
        return;
      }
      zip64.readUint32$0();
      zip64DirOffset = zip64.readUint64$0();
      zip64.readUint32$0();
      input.offset = t1 + zip64DirOffset;
      if (input.readUint32$0() !== 101075792) {
        input.offset = t1 + ip;
        return;
      }
      input.readUint64$0();
      input.readUint16$0();
      input.readUint16$0();
      zip64DiskNumber = input.readUint32$0();
      input.readUint32$0();
      zip64NumEntriesOnDisk = input.readUint64$0();
      input.readUint64$0();
      dirSize = input.readUint64$0();
      dirOffset = input.readUint64$0();
      _this.numberOfThisDisk = zip64DiskNumber;
      _this.totalCentralDirectoryEntriesOnThisDisk = zip64NumEntriesOnDisk;
      _this.__ZipDirectory_centralDirectorySize_A = dirSize;
      _this.__ZipDirectory_centralDirectoryOffset_A = dirOffset;
      input.offset = t1 + ip;
    },
    _findEocdrSignature$1(input) {
      var ip,
        t1 = input.offset,
        t2 = input.start;
      for (ip = input.get$length(0) - 5; ip >= 0; --ip) {
        input.offset = t2 + ip;
        if (input.readUint32$0() === 101010256) {
          input.offset = t2 + (t1 - t2);
          return ip;
        }
      }
      throw A.wrapException(A.ArchiveException$("Could not find End of Central Directory Record"));
    }
  };
  A.AesHeader.prototype = {};
  A.ZipFile.prototype = {
    ZipFile$3(input, header, password) {
      var fnLen, exLen, t2, t3, extra, id, size, bytes, encryptionStrength, compressionMethod, sigOrCrc, _this = this, _null = null,
        t1 = input.readUint32$0();
      _this.signature = t1;
      if (t1 !== 67324752)
        throw A.wrapException(A.ArchiveException$("Invalid Zip Signature"));
      input.readUint16$0();
      _this.flags = input.readUint16$0();
      _this.compressionMethod = input.readUint16$0();
      _this.lastModFileTime = input.readUint16$0();
      _this.lastModFileDate = input.readUint16$0();
      _this.crc32 = input.readUint32$0();
      _this.compressedSize = input.readUint32$0();
      _this.uncompressedSize = input.readUint32$0();
      fnLen = input.readUint16$0();
      exLen = input.readUint16$0();
      _this.filename = input.readString$1$size(fnLen);
      _this.set$extraField(input.readBytes$1(exLen).toUint8List$0());
      t1 = _this.header;
      t2 = t1 == null;
      t3 = t2 ? _null : t1.compressedSize;
      _this.compressedSize = t3 == null ? _this.compressedSize : t3;
      t2 = t2 ? _null : t1.uncompressedSize;
      _this.uncompressedSize = t2 == null ? _this.uncompressedSize : t2;
      _this._encryptionType = (_this.flags & 1) !== 0 ? 1 : 0;
      _this._password = password;
      t1 = t1.compressedSize;
      t1.toString;
      _this.__ZipFile__rawContent_A = input.readBytes$1(t1);
      if (_this._encryptionType !== 0 && exLen > 2) {
        extra = A.InputStream$(_this.extraField, 0, _null, 0);
        t1 = extra.start;
        while (true) {
          t2 = extra.offset;
          t3 = extra.__InputStream__length_A;
          t3 === $ && A.throwLateFieldNI("_length");
          if (!(t2 < t1 + t3))
            break;
          id = extra.readUint16$0();
          size = extra.readUint16$0();
          bytes = extra.subset$2(extra.offset - t1, size);
          t2 = extra.offset;
          t3 = bytes.__InputStream__length_A;
          t3 === $ && A.throwLateFieldNI("_length");
          extra.offset = t2 + (t3 - (bytes.offset - bytes.start));
          if (id === 39169) {
            bytes.readUint16$0();
            bytes.readString$1$size(2);
            encryptionStrength = J.$index$asx(bytes.buffer, bytes.offset++);
            compressionMethod = bytes.readUint16$0();
            _this._encryptionType = 2;
            _this._aesHeader = new A.AesHeader(encryptionStrength, compressionMethod);
            _this.compressionMethod = compressionMethod;
          }
        }
      }
      if ((_this.flags & 8) !== 0) {
        sigOrCrc = input.readUint32$0();
        if (sigOrCrc === 134695760)
          _this.crc32 = input.readUint32$0();
        else
          _this.crc32 = sigOrCrc;
        _this.compressedSize = input.readUint32$0();
        _this.uncompressedSize = input.readUint32$0();
      }
      t1 = _this.header;
      t1 = t1 == null ? _null : t1.filename;
      _this.filename = t1 == null ? _this.filename : t1;
    },
    get$content(_) {
      var t1, t2, salt, keySize, verify, dataBytes, dataMac, bytes, derivedKey, keyData, hmacKeyData, aes, mac, output, _this = this,
        _s11_ = "_rawContent";
      if (_this._zip_file$_content == null) {
        if (_this._encryptionType !== 0) {
          t1 = _this.__ZipFile__rawContent_A;
          t1 === $ && A.throwLateFieldNI(_s11_);
          if (t1.get$length(0) <= 0) {
            _this.set$_zip_file$_content(0, _this.__ZipFile__rawContent_A.toUint8List$0());
            _this._encryptionType = 0;
          } else {
            t1 = _this._encryptionType;
            if (t1 === 1)
              _this.__ZipFile__rawContent_A = _this._decodeZipCrypto$1(_this.__ZipFile__rawContent_A);
            else if (t1 === 2) {
              t1 = _this.__ZipFile__rawContent_A;
              t2 = _this._aesHeader.encryptionStrength;
              if (t2 === 1) {
                salt = t1.readBytes$1(8).toUint8List$0();
                keySize = 16;
              } else if (t2 === 2) {
                salt = t1.readBytes$1(12).toUint8List$0();
                keySize = 24;
              } else {
                salt = t1.readBytes$1(16).toUint8List$0();
                keySize = 32;
              }
              verify = t1.readBytes$1(2).toUint8List$0();
              dataBytes = t1.readBytes$1(t1.get$length(0) - 10);
              dataMac = t1.readBytes$1(10);
              bytes = dataBytes.toUint8List$0();
              t1 = _this._password;
              t1.toString;
              derivedKey = A.ZipFile_deriveKey(t1, salt, keySize);
              keyData = new Uint8Array(A._ensureNativeList(B.NativeUint8List_methods.sublist$2(derivedKey, 0, keySize)));
              t1 = keySize * 2;
              hmacKeyData = new Uint8Array(A._ensureNativeList(B.NativeUint8List_methods.sublist$2(derivedKey, keySize, t1)));
              if (!A.Uint8ListEquality_equals(B.NativeUint8List_methods.sublist$2(derivedKey, t1, t1 + 2), verify))
                A.throwExpression(A.Exception_Exception("password error"));
              t1 = new Uint8Array(16);
              aes = new A.Aes(t1, new Uint8Array(16), keyData);
              t1 = type$.int;
              t2 = J.JSArray_JSArray$fixed(0, t1);
              t2 = aes.aesEngine = new A.AESEngine(t2);
              t2._forEncryption = true;
              t2.set$__AESEngine__workingKey_A(type$.List_List_int._as(t2.generateWorkingKey$2(true, new A.KeyParameter(keyData))));
              if (t2._forEncryption)
                t2.set$_s(A.List_List$from(B.List_9Wx, true, t1));
              else
                t2.set$_s(A.List_List$from(B.List_8aB, true, t1));
              mac = A.HMac$(A.SHA1Digest$(), 64);
              mac.init$1(new A.KeyParameter(hmacKeyData));
              aes.__Aes__macGen_A = mac;
              aes.processData$3(bytes, 0, bytes.length);
              t1 = dataMac.toUint8List$0();
              t2 = aes.__Aes_mac_A;
              t2 === $ && A.throwLateFieldNI("mac");
              if (!A.Uint8ListEquality_equals(t1, t2))
                A.throwExpression(A.Exception_Exception("macs don't match"));
              _this.__ZipFile__rawContent_A = A.InputStream$(bytes, 0, null, 0);
            }
            _this._encryptionType = 0;
          }
        }
        t1 = _this.compressionMethod;
        if (t1 === 8) {
          t1 = _this.__ZipFile__rawContent_A;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t1 = A.Inflate$(t1.toUint8List$0()).output;
          _this.set$_zip_file$_content(0, type$.List_int._as(J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(t1._output_stream$_buffer), 0, t1.length)));
          _this.compressionMethod = 0;
        } else if (t1 === 12) {
          output = A.OutputStream$(32768);
          t1 = _this.__ZipFile__rawContent_A;
          t1 === $ && A.throwLateFieldNI(_s11_);
          new A.BZip2Decoder().decodeStream$2(t1, output);
          _this.set$_zip_file$_content(0, J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(output._output_stream$_buffer), 0, output.length));
          _this.compressionMethod = 0;
        } else if (t1 === 0) {
          t1 = _this.__ZipFile__rawContent_A;
          t1 === $ && A.throwLateFieldNI(_s11_);
          _this.set$_zip_file$_content(0, t1.toUint8List$0());
        } else
          throw A.wrapException(A.ArchiveException$("Unsupported zip compression method " + t1));
      }
      t1 = _this._zip_file$_content;
      t1.toString;
      return t1;
    },
    toString$0(_) {
      return this.filename;
    },
    _updateKeys$1(c) {
      var t1 = this._zip_file$_keys;
      B.JSArray_methods.$indexSet(t1, 0, A.CRC32(t1[0], c));
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + (t1[0] & 255));
      B.JSArray_methods.$indexSet(t1, 1, t1[1] * 134775813 + 1);
      B.JSArray_methods.$indexSet(t1, 2, A.CRC32(t1[2], t1[1] >>> 24 & 255));
    },
    _decryptByte$0() {
      var temp = this._zip_file$_keys[2] & 65535 | 2;
      return temp * (temp ^ 1) >>> 8 & 255;
    },
    _decodeZipCrypto$1(input) {
      var i, t1, bytes, temp, _this = this,
        _s11_ = "_rawContent";
      for (i = 0; i < 12; ++i) {
        t1 = _this.__ZipFile__rawContent_A;
        t1 === $ && A.throwLateFieldNI(_s11_);
        _this._updateKeys$1((J.$index$asx(t1.buffer, t1.offset++) ^ _this._decryptByte$0()) >>> 0);
      }
      t1 = _this.__ZipFile__rawContent_A;
      t1 === $ && A.throwLateFieldNI(_s11_);
      bytes = t1.toUint8List$0();
      for (t1 = bytes.length, i = 0; i < t1; ++i) {
        temp = bytes[i] ^ _this._decryptByte$0();
        _this._updateKeys$1(temp);
        bytes.$flags & 2 && A.throwUnsupportedOperation(bytes);
        bytes[i] = temp;
      }
      return A.InputStream$(bytes, 0, null, 0);
    },
    set$extraField(extraField) {
      this.extraField = type$.List_int._as(extraField);
    },
    set$_zip_file$_content(_, _content) {
      this._zip_file$_content = type$.nullable_List_int._as(_content);
    }
  };
  A.ZipFileHeader.prototype = {
    ZipFileHeader$1(input) {
      var fnameLen, extraLen, commentLen, extra, t1, t2, t3, id, size, bytes, _this = this;
      _this.versionMadeBy = input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint32$0();
      _this.compressedSize = input.readUint32$0();
      _this.uncompressedSize = input.readUint32$0();
      fnameLen = input.readUint16$0();
      extraLen = input.readUint16$0();
      commentLen = input.readUint16$0();
      _this.diskNumberStart = input.readUint16$0();
      input.readUint16$0();
      _this.externalFileAttributes = input.readUint32$0();
      _this.localHeaderOffset = input.readUint32$0();
      if (fnameLen > 0)
        _this.filename = input.readString$1$size(fnameLen);
      if (extraLen > 0) {
        _this.set$extraField(input.readBytes$1(extraLen).toUint8List$0());
        extra = A.InputStream$(_this.extraField, 0, null, 0);
        t1 = extra.start;
        while (true) {
          t2 = extra.offset;
          t3 = extra.__InputStream__length_A;
          t3 === $ && A.throwLateFieldNI("_length");
          if (!(t2 < t1 + t3))
            break;
          id = extra.readUint16$0();
          size = extra.readUint16$0();
          bytes = extra.subset$2(extra.offset - t1, size);
          t2 = extra.offset;
          t3 = bytes.__InputStream__length_A;
          t3 === $ && A.throwLateFieldNI("_length");
          extra.offset = t2 + (t3 - (bytes.offset - bytes.start));
          if (id === 1) {
            if (size >= 8 && _this.uncompressedSize === 4294967295) {
              _this.uncompressedSize = bytes.readUint64$0();
              size -= 8;
            }
            if (size >= 8 && _this.compressedSize === 4294967295) {
              _this.compressedSize = bytes.readUint64$0();
              size -= 8;
            }
            if (size >= 8 && _this.localHeaderOffset === 4294967295) {
              _this.localHeaderOffset = bytes.readUint64$0();
              size -= 8;
            }
            if (size >= 4 && _this.diskNumberStart === 65535)
              _this.diskNumberStart = bytes.readUint32$0();
          }
        }
      }
      if (commentLen > 0)
        input.readString$1$size(commentLen);
    },
    toString$0(_) {
      return this.filename;
    },
    set$extraField(extraField) {
      this.extraField = type$.List_int._as(extraField);
    }
  };
  A.ZipDecoder.prototype = {
    decodeBuffer$3$password$verify(input, password, verify) {
      var archive, t2, t3, _i, zfh, t4, t5, t6, t7, t8, file,
        t1 = new A.ZipDirectory(A._setArrayType([], type$.JSArray_ZipFileHeader));
      t1.ZipDirectory$read$2$password(input, password);
      this.__ZipDecoder_directory_A = t1;
      archive = new A.Archive(A._setArrayType([], type$.JSArray_ArchiveFile), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int));
      for (t1 = this.__ZipDecoder_directory_A.fileHeaders, t2 = t1.length, t3 = type$.List_int, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        zfh = t1[_i];
        t4 = zfh.file;
        t4.toString;
        t5 = zfh.externalFileAttributes;
        t5.toString;
        t6 = t4.filename;
        t7 = t4.uncompressedSize;
        t7.toString;
        t8 = t4.compressionMethod;
        file = new A.ArchiveFile(t6, t7, B.JSInt_methods._tdivFast$1(Date.now(), 1000), t8);
        file.ArchiveFile$4(t6, t7, t4, t8);
        t5 = t5 >>> 16;
        file.mode = t5;
        if (zfh.versionMadeBy >>> 8 === 3)
          switch (t5 & 61440) {
            case 32768:
            case 0:
              break;
            case 40960:
              t5 = file._content;
              if ((t5 instanceof A.ZipFile ? file._content = t5.get$content(0) : t5) == null)
                file.decompress$0();
              t5 = t3._as(t3._as(file._content));
              new A._Utf8Decoder(false)._convertGeneral$4(t5, 0, null, true);
              break;
          }
        else
          B.JSString_methods.endsWith$1(file.name, "/");
        file.lastModTime = (t4.lastModFileDate << 16 | t4.lastModFileTime) >>> 0;
        archive.addFile$1(0, file);
      }
      return archive;
    }
  };
  A.HuffmanTable.prototype = {
    HuffmanTable$1(lengths) {
      var i, t1, size, t2, bitLength, code, skip, t3, rtemp, reversed, j, t4, _this = this,
        listSize = lengths.length;
      for (i = 0; i < listSize; ++i) {
        t1 = lengths[i];
        if (t1 > _this.maxCodeLength)
          _this.maxCodeLength = t1;
        if (t1 < _this.minCodeLength)
          _this.minCodeLength = t1;
      }
      t1 = _this.maxCodeLength;
      size = B.JSInt_methods.$shl(1, t1);
      t2 = _this.__HuffmanTable_table_A = new Uint32Array(size);
      for (bitLength = 1, code = 0, skip = 2; bitLength <= t1;) {
        for (t3 = bitLength << 16, i = 0; i < listSize; ++i)
          if (lengths[i] === bitLength) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t4 = (t3 | i) >>> 0, j = reversed; j < size; j += skip) {
              if (!(j >= 0))
                return A.ioore(t2, j);
              t2[j] = t4;
            }
            ++code;
          }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    }
  };
  A.Inflate.prototype = {
    _inflate$0() {
      var t1, t2, t3, _this = this;
      _this._bitBufferLen = _this._bitBuffer = 0;
      if (!_this.inputSet)
        return;
      while (true) {
        t1 = _this.__Inflate_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        t2 = t1.offset;
        t3 = t1.__InputStream__length_A;
        t3 === $ && A.throwLateFieldNI("_length");
        if (!(t2 < t1.start + t3))
          break;
        if (!_this._parseBlock$0())
          break;
      }
    },
    _parseBlock$0() {
      var blockHeader, _this = this,
        t1 = _this.__Inflate_input_A;
      t1 === $ && A.throwLateFieldNI("input");
      if (t1.get$isEOS())
        return false;
      blockHeader = _this._readBits$1(3);
      switch (B.JSInt_methods._shrOtherPositive$1(blockHeader, 1)) {
        case 0:
          if (_this._parseUncompressedBlock$0() === -1)
            return false;
          break;
        case 1:
          if (_this._decodeHuffman$2(_this._fixedLiteralLengthTable, _this._fixedDistanceTable) === -1)
            return false;
          break;
        case 2:
          if (_this._parseDynamicHuffmanBlock$0() === -1)
            return false;
          break;
        default:
          return false;
      }
      return (blockHeader & 1) === 0;
    },
    _readBits$1($length) {
      var t1, t2, t3, octet, _this = this;
      if ($length === 0)
        return 0;
      for (; t1 = _this._bitBufferLen, t1 < $length;) {
        t1 = _this.__Inflate_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        t2 = t1.offset;
        t3 = t1.__InputStream__length_A;
        t3 === $ && A.throwLateFieldNI("_length");
        if (t2 >= t1.start + t3)
          return -1;
        t1.offset = t2 + 1;
        octet = J.$index$asx(t1.buffer, t2);
        t1 = _this._bitBuffer;
        t2 = _this._bitBufferLen;
        _this._bitBuffer = (t1 | B.JSInt_methods.$shl(octet, t2)) >>> 0;
        _this._bitBufferLen = t2 + 8;
      }
      t2 = _this._bitBuffer;
      t3 = B.JSInt_methods._shlPositive$1(1, $length);
      _this._bitBuffer = B.JSInt_methods._shrBothPositive$1(t2, $length);
      _this._bitBufferLen = t1 - $length;
      return (t2 & t3 - 1) >>> 0;
    },
    _readCodeByTable$1(table) {
      var maxCodeLength, t2, t3, t4, octet, codeWithLength, codeLength, _this = this,
        t1 = table.__HuffmanTable_table_A;
      t1 === $ && A.throwLateFieldNI("table");
      maxCodeLength = table.maxCodeLength;
      for (; t2 = _this._bitBufferLen, t2 < maxCodeLength;) {
        t2 = _this.__Inflate_input_A;
        t2 === $ && A.throwLateFieldNI("input");
        t3 = t2.offset;
        t4 = t2.__InputStream__length_A;
        t4 === $ && A.throwLateFieldNI("_length");
        if (t3 >= t2.start + t4)
          return -1;
        t2.offset = t3 + 1;
        octet = J.$index$asx(t2.buffer, t3);
        t2 = _this._bitBuffer;
        t3 = _this._bitBufferLen;
        _this._bitBuffer = (t2 | B.JSInt_methods.$shl(octet, t3)) >>> 0;
        _this._bitBufferLen = t3 + 8;
      }
      t3 = _this._bitBuffer;
      t4 = (t3 & B.JSInt_methods.$shl(1, maxCodeLength) - 1) >>> 0;
      if (!(t4 < t1.length))
        return A.ioore(t1, t4);
      codeWithLength = t1[t4];
      codeLength = codeWithLength >>> 16;
      _this._bitBuffer = B.JSInt_methods._shrBothPositive$1(t3, codeLength);
      _this._bitBufferLen = t2 - codeLength;
      return codeWithLength & 65535;
    },
    _parseUncompressedBlock$0() {
      var len, t1, _this = this;
      _this._bitBufferLen = _this._bitBuffer = 0;
      len = _this._readBits$1(16);
      t1 = _this._readBits$1(16);
      if (len !== 0 && len !== (t1 ^ 65535) >>> 0)
        return -1;
      t1 = _this.__Inflate_input_A;
      t1 === $ && A.throwLateFieldNI("input");
      if (len > t1.get$length(0))
        return -1;
      _this.output.writeInputStream$1(_this.__Inflate_input_A.readBytes$1(len));
      return 0;
    },
    _parseDynamicHuffmanBlock$0() {
      var numDistanceCodes, numCodeLengths, codeLengths, i, len, t1, codeLengthsTable, litLenDistLengths, litlenLengths, distLengths, _this = this,
        numLitLengthCodes = _this._readBits$1(5);
      if (numLitLengthCodes === -1)
        return -1;
      numLitLengthCodes += 257;
      if (numLitLengthCodes > 288)
        return -1;
      numDistanceCodes = _this._readBits$1(5);
      if (numDistanceCodes === -1)
        return -1;
      ++numDistanceCodes;
      if (numDistanceCodes > 32)
        return -1;
      numCodeLengths = _this._readBits$1(4);
      if (numCodeLengths === -1)
        return -1;
      numCodeLengths += 4;
      if (numCodeLengths > 19)
        return -1;
      codeLengths = new Uint8Array(19);
      for (i = 0; i < numCodeLengths; ++i) {
        len = _this._readBits$1(3);
        if (len === -1)
          return -1;
        t1 = B.List_O5O[i];
        if (!(t1 < 19))
          return A.ioore(codeLengths, t1);
        codeLengths[t1] = len;
      }
      codeLengthsTable = A.HuffmanTable$(codeLengths);
      t1 = numLitLengthCodes + numDistanceCodes;
      litLenDistLengths = new Uint8Array(t1);
      litlenLengths = J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(litLenDistLengths), 0, numLitLengthCodes);
      distLengths = J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(litLenDistLengths), numLitLengthCodes, numDistanceCodes);
      if (_this._decode$3(t1, codeLengthsTable, litLenDistLengths) === -1)
        return -1;
      return _this._decodeHuffman$2(A.HuffmanTable$(litlenLengths), A.HuffmanTable$(distLengths));
    },
    _decodeHuffman$2(litlen, dist) {
      var t1, code, ti, codeLength, distCode, distance, t2, _this = this;
      for (t1 = _this.output; true;) {
        code = _this._readCodeByTable$1(litlen);
        if (code < 0 || code > 285)
          return -1;
        if (code === 256)
          break;
        if (code < 256) {
          t1.writeByte$1(code & 255);
          continue;
        }
        ti = code - 257;
        if (!(ti >= 0 && ti < 29))
          return A.ioore(B.List_mlp, ti);
        codeLength = B.List_mlp[ti] + _this._readBits$1(B.List_LjY[ti]);
        distCode = _this._readCodeByTable$1(dist);
        if (distCode < 0 || distCode > 29)
          return -1;
        if (!(distCode >= 0 && distCode < 30))
          return A.ioore(B.List_Wv6, distCode);
        distance = B.List_Wv6[distCode] + _this._readBits$1(B.List_lnn0[distCode]);
        for (t2 = -distance; codeLength > distance;) {
          t1.writeBytes$1(t1.subset$1(t2));
          codeLength -= distance;
        }
        if (codeLength === distance)
          t1.writeBytes$1(t1.subset$1(t2));
        else
          t1.writeBytes$1(t1.subset$2(t2, codeLength - distance));
      }
      for (; t1 = _this._bitBufferLen, t1 >= 8;) {
        _this._bitBufferLen = t1 - 8;
        t1 = _this.__Inflate_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        if (--t1.offset < 0)
          t1.offset = 0;
      }
      return 0;
    },
    _decode$3(num, table, codeLengths) {
      var prev, i, code, prev0, repeat, t1, repeat0, i0, _this = this;
      type$.List_int._as(codeLengths);
      for (prev = 0, i = 0; i < num;) {
        code = _this._readCodeByTable$1(table);
        if (code === -1)
          return -1;
        prev0 = 0;
        switch (code) {
          case 16:
            repeat = _this._readBits$1(2);
            if (repeat === -1)
              return -1;
            repeat += 3;
            for (t1 = codeLengths.$flags | 0; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              t1 & 2 && A.throwUnsupportedOperation(codeLengths);
              if (!(i >= 0 && i < codeLengths.length))
                return A.ioore(codeLengths, i);
              codeLengths[i] = prev;
            }
            break;
          case 17:
            repeat = _this._readBits$1(3);
            if (repeat === -1)
              return -1;
            repeat += 3;
            for (t1 = codeLengths.$flags | 0; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              t1 & 2 && A.throwUnsupportedOperation(codeLengths);
              if (!(i >= 0 && i < codeLengths.length))
                return A.ioore(codeLengths, i);
              codeLengths[i] = 0;
            }
            prev = prev0;
            break;
          case 18:
            repeat = _this._readBits$1(7);
            if (repeat === -1)
              return -1;
            repeat += 11;
            for (t1 = codeLengths.$flags | 0; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              t1 & 2 && A.throwUnsupportedOperation(codeLengths);
              if (!(i >= 0 && i < codeLengths.length))
                return A.ioore(codeLengths, i);
              codeLengths[i] = 0;
            }
            prev = prev0;
            break;
          default:
            if (code < 0 || code > 15)
              return -1;
            i0 = i + 1;
            codeLengths.$flags & 2 && A.throwUnsupportedOperation(codeLengths);
            if (!(i >= 0 && i < codeLengths.length))
              return A.ioore(codeLengths, i);
            codeLengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return 0;
    }
  };
  A.CancelationToken.prototype = {
    throwIfCanceled$0() {
      var t1 = this.__squadron_cancelation_token$_exception;
      if (t1 != null)
        throw A.wrapException(t1);
    }
  };
  A.DefaultEquality.prototype = {};
  A.ListEquality.prototype = {
    equals$2(list1, list2) {
      var $length, t2, i,
        t1 = this.$ti._eval$1("List<1>?");
      t1._as(list1);
      t1._as(list2);
      if (list1 == null ? list2 == null : list1 === list2)
        return true;
      if (list1 == null || list2 == null)
        return false;
      t1 = J.getInterceptor$asx(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$asx(list2);
      if ($length !== t2.get$length(list2))
        return false;
      for (i = 0; i < $length; ++i)
        if (!J.$eq$(t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    hash$1(_, list) {
      var t1, hash, i;
      this.$ti._eval$1("List<1>?")._as(list);
      for (t1 = J.getInterceptor$asx(list), hash = 0, i = 0; i < t1.get$length(list); ++i) {
        hash = hash + J.get$hashCode$(t1.$index(list, i)) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  A._DelegatingIterableBase.prototype = {
    cast$1$0(_, $T) {
      var t1 = this._base;
      return new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>"));
    },
    elementAt$1(_, index) {
      var t1 = this._base;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    get$isEmpty(_) {
      return this._base.length === 0;
    },
    get$isNotEmpty(_) {
      return this._base.length !== 0;
    },
    get$iterator(_) {
      var t1 = this._base;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length(_) {
      return this._base.length;
    },
    map$1$1(_, f, $T) {
      var t1 = this._base,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._bind$1($T)._eval$1("1(2)")._as(this.$ti._bind$1($T)._eval$1("1(2)")._as(f)), t2._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(_, f) {
      return this.map$1$1(0, f, type$.dynamic);
    },
    skip$1(_, n) {
      var t1 = this._base;
      return A.SubListIterable$(t1, n, null, A._arrayInstanceType(t1)._precomputed1);
    },
    toList$1$growable(_, growable) {
      var t1 = this._base;
      t1 = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this._base, $T._eval$1("WhereTypeIterable<0>"));
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this._base, "[", "]");
    },
    $isIterable: 1
  };
  A.DelegatingList.prototype = {
    $index(_, index) {
      var t1 = this._base;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $indexSet(_, index, value) {
      B.JSArray_methods.$indexSet(this._base, index, this.$ti._precomputed1._as(value));
    },
    add$1(_, value) {
      B.JSArray_methods.add$1(this._base, this.$ti._precomputed1._as(value));
    },
    addAll$1(_, iterable) {
      B.JSArray_methods.addAll$1(this._base, this.$ti._eval$1("Iterable<1>")._as(iterable));
    },
    cast$1$0(_, $T) {
      var t1 = this._base;
      return new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>"));
    },
    replaceRange$3(_, start, end, iterable) {
      B.JSArray_methods.replaceRange$3(this._base, start, end, this.$ti._eval$1("Iterable<1>")._as(iterable));
    },
    get$reversed(_) {
      var t1 = this._base;
      return new A.ReversedListIterable(t1, A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>"));
    },
    sublist$2(_, start, end) {
      return B.JSArray_methods.sublist$2(this._base, start, end);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A.Equatable.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other)
        t1 = other instanceof A.Equatable && A.getRuntimeTypeOfDartObject(this) === A.getRuntimeTypeOfDartObject(other) && A.iterableEquals(this.get$props(), other.get$props());
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var t1 = A.Primitives_objectHashCode(A.getRuntimeTypeOfDartObject(this)),
        t2 = B.JSArray_methods.fold$1$2(this.get$props(), 0, A.equatable_utils___combine$closure(), type$.int),
        hash = t2 + ((t2 & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return (t1 ^ hash + ((hash & 16383) << 15) & 536870911) >>> 0;
    },
    toString$0(_) {
      var t1 = $.EquatableConfig__stringify;
      if (t1 == null) {
        $.EquatableConfig__stringify = false;
        t1 = false;
      }
      if (A.boolConversionCheck(t1))
        return A.mapPropsToString(A.getRuntimeTypeOfDartObject(this), this.get$props());
      return A.getRuntimeTypeOfDartObject(this).toString$0(0);
    }
  };
  A.setEquals_closure.prototype = {
    call$1(e) {
      return A.objectsEquals(this.element, e);
    },
    $signature: 80
  };
  A._combine_closure.prototype = {
    call$2(a, b) {
      return J.get$hashCode$(a) - J.get$hashCode$(b);
    },
    $signature: 20
  };
  A._combine_closure0.prototype = {
    call$1(key) {
      var t1 = this._box_0,
        t2 = t1.hash,
        t3 = t1.object;
      t3.toString;
      t1.hash = (t2 ^ A._combine(t2, [key, J.$index$asx(type$.Map_dynamic_dynamic._as(t3), key)])) >>> 0;
    },
    $signature: 11
  };
  A._combine_closure1.prototype = {
    call$2(a, b) {
      return J.get$hashCode$(a) - J.get$hashCode$(b);
    },
    $signature: 20
  };
  A.mapPropsToString_closure.prototype = {
    call$1(prop) {
      return J.toString$0$(prop);
    },
    $signature: 82
  };
  A.Excel.prototype = {
    get$_absSharedStringsTarget() {
      var t1 = this._sharedStringsTarget,
        t2 = t1.length;
      if (t2 !== 0) {
        if (0 >= t2)
          return A.ioore(t1, 0);
        t2 = t1[0] === "/";
      } else
        t2 = false;
      if (t2)
        return B.JSString_methods.substring$1(t1, 1);
      return "xl/" + t1;
    },
    set$_mergeChangeLookup(value) {
      var t1 = this._mergeChangeLook;
      if (!B.JSArray_methods.contains$1(t1, value))
        B.JSArray_methods.add$1(t1, value);
    },
    set$_rtlChangeLookup(value) {
      var t1 = this._rtlChangeLook;
      if (!B.JSArray_methods.contains$1(t1, value))
        B.JSArray_methods.add$1(t1, value);
    },
    set$_cellStyleList(_cellStyleList) {
      this._cellStyleList = type$.List_CellStyle._as(_cellStyleList);
    },
    set$_patternFill(_patternFill) {
      this._patternFill = type$.List_String._as(_patternFill);
    },
    set$_fontStyleList(_fontStyleList) {
      this._fontStyleList = type$.List__FontStyle._as(_fontStyleList);
    },
    set$_borderSetList(_borderSetList) {
      this._borderSetList = type$.List__BorderSet._as(_borderSetList);
    }
  };
  A.NumFormatMaintainer.prototype = {};
  A.NumFormat.prototype = {
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeTypeOfDartObject(this), this.formatCode, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return J.get$runtimeType$(other) === A.getRuntimeTypeOfDartObject(this) && type$.NumFormat._as(other).formatCode === this.formatCode;
    }
  };
  A.NumericNumFormat.prototype = {
    read$1(_, v) {
      var noActualDecimalPlaces, idx, t1,
        eIdx = B.JSString_methods.indexOf$1(v, "E"),
        decimalSeparatorIdx = B.JSString_methods.indexOf$1(v, ".");
      if (decimalSeparatorIdx === -1 && eIdx === -1)
        return new A.IntCellValue(A.int_parse(v));
      idx = decimalSeparatorIdx + 1;
      t1 = v.length;
      while (true) {
        if (!(idx < t1)) {
          noActualDecimalPlaces = true;
          break;
        }
        if (!(idx >= 0))
          return A.ioore(v, idx);
        if (v[idx] !== "0") {
          noActualDecimalPlaces = false;
          break;
        }
        ++idx;
      }
      if (noActualDecimalPlaces)
        return new A.IntCellValue(A.int_parse(B.JSString_methods.substring$2(v, 0, decimalSeparatorIdx)));
      return new A.DoubleCellValue(A.double_parse(v));
    }
  };
  A.StandardNumericNumFormat.prototype = {
    accepts$1(value) {
      var t1;
      $label0$0: {
        t1 = true;
        if (value == null)
          break $label0$0;
        if (value instanceof A.FormulaCellValue)
          break $label0$0;
        if (value instanceof A.IntCellValue)
          break $label0$0;
        if (value instanceof A.TextCellValue) {
          t1 = this.numFmtId === 0;
          break $label0$0;
        }
        if (value instanceof A.BoolCellValue)
          break $label0$0;
        if (value instanceof A.DoubleCellValue)
          break $label0$0;
        if (value instanceof A.DateCellValue) {
          t1 = false;
          break $label0$0;
        }
        if (value instanceof A.TimeCellValue) {
          t1 = false;
          break $label0$0;
        }
        if (value instanceof A.DateTimeCellValue) {
          t1 = false;
          break $label0$0;
        }
        throw A.wrapException(A.ReachabilityError$(string$.None_o));
      }
      return t1;
    },
    toString$0(_) {
      return "StandardNumericNumFormat(" + this.numFmtId + ', "' + this.formatCode + '")';
    }
  };
  A.CustomNumericNumFormat.prototype = {
    accepts$1(value) {
      var t1;
      $label0$0: {
        t1 = true;
        if (value == null)
          break $label0$0;
        if (value instanceof A.FormulaCellValue)
          break $label0$0;
        if (value instanceof A.IntCellValue)
          break $label0$0;
        if (value instanceof A.TextCellValue) {
          t1 = false;
          break $label0$0;
        }
        if (value instanceof A.BoolCellValue)
          break $label0$0;
        if (value instanceof A.DoubleCellValue)
          break $label0$0;
        if (value instanceof A.DateCellValue) {
          t1 = false;
          break $label0$0;
        }
        if (value instanceof A.TimeCellValue) {
          t1 = false;
          break $label0$0;
        }
        if (value instanceof A.DateTimeCellValue) {
          t1 = false;
          break $label0$0;
        }
        throw A.wrapException(A.ReachabilityError$(string$.None_o));
      }
      return t1;
    },
    toString$0(_) {
      return 'CustomNumericNumFormat("' + this.formatCode + '")';
    },
    $isCustomNumFormat: 1
  };
  A.DateTimeNumFormat.prototype = {
    read$1(_, v) {
      var value, duration, someUtcDate, utcDate;
      if (v === "0")
        return B.TimeCellValue_vhV;
      value = A.num_parse(v);
      if (value < 1) {
        duration = A.Duration$(0, B.JSNumber_methods.round$0(value * 24 * 3600 * 1000));
        someUtcDate = A.DateTime$utc(0, 1, 1, 0, 0, 0, 0, 0)._addMicroseconds$1(duration._duration);
        return new A.TimeCellValue(A.Primitives_getHours(someUtcDate), A.Primitives_getMinutes(someUtcDate), A.Primitives_getSeconds(someUtcDate), A.Primitives_getMilliseconds(someUtcDate), someUtcDate._microsecond);
      }
      utcDate = A.DateTime$utc(1899, 12, 30, 0, 0, 0, 0, 0)._addMicroseconds$1(A.Duration$(0, B.JSNumber_methods.round$0(value * 24 * 3600 * 1000))._duration);
      if (!B.JSString_methods.contains$1(v, ".") || B.JSString_methods.endsWith$1(v, ".0"))
        return new A.DateCellValue(A.Primitives_getYear(utcDate), A.Primitives_getMonth(utcDate), A.Primitives_getDay(utcDate));
      else
        return new A.DateTimeCellValue(A.Primitives_getYear(utcDate), A.Primitives_getMonth(utcDate), A.Primitives_getDay(utcDate), A.Primitives_getHours(utcDate), A.Primitives_getMinutes(utcDate), A.Primitives_getSeconds(utcDate), A.Primitives_getMilliseconds(utcDate), utcDate._microsecond);
    },
    accepts$1(value) {
      var t1;
      $label0$0: {
        t1 = false;
        if (value == null) {
          t1 = true;
          break $label0$0;
        }
        if (value instanceof A.FormulaCellValue) {
          t1 = true;
          break $label0$0;
        }
        if (value instanceof A.IntCellValue)
          break $label0$0;
        if (value instanceof A.TextCellValue)
          break $label0$0;
        if (value instanceof A.BoolCellValue)
          break $label0$0;
        if (value instanceof A.DoubleCellValue)
          break $label0$0;
        if (value instanceof A.DateCellValue) {
          t1 = true;
          break $label0$0;
        }
        if (value instanceof A.DateTimeCellValue) {
          t1 = true;
          break $label0$0;
        }
        if (value instanceof A.TimeCellValue)
          break $label0$0;
        throw A.wrapException(A.ReachabilityError$(string$.None_o));
      }
      return t1;
    }
  };
  A.StandardDateTimeNumFormat.prototype = {
    toString$0(_) {
      return "StandardDateTimeNumFormat(" + this.numFmtId + ', "' + this.formatCode + '")';
    }
  };
  A.CustomDateTimeNumFormat.prototype = {
    toString$0(_) {
      return 'CustomDateTimeNumFormat("' + this.formatCode + '")';
    },
    $isCustomNumFormat: 1
  };
  A.TimeNumFormat.prototype = {
    read$1(_, v) {
      var value, time, date, utcDate;
      if (v === "0")
        return B.TimeCellValue_vhV;
      value = A.num_parse(v);
      if (value < 1) {
        time = A.Duration$(0, B.JSNumber_methods.round$0(value * 24 * 3600 * 1000));
        date = A.DateTime$utc(0, 1, 1, 0, 0, 0, 0, 0)._addMicroseconds$1(time._duration);
        return new A.TimeCellValue(A.Primitives_getHours(date), A.Primitives_getMinutes(date), A.Primitives_getSeconds(date), A.Primitives_getMilliseconds(date), date._microsecond);
      }
      utcDate = A.DateTime$utc(1899, 12, 30, 0, 0, 0, 0, 0)._addMicroseconds$1(A.Duration$(0, B.JSNumber_methods.round$0(value * 24 * 3600 * 1000))._duration);
      if (!B.JSString_methods.contains$1(v, ".") || B.JSString_methods.endsWith$1(v, ".0"))
        return new A.DateCellValue(A.Primitives_getYear(utcDate), A.Primitives_getMonth(utcDate), A.Primitives_getDay(utcDate));
      else
        return new A.DateTimeCellValue(A.Primitives_getYear(utcDate), A.Primitives_getMonth(utcDate), A.Primitives_getDay(utcDate), A.Primitives_getHours(utcDate), A.Primitives_getMinutes(utcDate), A.Primitives_getSeconds(utcDate), A.Primitives_getMilliseconds(utcDate), utcDate._microsecond);
    },
    accepts$1(value) {
      var t1;
      $label0$0: {
        t1 = false;
        if (value == null) {
          t1 = true;
          break $label0$0;
        }
        if (value instanceof A.FormulaCellValue) {
          t1 = true;
          break $label0$0;
        }
        if (value instanceof A.IntCellValue)
          break $label0$0;
        if (value instanceof A.TextCellValue)
          break $label0$0;
        if (value instanceof A.BoolCellValue)
          break $label0$0;
        if (value instanceof A.DoubleCellValue)
          break $label0$0;
        if (value instanceof A.DateCellValue)
          break $label0$0;
        if (value instanceof A.DateTimeCellValue)
          break $label0$0;
        if (value instanceof A.TimeCellValue) {
          t1 = true;
          break $label0$0;
        }
        throw A.wrapException(A.ReachabilityError$(string$.None_o));
      }
      return t1;
    }
  };
  A.StandardTimeNumFormat.prototype = {
    toString$0(_) {
      return "StandardTimeNumFormat(" + this.numFmtId + ', "' + this.formatCode + '")';
    }
  };
  A.Parser.prototype = {
    _parseRelations$0() {
      var $document,
        _s26_ = "xl/_rels/workbook.xml.rels",
        t1 = this._excel,
        relations = t1._archive.findFile$1(_s26_);
      if (relations != null) {
        relations.decompress$0();
        $document = A.XmlDocument_XmlDocument$parse(B.C_Utf8Codec.decode$1(0, type$.List_int._as(relations.get$content(0))));
        t1._xmlFiles.$indexSet(0, _s26_, $document);
        A.filterElements(new A.XmlDescendantsIterable($document), "Relationship", null).forEach$1(0, new A.Parser__parseRelations_closure(this));
      } else
        A._damagedExcel("");
    },
    _parseSharedStrings$0() {
      var t4, rIdNumber, t5, t6, $content, $document, _this = this, _null = null,
        _s17_ = "sharedStrings.xml",
        _s26_ = "xl/_rels/workbook.xml.rels",
        _s77_ = "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
        _s19_ = "[Content_Types].xml",
        _s8_ = "Override",
        _s20_ = "xl/sharedStrings.xml",
        t1 = {},
        t2 = _this._excel,
        t3 = t2._archive,
        sharedStrings = t3.findFile$1(t2.get$_absSharedStringsTarget());
      if (sharedStrings == null) {
        t2._sharedStringsTarget = _s17_;
        _this._parseContent$1$run(false);
        t4 = t2._xmlFiles;
        if (t4.containsKey$1(0, _s26_)) {
          rIdNumber = _this._getAvailableRid$0();
          t5 = t4.$index(0, _s26_);
          if (t5 != null)
            A.filterElements(new A.XmlDescendantsIterable(t5), "Relationships", _null).get$first(0).XmlHasChildren_children.add$1(0, A.XmlElement$(A.XmlName_XmlName("Relationship"), A._setArrayType([A.XmlAttribute$(A.XmlName_XmlName("Id"), "rId" + rIdNumber, B.XmlAttributeType_2x0), A.XmlAttribute$(A.XmlName_XmlName("Type"), string$.http__, B.XmlAttributeType_2x0), A.XmlAttribute$(A.XmlName_XmlName("Target"), _s17_, B.XmlAttributeType_2x0)], type$.JSArray_XmlAttribute), B.List_empty0, true));
          t5 = _this._rId;
          t6 = "rId" + rIdNumber;
          if (!B.JSArray_methods.contains$1(t5, t6))
            B.JSArray_methods.add$1(t5, t6);
          t1.contain = true;
          t5 = t4.$index(0, _s19_);
          if (t5 != null)
            A.filterElements(new A.XmlDescendantsIterable(t5), _s8_, _null).forEach$1(0, new A.Parser__parseSharedStrings_closure(t1, _s77_));
          if (t1.contain) {
            t1 = t4.$index(0, _s19_);
            if (t1 != null)
              A.filterElements(new A.XmlDescendantsIterable(t1), "Types", _null).get$first(0).XmlHasChildren_children.add$1(0, A.XmlElement$(A.XmlName_XmlName(_s8_), A._setArrayType([A.XmlAttribute$(A.XmlName_XmlName("PartName"), "/xl/sharedStrings.xml", B.XmlAttributeType_2x0), A.XmlAttribute$(A.XmlName_XmlName("ContentType"), _s77_, B.XmlAttributeType_2x0)], type$.JSArray_XmlAttribute), B.List_empty0, true));
          }
        }
        $content = B.C_Utf8Encoder.convert$1('<sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" count="0" uniqueCount="0"/>');
        t3.addFile$1(0, A.ArchiveFile$(_s20_, $content.length, $content, 0));
        sharedStrings = t3.findFile$1(_s20_);
      }
      sharedStrings.decompress$0();
      $document = A.XmlDocument_XmlDocument$parse(B.C_Utf8Codec.decode$1(0, type$.List_int._as(sharedStrings.get$content(0))));
      t2._xmlFiles.$indexSet(0, "xl/" + t2._sharedStringsTarget, $document);
      A.filterElements(new A.XmlDescendantsIterable($document), "si", _null).forEach$1(0, new A.Parser__parseSharedStrings_closure0(_this));
    },
    _parseContent$1$run(run) {
      var $document,
        _s15_ = "xl/workbook.xml",
        t1 = this._excel,
        workbook = t1._archive.findFile$1(_s15_);
      if (workbook == null)
        A._damagedExcel("");
      workbook.decompress$0();
      $document = A.XmlDocument_XmlDocument$parse(B.C_Utf8Codec.decode$1(0, type$.List_int._as(workbook.get$content(0))));
      t1._xmlFiles.$indexSet(0, _s15_, $document);
      A.filterElements(new A.XmlDescendantsIterable($document), "sheet", null).forEach$1(0, new A.Parser__parseContent_closure(this, run));
    },
    _parseContent$0() {
      return this._parseContent$1$run(true);
    },
    _parseMergedCells$0() {
      this._excel._sheets.forEach$1(0, new A.Parser__parseMergedCells_closure(this, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_String)));
    },
    _deleteAllButTopLeftCellsOfSpanObj$2(spanObj, sheet) {
      var columnI, t1, rowI, t2,
        columnSpanStart = spanObj.columnSpanStart,
        columnSpanEnd = spanObj.columnSpanEnd,
        rowSpanStart = spanObj.rowSpanStart,
        rowSpanEnd = spanObj.rowSpanEnd;
      for (columnI = columnSpanStart; columnI <= columnSpanEnd; ++columnI)
        for (t1 = columnI === columnSpanStart, rowI = rowSpanStart; rowI <= rowSpanEnd; ++rowI) {
          if (t1 && rowI === rowSpanStart)
            continue;
          t2 = sheet._sheetData.$index(0, rowI);
          if (t2 != null)
            t2.remove$1(0, columnI);
          t2 = sheet._sheetData.$index(0, rowI);
          if ((t2 == null ? null : t2.__js_helper$_length === 0) === true)
            sheet._sheetData.remove$1(0, rowI);
        }
    },
    _parseStyles$1(_stylesTarget) {
      var $document, fontList, _this = this, _null = null,
        t1 = _this._excel,
        t2 = "xl/" + _stylesTarget,
        styles = t1._archive.findFile$1(t2);
      if (styles != null) {
        styles.decompress$0();
        $document = A.XmlDocument_XmlDocument$parse(B.C_Utf8Codec.decode$1(0, type$.List_int._as(styles.get$content(0))));
        t1._xmlFiles.$indexSet(0, t2, $document);
        t1.set$_fontStyleList(A._setArrayType([], type$.JSArray__FontStyle));
        t1.set$_patternFill(A._setArrayType([], type$.JSArray_String));
        t1.set$_cellStyleList(A._setArrayType([], type$.JSArray_CellStyle));
        t1.set$_borderSetList(A._setArrayType([], type$.JSArray__BorderSet));
        fontList = A.filterElements(new A.XmlDescendantsIterable($document), "font", _null);
        A.filterElements(new A.XmlDescendantsIterable($document), "patternFill", _null).forEach$1(0, new A.Parser__parseStyles_closure(_this));
        A.filterElements(new A.XmlDescendantsIterable($document), "border", _null).forEach$1(0, new A.Parser__parseStyles_closure0(_this));
        A.filterElements(new A.XmlDescendantsIterable($document), "numFmts", _null).forEach$1(0, new A.Parser__parseStyles_closure1(_this));
        A.filterElements(new A.XmlDescendantsIterable($document), "cellXfs", _null).forEach$1(0, new A.Parser__parseStyles_closure2(_this, fontList));
      } else
        A._damagedExcel("styles");
    },
    _nodeChildren$3$attribute(node, child, attribute) {
      var attr,
        ele = A.filterElements(node.XmlHasChildren_children, child, null);
      if (!ele.get$isEmpty(0)) {
        if (attribute != null) {
          attr = J.getAttribute$1$x(ele.get$first(0), attribute);
          if (attr != null)
            return attr;
          return null;
        }
        return true;
      }
      return null;
    },
    _nodeChildren$2(node, child) {
      return this._nodeChildren$3$attribute(node, child, null);
    },
    _getFontIndex$2(node, text) {
      var exception,
        t1 = node.getAttribute$1(0, text),
        applyFont = t1 == null ? null : B.JSString_methods.trim$0(t1);
      if (applyFont != null)
        try {
          t1 = A.int_parse(applyFont);
          return t1;
        } catch (exception) {
          if (applyFont.toLowerCase() === "true")
            return 1;
        }
      return 0;
    },
    _parseTable$1(node) {
      var target, t2, t3, t4, file, $content, worksheet, t5, sheetView, sheet, _this = this, _null = null,
        t1 = node.getAttribute$1(0, "name");
      t1.toString;
      target = _this._worksheetTargets.$index(0, node.getAttribute$1(0, "r:id"));
      t2 = _this._excel;
      t3 = t2._sheetMap;
      if (t3.$index(0, t1) == null)
        t3.$indexSet(0, t1, A.Sheet$_(t2, t1));
      t3 = t3.$index(0, t1);
      t3.toString;
      t4 = "xl/" + A.S(target);
      file = t2._archive.findFile$1(t4);
      file.decompress$0();
      $content = A.XmlDocument_XmlDocument$parse(B.C_Utf8Codec.decode$1(0, type$.List_int._as(file.get$content(0))));
      worksheet = A.filterElements($content.XmlHasChildren_children, "worksheet", _null).get$first(0);
      t5 = A.filterElements(new A.XmlDescendantsIterable(worksheet), "sheetView", _null);
      sheetView = A.List_List$of(t5, true, t5.$ti._eval$1("Iterable.E"));
      if (sheetView.length !== 0) {
        B.JSArray_methods.get$first(sheetView).getAttribute$1(0, "rightToLeft");
        t3._excel.set$_rtlChangeLookup(t3._sheet);
      }
      sheet = A.filterElements(worksheet.XmlHasChildren_children, "sheetData", _null).get$first(0);
      A.filterElements(sheet.XmlHasChildren_children, "row", _null).forEach$1(0, new A.Parser__parseTable_closure(_this, t3, t1));
      _this._parseHeaderFooter$2(worksheet, t3);
      _this._parseColWidthsRowHeights$2(worksheet, t3);
      t2._sheets.$indexSet(0, t1, sheet);
      t2._xmlFiles.$indexSet(0, t4, $content);
      t2._xmlSheetId.$indexSet(0, t1, t4);
      if (t3._maxRows === 0 || t3._maxColumns === 0)
        t3._sheetData.clear$0(0);
      t3._countRowsAndColumns$0();
    },
    _parseRow$3(node, sheetObject, $name) {
      var t1 = A.Primitives_parseInt(J.toString$0$(node.getAttribute$1(0, "r")), null),
        rowIndex = (t1 == null ? -1 : t1) - 1;
      if (rowIndex < 0)
        return;
      A.filterElements(node.XmlHasChildren_children, "c", null).forEach$1(0, new A.Parser__parseRow_closure(this, sheetObject, rowIndex, $name));
    },
    _parseCell$4(node, sheetObject, rowIndex, $name) {
      var s1, s, exception, rC, t1, value, formulaNode, vNode, v, numFormat, _this = this, _null = null,
        columnIndex = A._getCellNumber(node);
      if (columnIndex == null)
        return;
      s1 = node.getAttribute$1(0, "s");
      s = 0;
      if (s1 != null) {
        try {
          s = A.int_parse(s1);
        } catch (exception) {
        }
        rC = J.toString$0$(node.getAttribute$1(0, "r"));
        t1 = _this._excel._cellStyleReferenced;
        if (t1.$index(0, $name) == null)
          t1.$indexSet(0, $name, A.LinkedHashMap_LinkedHashMap$_literal([rC, s], type$.String, type$.int));
        else
          t1.$index(0, $name).$indexSet(0, rC, s);
      }
      switch (node.getAttribute$1(0, "t")) {
        case "s":
          value = new A.TextCellValue(_this._excel._sharedStrings.value$1(0, A.int_parse(A.Parser__parseValue(A.filterElements(node.XmlHasChildren_children, "v", _null).get$first(0)))).get$textSpan());
          break;
        case "b":
          value = new A.BoolCellValue(A.Parser__parseValue(A.filterElements(node.XmlHasChildren_children, "v", _null).get$first(0)) === "1");
          break;
        case "e":
        case "str":
          value = new A.FormulaCellValue(A.Parser__parseValue(A.filterElements(node.XmlHasChildren_children, "v", _null).get$first(0)));
          break;
        case "inlineStr":
          value = new A.TextCellValue(new A.TextSpan(A.Parser__parseValue(A.filterElements(new A.XmlDescendantsIterable(node), "t", _null).get$first(0)), _null, _null));
          break;
        case "n":
        default:
          t1 = node.XmlHasChildren_children;
          formulaNode = A.filterElements(t1, "f", _null);
          if (!formulaNode.get$isEmpty(0))
            value = new A.FormulaCellValue(A.Parser__parseValue(formulaNode.get$first(0)));
          else {
            vNode = A.IterableExtension_get_firstOrNull(A.filterElements(t1, "v", _null), type$.XmlElement);
            if (vNode == null)
              value = _null;
            else if (s1 != null) {
              v = A.Parser__parseValue(vNode);
              t1 = _this._excel;
              numFormat = t1._numFormats._excel$_map.$index(0, B.JSArray_methods.$index(t1._numFmtIds, s));
              value = numFormat == null ? B.StandardNumericNumFormat_Jqe.read$1(0, v) : numFormat.read$1(0, v);
            } else
              value = B.StandardNumericNumFormat_Jqe.read$1(0, A.Parser__parseValue(vNode));
          }
      }
      sheetObject.updateCell$3$cellStyle(new A.CellIndex(rowIndex, columnIndex), value, B.JSArray_methods.$index(_this._excel._cellStyleList, s));
    },
    _getAvailableRid$0() {
      var got,
        t1 = this._rId;
      B.JSArray_methods.sort$1(t1, new A.Parser__getAvailableRid_closure());
      got = A.List_List$from(A._setArrayType(B.JSArray_methods.get$last(t1).split(""), type$.JSArray_String), true, type$.String);
      B.JSArray_methods.removeWhere$1(got, new A.Parser__getAvailableRid_closure0());
      return A.int_parse(B.JSArray_methods.join$0(got)) + 1;
    },
    _parseHeaderFooter$2(worksheet, sheetObject) {
      var headerFooterElement, t1,
        results = A.filterElements(new A.XmlDescendantsIterable(worksheet), "headerFooter", null);
      if (!results.get$iterator(0).moveNext$0())
        return;
      headerFooterElement = results.get$first(0);
      t1 = headerFooterElement.getAttribute$1(0, "alignWithMargins");
      if (t1 != null)
        A.BoolParsing_parseBool(t1);
      t1 = headerFooterElement.getAttribute$1(0, "differentFirst");
      if (t1 != null)
        A.BoolParsing_parseBool(t1);
      t1 = headerFooterElement.getAttribute$1(0, "differentOddEven");
      if (t1 != null)
        A.BoolParsing_parseBool(t1);
      t1 = headerFooterElement.getAttribute$1(0, "scaleWithDoc");
      if (t1 != null)
        A.BoolParsing_parseBool(t1);
      t1 = headerFooterElement.getElement$1("evenHeader");
      if (t1 != null)
        A.XmlStringExtension_get_innerText(t1);
      t1 = headerFooterElement.getElement$1("evenFooter");
      if (t1 != null)
        A.XmlStringExtension_get_innerText(t1);
      t1 = headerFooterElement.getElement$1("firstHeader");
      if (t1 != null)
        A.XmlStringExtension_get_innerText(t1);
      t1 = headerFooterElement.getElement$1("firstFooter");
      if (t1 != null)
        A.XmlStringExtension_get_innerText(t1);
      t1 = headerFooterElement.getElement$1("oddFooter");
      if (t1 != null)
        A.XmlStringExtension_get_innerText(t1);
      t1 = headerFooterElement.getElement$1("oddHeader");
      if (t1 != null)
        A.XmlStringExtension_get_innerText(t1);
    },
    _parseColWidthsRowHeights$2(worksheet, sheetObject) {
      var results = A.filterElements(new A.XmlDescendantsIterable(worksheet), "sheetFormatPr", null);
      if (!results.get$isEmpty(0))
        results.forEach$1(0, new A.Parser__parseColWidthsRowHeights_closure(sheetObject));
      results = A.filterElements(new A.XmlDescendantsIterable(worksheet), "col", null);
      if (!results.get$isEmpty(0))
        results.forEach$1(0, new A.Parser__parseColWidthsRowHeights_closure0(sheetObject));
      results = A.filterElements(new A.XmlDescendantsIterable(worksheet), "row", null);
      if (!results.get$isEmpty(0))
        results.forEach$1(0, new A.Parser__parseColWidthsRowHeights_closure1(sheetObject));
    }
  };
  A.Parser__parseRelations_closure.prototype = {
    call$1(node) {
      var id, target, _this = this;
      type$.XmlElement._as(node);
      id = node.getAttribute$1(0, "Id");
      target = node.getAttribute$1(0, "Target");
      if (target != null)
        switch (node.getAttribute$1(0, "Type")) {
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles":
            _this.$this._excel._stylesTarget = target;
            break;
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet":
            if (id != null)
              _this.$this._worksheetTargets.$indexSet(0, id, target);
            break;
          case string$.http__:
            _this.$this._excel._sharedStringsTarget = target;
            break;
        }
      if (id != null && !B.JSArray_methods.contains$1(_this.$this._rId, id))
        B.JSArray_methods.add$1(_this.$this._rId, id);
    },
    $signature: 0
  };
  A.Parser__parseSharedStrings_closure.prototype = {
    call$1(node) {
      if (type$.XmlElement._as(node).getAttribute$1(0, "ContentType") === this.content)
        this._box_0.contain = false;
    },
    $signature: 0
  };
  A.Parser__parseSharedStrings_closure0.prototype = {
    call$1(node) {
      var sharedString;
      type$.XmlElement._as(node);
      sharedString = new A.SharedString(node, B.JSString_methods.get$hashCode(node.toXmlString$0()));
      this.$this._excel._sharedStrings.add$2(0, sharedString, sharedString.get$stringValue(0));
    },
    $signature: 0
  };
  A.Parser__parseContent_closure.prototype = {
    call$1(node) {
      var rid, _this = this;
      type$.XmlElement._as(node);
      if (_this.run)
        _this.$this._parseTable$1(node);
      else {
        rid = node.getAttribute$1(0, "r:id");
        if (rid != null && !B.JSArray_methods.contains$1(_this.$this._rId, rid))
          B.JSArray_methods.add$1(_this.$this._rId, rid);
      }
    },
    $signature: 0
  };
  A.Parser__parseMergedCells_closure.prototype = {
    call$2(sheetName, node) {
      var t1, t2, t3, spanList, worksheetNode;
      A._asString(sheetName);
      type$.XmlNode._as(node);
      t1 = this.$this;
      t2 = t1._excel;
      t3 = t2._sheetMap;
      if (t3.$index(0, sheetName) == null)
        t3.$indexSet(0, sheetName, A.Sheet$_(t2, sheetName));
      type$.XmlElement._as(node);
      spanList = A._setArrayType([], type$.JSArray_String);
      t2 = t3.$index(0, sheetName);
      t2.toString;
      worksheetNode = node.XmlHasParent__parent;
      worksheetNode.toString;
      A.filterElements(new A.XmlDescendantsIterable(worksheetNode), "mergeCell", null).forEach$1(0, new A.Parser__parseMergedCells__closure(t1, t2, spanList, this.spannedCells, sheetName));
    },
    $signature: 102
  };
  A.Parser__parseMergedCells__closure.prototype = {
    call$1(element) {
      var t1, t2, t3, startCell, endCell, startIndex, endIndex, spanObj, _this = this,
        ref = type$.XmlElement._as(element).getAttribute$1(0, "ref");
      if (ref != null && B.JSString_methods.contains$1(ref, ":") && ref.split(":").length === 2) {
        t1 = _this.sheet;
        t2 = t1._spannedItems;
        if (t2._excel$_map.$index(0, t2.$ti._precomputed1._as(ref)) == null) {
          t2 = t1._spannedItems;
          t2.$ti._precomputed1._as(ref);
          t3 = t2._excel$_map;
          if (t3.$index(0, ref) == null) {
            t3.$indexSet(0, ref, t2._excel$_index);
            ++t2._excel$_index;
          }
        }
        t2 = A._setArrayType(ref.split(":"), type$.JSArray_String);
        if (0 >= t2.length)
          return A.ioore(t2, 0);
        startCell = t2[0];
        t2 = ref.split(":");
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        endCell = t2[1];
        t2 = _this.spanList;
        if (!B.JSArray_methods.contains$1(t2, startCell))
          B.JSArray_methods.add$1(t2, startCell);
        t3 = _this.sheetName;
        _this.spannedCells.$indexSet(0, t3, t2);
        startIndex = A.CellIndex_CellIndex$indexByString(startCell);
        endIndex = A.CellIndex_CellIndex$indexByString(endCell);
        spanObj = new A._Span(startIndex.rowIndex, startIndex.columnIndex, endIndex.rowIndex, endIndex.columnIndex);
        if (!B.JSArray_methods.contains$1(t1._spanList, spanObj)) {
          B.JSArray_methods.add$1(t1._spanList, spanObj);
          _this.$this._deleteAllButTopLeftCellsOfSpanObj$2(spanObj, t1);
        }
        _this.$this._excel.set$_mergeChangeLookup(t3);
      }
    },
    $signature: 0
  };
  A.Parser__parseStyles_closure.prototype = {
    call$1(node) {
      var patternType, t2, t3, t1 = {};
      type$.XmlElement._as(node);
      patternType = node.getAttribute$1(0, "patternType");
      if (patternType == null)
        patternType = "";
      t1.rgb = null;
      t2 = node.XmlHasChildren_children;
      t3 = this.$this;
      if (t2._base.length !== 0)
        A.filterElements(t2, "fgColor", null).forEach$1(0, new A.Parser__parseStyles__closure1(t1, t3));
      else
        B.JSArray_methods.add$1(t3._excel._patternFill, patternType);
    },
    $signature: 0
  };
  A.Parser__parseStyles__closure1.prototype = {
    call$1(child) {
      var rgb = type$.XmlElement._as(child).getAttribute$1(0, "rgb");
      if (rgb == null)
        rgb = "";
      this._box_0.rgb = rgb;
      B.JSArray_methods.add$1(this.$this._excel._patternFill, rgb);
    },
    $signature: 0
  };
  A.Parser__parseStyles_closure0.prototype = {
    call$1(node) {
      var elementName, element, borderColorHex, color, t2, t3, t4, borderElements, _i, matcher, t5, t6, it, result, exception, borderStyleAttribute, borderStyle, color0, borderColorHex0, t7, _null = null,
        t1 = type$.XmlElement;
      t1._as(node);
      t2 = type$.JSArray_nullable_String;
      t3 = A._setArrayType(["0", "false", null], t2);
      t4 = node.getAttribute$1(0, "diagonalUp");
      t3 = B.JSArray_methods.contains$1(t3, t4 == null ? _null : B.JSString_methods.trim$0(t4));
      t2 = A._setArrayType(["0", "false", null], t2);
      t4 = node.getAttribute$1(0, "diagonalDown");
      t2 = B.JSArray_methods.contains$1(t2, t4 == null ? _null : B.JSString_methods.trim$0(t4));
      borderElements = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Border);
      for (t4 = node.XmlHasChildren_children, _i = 0; _i < 5; ++_i) {
        elementName = B.List_WZQ[_i];
        element = null;
        try {
          matcher = A.createNameMatcher(elementName, _null);
          t5 = t4.whereType$1$0(0, t1);
          t6 = t5.$ti;
          it = new A.WhereIterable(t5, t6._eval$1("bool(Iterable.E)")._as(matcher), t6._eval$1("WhereIterable<Iterable.E>")).get$iterator(0);
          if (!it.moveNext$0())
            A.throwExpression(A.IterableElementError_noElement());
          result = it.get$current(0);
          if (it.moveNext$0())
            A.throwExpression(A.IterableElementError_tooMany());
          element = result;
        } catch (exception) {
          if (!(A.unwrapException(exception) instanceof A.StateError))
            throw exception;
        }
        t5 = element;
        if (t5 == null)
          borderStyleAttribute = _null;
        else {
          t5 = t5.getAttributeNode$2$namespace("style", _null);
          t5 = t5 == null ? _null : t5.value;
          borderStyleAttribute = t5 == null ? _null : B.JSString_methods.trim$0(t5);
        }
        borderStyle = borderStyleAttribute != null ? A.getBorderStyleByName(borderStyleAttribute) : _null;
        borderColorHex = null;
        try {
          t5 = element;
          if (t5 == null)
            color0 = _null;
          else {
            t5 = t5.XmlHasChildren_children;
            matcher = A.createNameMatcher("color", _null);
            t5 = t5.whereType$1$0(0, t1);
            t6 = t5.$ti;
            it = new A.WhereIterable(t5, t6._eval$1("bool(Iterable.E)")._as(matcher), t6._eval$1("WhereIterable<Iterable.E>")).get$iterator(0);
            if (!it.moveNext$0())
              A.throwExpression(A.IterableElementError_noElement());
            result = it.get$current(0);
            if (it.moveNext$0())
              A.throwExpression(A.IterableElementError_tooMany());
            color0 = result;
          }
          color = color0;
          t5 = color;
          if (t5 == null)
            borderColorHex0 = _null;
          else {
            t5 = t5.getAttributeNode$2$namespace("rgb", _null);
            t5 = t5 == null ? _null : t5.value;
            borderColorHex0 = t5 == null ? _null : B.JSString_methods.trim$0(t5);
          }
          borderColorHex = borderColorHex0;
        } catch (exception) {
          if (!(A.unwrapException(exception) instanceof A.StateError))
            throw exception;
        }
        t5 = borderColorHex;
        if (t5 == null)
          t5 = _null;
        else if (t5 === "none")
          t5 = B.ExcelColor_none_null_null;
        else if (A._assertHexString(t5)) {
          t6 = A.ExcelColor_valuesAsMap().$index(0, t5);
          t5 = t6 == null ? new A.ExcelColor(t5, _null, _null) : t6;
        } else
          t5 = B.ExcelColor_FF000000_black_ColorType_0;
        t6 = borderStyle === B.BorderStyle_None ? _null : borderStyle;
        if (t5 != null) {
          t5 = t5._color;
          t5 = A._isColorAppropriate(A._assertHexString(t5) || t5 === "none" ? t5 : B.ExcelColor_FF000000_black_ColorType_0.get$colorHex());
        } else
          t5 = _null;
        borderElements.$indexSet(0, elementName, new A.Border(t6, t5));
      }
      t1 = borderElements.$index(0, "left");
      t1.toString;
      t4 = borderElements.$index(0, "right");
      t4.toString;
      t5 = borderElements.$index(0, "top");
      t5.toString;
      t6 = borderElements.$index(0, "bottom");
      t6.toString;
      t7 = borderElements.$index(0, "diagonal");
      t7.toString;
      B.JSArray_methods.add$1(this.$this._excel._borderSetList, new A._BorderSet(t1, t4, t5, t6, t7, !t3, !t2));
    },
    $signature: 0
  };
  A.Parser__parseStyles_closure1.prototype = {
    call$1(node1) {
      A.filterElements(new A.XmlDescendantsIterable(type$.XmlElement._as(node1)), "numFmt", null).forEach$1(0, new A.Parser__parseStyles__closure0(this.$this));
    },
    $signature: 0
  };
  A.Parser__parseStyles__closure0.prototype = {
    call$1(node) {
      var t1, numFmtId, t2, t3;
      type$.XmlElement._as(node);
      t1 = node.getAttribute$1(0, "numFmtId");
      t1.toString;
      numFmtId = A.int_parse(t1);
      t1 = node.getAttribute$1(0, "formatCode");
      t1.toString;
      if (numFmtId < 164)
        throw A.wrapException(A.Exception_Exception("custom numFmtId starts at 164 but found a value of " + numFmtId));
      t2 = this.$this._excel._numFormats;
      t1 = A.NumFormat_custom(t1);
      t3 = t2._excel$_map;
      if (t3.containsKey$1(0, numFmtId))
        A.throwExpression(A.Exception_Exception("numFmtId " + numFmtId + " already exists"));
      t3.$indexSet(0, numFmtId, t1);
      t2._inverseMap.$indexSet(0, t1, numFmtId);
      if (numFmtId >= t2._nextFmtId)
        t2._nextFmtId = numFmtId + 1;
    },
    $signature: 0
  };
  A.Parser__parseStyles_closure2.prototype = {
    call$1(node1) {
      A.filterElements(new A.XmlDescendantsIterable(type$.XmlElement._as(node1)), "xf", null).forEach$1(0, new A.Parser__parseStyles__closure(this.$this, this.fontList));
    },
    $signature: 0
  };
  A.Parser__parseStyles__closure.prototype = {
    call$1(node) {
      var t2, numFmtId, t3, fontColor, backgroundColor, fontId, _fontStyle, t4, font, _clr, _size, fontSize, _bold, isBold, _italic, isItalic, underline, _family, fontFamily, fillId, t5, borderId, borderSet, numFormat, t6, t7, t8, t9, t10, t11, t12, t13, t14, cellStyle, _null = null, _s3_ = "val", t1 = {};
      type$.XmlElement._as(node);
      t2 = this.$this;
      numFmtId = t2._getFontIndex$2(node, "numFmtId");
      t3 = t2._excel;
      B.JSArray_methods.add$1(t3._numFmtIds, numFmtId);
      fontColor = B.ExcelColor_FF000000_black_ColorType_0.get$colorHex();
      backgroundColor = B.ExcelColor_none_null_null.get$colorHex();
      t1.horizontalAlign = B.HorizontalAlign_0;
      t1.verticalAlign = B.VerticalAlign_2;
      t1.textWrapping = null;
      t1.rotation = 0;
      fontId = t2._getFontIndex$2(node, "fontId");
      _fontStyle = new A._FontStyle(B.ExcelColor_FF000000_black_ColorType_0, B.Underline_0);
      _fontStyle._fontColorHex = A.StringExt_get_excelColor(A._isColorAppropriate(B.ExcelColor_FF000000_black_ColorType_0.get$colorHex()));
      t4 = this.fontList;
      if (fontId < t4.get$length(0)) {
        font = t4.elementAt$1(0, fontId);
        _clr = t2._nodeChildren$3$attribute(font, "color", "rgb");
        if (_clr != null && !A._isBool(_clr))
          fontColor = J.toString$0$(_clr);
        _size = A._asStringQ(t2._nodeChildren$3$attribute(font, "sz", _s3_));
        fontSize = _size != null ? B.JSNumber_methods.round$0(A.double_parse(_size)) : 12;
        _bold = t2._nodeChildren$2(font, "b");
        isBold = _bold != null && A._isBool(_bold) && _bold;
        _italic = t2._nodeChildren$2(font, "i");
        isItalic = _italic != null && A._asBool(_italic);
        underline = t2._nodeChildren$3$attribute(font, "u", _s3_) != null ? B.Underline_2 : B.Underline_0;
        if (t2._nodeChildren$2(font, "u") != null)
          underline = B.Underline_1;
        _family = t2._nodeChildren$3$attribute(font, "name", _s3_);
        fontFamily = _family != null && _family !== true ? A._asStringQ(_family) : _null;
        t2._nodeChildren$3$attribute(font, "scheme", _s3_);
        isBold = _fontStyle._bold = isBold;
        isItalic = _fontStyle._italic = isItalic;
        fontSize = _fontStyle._fontSize = fontSize;
        fontFamily = _fontStyle._fontFamily = fontFamily;
        _fontStyle._fontColorHex = A.StringExt_get_excelColor(fontColor);
      } else {
        fontFamily = _null;
        fontSize = 12;
        isBold = false;
        isItalic = false;
        underline = B.Underline_0;
      }
      if (B.JSArray_methods.indexOf$1(t3._fontStyleList, _fontStyle) === -1)
        B.JSArray_methods.add$1(t3._fontStyleList, _fontStyle);
      fillId = t2._getFontIndex$2(node, "fillId");
      t4 = t3._patternFill;
      t5 = t4.length;
      if (fillId < t5) {
        if (!(fillId >= 0))
          return A.ioore(t4, fillId);
        backgroundColor = t4[fillId];
      }
      borderId = t2._getFontIndex$2(node, "borderId");
      t4 = t3._borderSetList;
      t5 = t4.length;
      if (borderId < t5) {
        if (!(borderId >= 0))
          return A.ioore(t4, borderId);
        borderSet = t4[borderId];
      } else
        borderSet = _null;
      t4 = node.XmlHasChildren_children;
      if (t4._base.length !== 0)
        A.filterElements(t4, "alignment", _null).forEach$1(0, new A.Parser__parseStyles___closure(t1, t2, node));
      numFormat = t3._numFormats._excel$_map.$index(0, numFmtId);
      if (numFormat == null)
        numFormat = B.StandardNumericNumFormat_0_General;
      t2 = A.StringExt_get_excelColor(fontColor);
      t4 = backgroundColor === "none" || backgroundColor.length === 0 ? B.ExcelColor_none_null_null : A.StringExt_get_excelColor(backgroundColor);
      t5 = t1.horizontalAlign;
      t6 = t1.verticalAlign;
      t7 = t1.textWrapping;
      t1 = t1.rotation;
      t8 = borderSet == null;
      t9 = t8 ? _null : borderSet.leftBorder;
      t10 = t8 ? _null : borderSet.rightBorder;
      t11 = t8 ? _null : borderSet.topBorder;
      t12 = t8 ? _null : borderSet.bottomBorder;
      t13 = t8 ? _null : borderSet.diagonalBorder;
      t14 = t8 ? _null : borderSet.diagonalBorderUp;
      t8 = t8 ? _null : borderSet.diagonalBorderDown;
      cellStyle = A.CellStyle$(t4, isBold, t12, t13, t8 === true, t14 === true, t2, fontFamily, _null, fontSize, t5, isItalic, t9, numFormat, t10, t1, t7, t11, underline, t6);
      B.JSArray_methods.add$1(t3._cellStyleList, cellStyle);
    },
    $signature: 0
  };
  A.Parser__parseStyles___closure.prototype = {
    call$1(child) {
      var t1, vertical, horizontal, rotationString, _this = this;
      type$.XmlElement._as(child);
      t1 = _this.$this;
      if (t1._getFontIndex$2(child, "wrapText") === 1)
        _this._box_1.textWrapping = B.TextWrapping_0;
      else if (t1._getFontIndex$2(child, "shrinkToFit") === 1)
        _this._box_1.textWrapping = B.TextWrapping_1;
      t1 = _this.node;
      vertical = t1.getAttribute$1(0, "vertical");
      if (vertical != null)
        if (vertical === "top")
          _this._box_1.verticalAlign = B.VerticalAlign_0;
        else if (vertical === "center")
          _this._box_1.verticalAlign = B.VerticalAlign_1;
      horizontal = t1.getAttribute$1(0, "horizontal");
      if (horizontal != null)
        if (horizontal === "center")
          _this._box_1.horizontalAlign = B.HorizontalAlign_1;
        else if (horizontal === "right")
          _this._box_1.horizontalAlign = B.HorizontalAlign_2;
      rotationString = t1.getAttribute$1(0, "textRotation");
      if (rotationString != null) {
        t1 = A.Primitives_parseDouble(rotationString);
        _this._box_1.rotation = B.JSNumber_methods.floor$0(t1 == null ? 0 : t1);
      }
    },
    $signature: 0
  };
  A.Parser__parseTable_closure.prototype = {
    call$1(child) {
      this.$this._parseRow$3(type$.XmlElement._as(child), this.sheetObject, this.name);
    },
    $signature: 0
  };
  A.Parser__parseRow_closure.prototype = {
    call$1(child) {
      var _this = this;
      _this.$this._parseCell$4(type$.XmlElement._as(child), _this.sheetObject, _this.rowIndex, _this.name);
    },
    $signature: 0
  };
  A.Parser__parseValue_closure.prototype = {
    call$1(child) {
      var t1, t2;
      type$.XmlNode._as(child);
      if (child instanceof A.XmlText) {
        t1 = this.buffer;
        t2 = A.stringReplaceAllUnchecked(child.value, "\r\n", "\n");
        t1._contents += t2;
      }
    },
    $signature: 108
  };
  A.Parser__getAvailableRid_closure.prototype = {
    call$2(a, b) {
      A._asString(a);
      A._asString(b);
      return B.JSInt_methods.compareTo$1(A.int_parse(B.JSString_methods.substring$1(a, 3)), A.int_parse(B.JSString_methods.substring$1(b, 3)));
    },
    $signature: 29
  };
  A.Parser__getAvailableRid_closure0.prototype = {
    call$1(item) {
      A._asString(item);
      return !B.JSArray_methods.contains$1(A._setArrayType("0123456789".split(""), type$.JSArray_String), item);
    },
    $signature: 21
  };
  A.Parser__parseColWidthsRowHeights_closure.prototype = {
    call$1(element) {
      var widthAttribute, rowHeightAttribute;
      type$.XmlElement._as(element);
      widthAttribute = element.getAttribute$1(0, "defaultColWidth");
      if (widthAttribute != null)
        A.Primitives_parseDouble(widthAttribute);
      rowHeightAttribute = element.getAttribute$1(0, "defaultRowHeight");
      if (rowHeightAttribute != null)
        A.Primitives_parseDouble(rowHeightAttribute);
    },
    $signature: 0
  };
  A.Parser__parseColWidthsRowHeights_closure0.prototype = {
    call$1(element) {
      var colAttribute, widthAttribute, col, width;
      type$.XmlElement._as(element);
      colAttribute = element.getAttribute$1(0, "min");
      widthAttribute = element.getAttribute$1(0, "width");
      if (colAttribute != null && widthAttribute != null) {
        col = A.Primitives_parseInt(colAttribute, null);
        width = A.Primitives_parseDouble(widthAttribute);
        if (col != null && width != null) {
          if (typeof col !== "number")
            return col.$sub();
          --col;
          if (col >= 0)
            this.sheetObject._columnWidths.$indexSet(0, col, width);
        }
      }
    },
    $signature: 0
  };
  A.Parser__parseColWidthsRowHeights_closure1.prototype = {
    call$1(element) {
      var rowAttribute, heightAttribute, row, height;
      type$.XmlElement._as(element);
      rowAttribute = element.getAttribute$1(0, "r");
      heightAttribute = element.getAttribute$1(0, "ht");
      if (rowAttribute != null && heightAttribute != null) {
        row = A.Primitives_parseInt(rowAttribute, null);
        height = A.Primitives_parseDouble(heightAttribute);
        if (row != null && height != null) {
          if (typeof row !== "number")
            return row.$sub();
          --row;
          if (row >= 0)
            this.sheetObject._rowHeights.$indexSet(0, row, height);
        }
      }
    },
    $signature: 0
  };
  A._SharedStringsMaintainer.prototype = {
    add$2(_, val, key) {
      var t1 = this._excel$_map,
        t2 = t1.$index(0, val);
      if (t2 != null)
        ++t2.count;
      t1.putIfAbsent$2(0, val, new A._SharedStringsMaintainer_add_closure(this, key, val));
    },
    value$1(_, i) {
      var t1 = this._list,
        t2 = t1.length;
      if (i < t2) {
        if (!(i >= 0))
          return A.ioore(t1, i);
        return t1[i];
      } else
        return null;
    }
  };
  A._SharedStringsMaintainer_add_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.val;
      t1._mapString.$indexSet(0, this.key, t2);
      B.JSArray_methods.add$1(t1._list, t2);
      ++t1._excel$_index;
      return new A._IndexingHolder();
    },
    $signature: 31
  };
  A._IndexingHolder.prototype = {};
  A.SharedString.prototype = {
    toString$0(_) {
      return this.get$stringValue(0);
    },
    get$textSpan() {
      var t1, t2, t3, t4, t5, children, text, t6, t7, style, t8, t9, t10, t11, _null = null,
        getBool = new A.SharedString_textSpan_getBool(),
        getDouble = new A.SharedString_textSpan_getDouble();
      for (t1 = B.JSArray_methods.get$iterator(this.node.XmlHasChildren_children._base), t2 = type$.WhereTypeIterator_XmlElement, t3 = new A.WhereTypeIterator(t1, t2), t4 = type$.XmlElement, t5 = type$.JSArray_TextSpan, children = _null, text = children; t3.moveNext$0();) {
        t6 = t4._as(t1.get$current(0));
        switch (t6.name.get$local()) {
          case "t":
            t7 = text == null ? "" : text;
            text = t7 + A.XmlStringExtension_get_innerText(t6);
            break;
          case "r":
            style = A.CellStyle$(B.ExcelColor_none_null_null, false, _null, _null, false, false, B.ExcelColor_FF000000_black_ColorType_0, _null, _null, _null, B.HorizontalAlign_0, false, _null, B.StandardNumericNumFormat_0_General, _null, 0, _null, _null, B.Underline_0, B.VerticalAlign_2);
            for (t6 = B.JSArray_methods.get$iterator(t6.XmlHasChildren_children._base), t7 = new A.WhereTypeIterator(t6, t2); t7.moveNext$0();) {
              t8 = t4._as(t6.get$current(0));
              switch (t8.name.get$local()) {
                case "rPr":
                  for (t8 = B.JSArray_methods.get$iterator(t8.XmlHasChildren_children._base), t9 = new A.WhereTypeIterator(t8, t2); t9.moveNext$0();) {
                    t10 = t4._as(t8.get$current(0));
                    switch (t10.name.get$local()) {
                      case "b":
                        style = style.copyWith$1$boldVal(getBool.call$1(t10));
                        break;
                      case "i":
                        style = style.copyWith$1$italicVal(getBool.call$1(t10));
                        break;
                      case "u":
                        t10 = t10.getAttributeNode$2$namespace("val", _null);
                        style = style.copyWith$1$underlineVal((t10 == null ? _null : t10.value) === "double" ? B.Underline_2 : B.Underline_1);
                        break;
                      case "sz":
                        style = style.copyWith$1$fontSizeVal(getDouble.call$1(t10));
                        break;
                      case "rFont":
                        t10 = t10.getAttributeNode$2$namespace("val", _null);
                        style = style.copyWith$1$fontFamilyVal(t10 == null ? _null : t10.value);
                        break;
                      case "color":
                        t10 = t10.getAttributeNode$2$namespace("rgb", _null);
                        t10 = t10 == null ? _null : t10.value;
                        if (t10 == null)
                          t10 = _null;
                        else if (t10 === "none")
                          t10 = B.ExcelColor_none_null_null;
                        else if (A._assertHexString(t10)) {
                          t11 = A.ExcelColor_valuesAsMap().$index(0, t10);
                          t10 = t11 == null ? new A.ExcelColor(t10, _null, _null) : t11;
                        } else
                          t10 = B.ExcelColor_FF000000_black_ColorType_0;
                        style = style.copyWith$1$fontColorHexVal(t10);
                        break;
                    }
                  }
                  break;
                case "t":
                  if (children == null)
                    children = A._setArrayType([], t5);
                  B.JSArray_methods.add$1(children, new A.TextSpan(A.XmlStringExtension_get_innerText(t8), _null, style));
                  break;
              }
            }
            break;
          case "rPh":
            break;
        }
      }
      return new A.TextSpan(text, children, _null);
    },
    get$stringValue(_) {
      var t1,
        buffer = new A.StringBuffer("");
      A.filterElements(new A.XmlDescendantsIterable(this.node), "t", null).forEach$1(0, new A.SharedString_stringValue_closure(buffer));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$hashCode(_) {
      return this._hashCode;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SharedString && other._hashCode === this._hashCode && other.get$stringValue(0) === this.get$stringValue(0);
    }
  };
  A.SharedString_textSpan_getBool.prototype = {
    call$1(element) {
      var t1 = element.getAttribute$1(0, "val");
      t1 = A.Primitives_parseBool(t1 == null ? "" : t1, true);
      return t1 !== false;
    },
    $signature: 32
  };
  A.SharedString_textSpan_getDouble.prototype = {
    call$1(element) {
      var t1 = element.getAttribute$1(0, "val");
      t1.toString;
      return B.JSNumber_methods.toInt$0(A.double_parse(t1));
    },
    $signature: 33
  };
  A.SharedString_stringValue_closure.prototype = {
    call$1(child) {
      var t1, t2;
      type$.XmlElement._as(child);
      if (A.XmlParentExtension_get_parentElement(child) == null || A.XmlParentExtension_get_parentElement(child).name.get$local() !== "rPh") {
        t1 = this.buffer;
        t2 = A.Parser__parseValue(child);
        t1._contents += t2;
      }
    },
    $signature: 0
  };
  A.TextSpan.prototype = {
    toString$0(_) {
      var t1,
        r = this.text;
      r = r != null ? r : "";
      t1 = this.children;
      return t1 != null ? r + B.JSArray_methods.join$0(t1) : r;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A.TextSpan && other.text == _this.text && J.$eq$(other.style, _this.style) && new A.ListEquality(type$.ListEquality_dynamic).equals$2(other.children, _this.children);
    },
    get$hashCode(_) {
      var t1 = this.children;
      return A.Object_hash(this.text, this.style, A.Object_hashAll(t1 == null ? B.List_empty1 : t1), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.Border.prototype = {
    toString$0(_) {
      return "Border(borderStyle: " + A.S(this.borderStyle) + ", borderColorHex: " + A.S(this.borderColorHex) + ")";
    },
    get$props() {
      return [this.borderStyle, this.borderColorHex];
    }
  };
  A._BorderSet.prototype = {
    get$props() {
      var _this = this;
      return [_this.leftBorder, _this.rightBorder, _this.topBorder, _this.bottomBorder, _this.diagonalBorder, _this.diagonalBorderUp, _this.diagonalBorderDown];
    }
  };
  A.BorderStyle.prototype = {
    _enumToString$0() {
      return "BorderStyle." + this._core$_name;
    }
  };
  A.getBorderStyleByName_closure.prototype = {
    call$1(e) {
      return type$.BorderStyle._as(e)._enumToString$0().toLowerCase() === "borderstyle." + this.name.toLowerCase();
    },
    $signature: 34
  };
  A.CellIndex.prototype = {
    get$props() {
      return [this.rowIndex, this.columnIndex];
    }
  };
  A.CellStyle.prototype = {
    copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(boldVal, fontColorHexVal, fontFamilyVal, fontSizeVal, italicVal, numberFormat, underlineVal) {
      var _this = this,
        t1 = fontColorHexVal == null ? A.StringExt_get_excelColor(_this._fontColorHex) : fontColorHexVal,
        t2 = A.StringExt_get_excelColor(_this._backgroundColorHex),
        t3 = fontFamilyVal == null ? _this._fontFamily : fontFamilyVal,
        t4 = boldVal == null ? _this._bold : boldVal,
        t5 = italicVal == null ? _this._italic : italicVal,
        t6 = underlineVal == null ? B.Underline_0 : underlineVal,
        t7 = fontSizeVal == null ? _this._fontSize : fontSizeVal,
        t8 = numberFormat == null ? _this.numberFormat : numberFormat;
      return A.CellStyle$(t2, t4, _this._bottomBorder, _this._diagonalBorder, _this._diagonalBorderDown, _this._diagonalBorderUp, t1, t3, _this._fontScheme, t7, _this._horizontalAlign, t5, _this._leftBorder, t8, _this._rightBorder, _this._rotation, _this._textWrapping, _this._topBorder, t6, _this._verticalAlign);
    },
    copyWith$1$numberFormat(numberFormat) {
      var _null = null;
      return this.copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(_null, _null, _null, _null, _null, numberFormat, _null);
    },
    copyWith$1$boldVal(boldVal) {
      var _null = null;
      return this.copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(boldVal, _null, _null, _null, _null, _null, _null);
    },
    copyWith$1$italicVal(italicVal) {
      var _null = null;
      return this.copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(_null, _null, _null, _null, italicVal, _null, _null);
    },
    copyWith$1$underlineVal(underlineVal) {
      var _null = null;
      return this.copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(_null, _null, _null, _null, _null, _null, underlineVal);
    },
    copyWith$1$fontSizeVal(fontSizeVal) {
      var _null = null;
      return this.copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(_null, _null, _null, fontSizeVal, _null, _null, _null);
    },
    copyWith$1$fontFamilyVal(fontFamilyVal) {
      var _null = null;
      return this.copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(_null, _null, fontFamilyVal, _null, _null, _null, _null);
    },
    copyWith$1$fontColorHexVal(fontColorHexVal) {
      var _null = null;
      return this.copyWith$7$boldVal$fontColorHexVal$fontFamilyVal$fontSizeVal$italicVal$numberFormat$underlineVal(_null, fontColorHexVal, _null, _null, _null, _null, _null);
    },
    get$props() {
      var _this = this;
      return [_this._bold, _this._rotation, _this._italic, B.Underline_0, _this._fontSize, _this._fontFamily, _this._fontScheme, _this._textWrapping, _this._verticalAlign, _this._horizontalAlign, _this._fontColorHex, _this._backgroundColorHex, _this._leftBorder, _this._rightBorder, _this._topBorder, _this._bottomBorder, _this._diagonalBorder, _this._diagonalBorderUp, _this._diagonalBorderDown, _this.numberFormat];
    }
  };
  A.Data.prototype = {
    get$props() {
      var _this = this;
      return [_this._excel$_value, _this._columnIndex, _this._rowIndex, _this._cellStyle, _this._sheetName];
    }
  };
  A.CellValue.prototype = {};
  A.FormulaCellValue.prototype = {
    toString$0(_) {
      return this.formula;
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeTypeOfDartObject(this), this.formula, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.FormulaCellValue && other.formula === this.formula;
    }
  };
  A.IntCellValue.prototype = {
    toString$0(_) {
      return B.JSInt_methods.toString$0(this.value);
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeTypeOfDartObject(this), this.value, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.IntCellValue && other.value === this.value;
    }
  };
  A.DoubleCellValue.prototype = {
    toString$0(_) {
      return B.JSNumber_methods.toString$0(this.value);
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeTypeOfDartObject(this), this.value, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DoubleCellValue && other.value === this.value;
    }
  };
  A.DateCellValue.prototype = {
    toString$0(_) {
      return A.DateTime$utc(this.year, this.month, this.day, 0, 0, 0, 0, 0).toIso8601String$0();
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(A.getRuntimeTypeOfDartObject(_this), _this.year, _this.month, _this.day, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateCellValue && other.year === this.year && other.month === this.month && other.day === this.day;
    }
  };
  A.TextCellValue.prototype = {
    toString$0(_) {
      return this.value.toString$0(0);
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeTypeOfDartObject(this), this.value, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.TextCellValue && other.value.$eq(0, this.value);
    }
  };
  A.BoolCellValue.prototype = {
    toString$0(_) {
      return String(this.value);
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeTypeOfDartObject(this), this.value, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.BoolCellValue && other.value === this.value;
    }
  };
  A.TimeCellValue.prototype = {
    toString$0(_) {
      return A._twoDigits(this.hour) + ":" + A._twoDigits(this.minute) + ":" + A._twoDigits(this.second);
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(A.getRuntimeTypeOfDartObject(_this), _this.hour, _this.minute, _this.second, _this.millisecond, _this.microsecond, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.TimeCellValue && other.hour === _this.hour && other.minute === _this.minute && other.second === _this.second && other.millisecond === _this.millisecond && other.microsecond === _this.microsecond;
    }
  };
  A.DateTimeCellValue.prototype = {
    toString$0(_) {
      var _this = this;
      return A.DateTime$utc(_this.year, _this.month, _this.day, _this.hour, _this.minute, _this.second, _this.millisecond, _this.microsecond).toIso8601String$0();
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(A.getRuntimeTypeOfDartObject(_this), _this.year, _this.month, _this.day, _this.hour, _this.minute, _this.second, _this.millisecond, _this.microsecond);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.DateTimeCellValue && other.year === _this.year && other.month === _this.month && other.day === _this.day && other.hour === _this.hour && other.minute === _this.minute && other.second === _this.second && other.millisecond === _this.millisecond && other.microsecond === _this.microsecond;
    }
  };
  A._FontStyle.prototype = {
    get$props() {
      var _this = this;
      return [_this._bold, _this._italic, _this._fontSize, _this._underline, _this._fontFamily, _this._fontColorHex];
    }
  };
  A.Sheet.prototype = {
    Sheet$_$12$columnAutoFitVal$columnWidthsVal$headerFooter$isRTLVal$maxColumnsVal$maxRowsVal$rowHeightsVal$sh$spanI_$spanL_(_excel, _sheet, columnAutoFitVal, columnWidthsVal, headerFooter, isRTLVal, maxColumnsVal, maxRowsVal, rowHeightsVal, sh, spanI_, spanL_) {
      this._countRowsAndColumns$0();
    },
    get$rows(_) {
      var t1, _list, t2, rowIndex, _this = this,
        _data = A._setArrayType([], type$.JSArray_List_nullable_Data);
      if (_this._sheetData.__js_helper$_length === 0)
        return _data;
      t1 = _this._maxRows;
      if (t1 > 0 && _this._maxColumns > 0) {
        _list = J.JSArray_JSArray$allocateGrowable(t1, type$.List_nullable_Data);
        for (t2 = type$.nullable_Data, rowIndex = 0; rowIndex < t1; ++rowIndex)
          _list[rowIndex] = A.List_List$generate(_this._maxColumns, new A.Sheet_rows_closure(_this, rowIndex), t2);
        _data = _list;
      }
      return _data;
    },
    _countRowsAndColumns$0() {
      var _this = this, t1 = {},
        maximumRowIndex = t1.maximumColumnIndex = -1,
        t2 = _this._sheetData,
        t3 = A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>"),
        sortedKeys = A.List_List$of(new A.LinkedHashMapKeyIterable(t2, t3), true, t3._eval$1("Iterable.E"));
      B.JSArray_methods.sort$0(sortedKeys);
      B.JSArray_methods.forEach$1(sortedKeys, new A.Sheet__countRowsAndColumns_closure(t1, _this));
      if (sortedKeys.length !== 0)
        maximumRowIndex = B.JSArray_methods.get$last(sortedKeys);
      _this._maxColumns = t1.maximumColumnIndex + 1;
      _this._maxRows = maximumRowIndex + 1;
    },
    updateCell$3$cellStyle(cellIndex, value, cellStyle) {
      var _0_0, newRowIndex, newColumnIndex, row, cell, _this = this, _null = null,
        columnIndex = cellIndex.columnIndex,
        rowIndex = cellIndex.rowIndex,
        t1 = columnIndex < 0;
      if (t1 || rowIndex < 0)
        return;
      if (_this._maxColumns >= 16384 || columnIndex >= 16384)
        A.throwExpression(A.ArgumentError$("Reached Max (16384) or (XFD) columns value.", _null));
      if (t1)
        A.throwExpression(A.ArgumentError$("Negative columnIndex found: " + columnIndex, _null));
      if (_this._maxRows >= 1048576 || rowIndex >= 1048576)
        A.throwExpression(A.ArgumentError$("Reached Max (1048576) rows value.", _null));
      if (rowIndex < 0)
        A.throwExpression(A.ArgumentError$("Negative rowIndex found: " + rowIndex, _null));
      if (_this._spanList.length !== 0) {
        _0_0 = _this._isInsideSpanning$2(rowIndex, columnIndex);
        newRowIndex = _0_0._0;
        newColumnIndex = _0_0._1;
      } else {
        newColumnIndex = columnIndex;
        newRowIndex = rowIndex;
      }
      row = _this._sheetData.$index(0, newRowIndex);
      if (row == null) {
        row = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Data);
        _this._sheetData.$indexSet(0, newRowIndex, row);
      }
      cell = row.$index(0, newColumnIndex);
      if (cell == null) {
        cell = new A.Data(_null, _null, _this._sheet, newRowIndex, newColumnIndex);
        row.$indexSet(0, newColumnIndex, cell);
      }
      cell._excel$_value = value;
      t1 = A.CellStyle$(B.ExcelColor_none_null_null, false, _null, _null, false, false, B.ExcelColor_FF000000_black_ColorType_0, _null, _null, _null, B.HorizontalAlign_0, false, _null, A.NumFormat_defaultFor(value), _null, 0, _null, _null, B.Underline_0, B.VerticalAlign_2);
      cell._cellStyle = t1;
      t1.$eq(0, B.StandardNumericNumFormat_0_General);
      if (_this._maxColumns - 1 < newColumnIndex)
        _this._maxColumns = newColumnIndex + 1;
      if (_this._maxRows - 1 < newRowIndex)
        _this._maxRows = newRowIndex + 1;
      if (!cellStyle.numberFormat.accepts$1(value))
        cellStyle = cellStyle.copyWith$1$numberFormat(A.NumFormat_defaultFor(value));
      _this._sheetData.$index(0, newRowIndex).$index(0, newColumnIndex)._cellStyle = cellStyle;
    },
    _isInsideSpanning$2(rowIndex, columnIndex) {
      var newColumnIndex, newRowIndex, spanObj,
        t1 = this._spanList,
        t2 = t1.length,
        i = 0;
      while (true) {
        if (!(i < t2)) {
          newColumnIndex = columnIndex;
          newRowIndex = rowIndex;
          break;
        }
        c$0: {
          spanObj = t1[i];
          if (spanObj == null)
            break c$0;
          newRowIndex = spanObj.rowSpanStart;
          if (rowIndex >= newRowIndex && rowIndex <= spanObj.rowSpanEnd && columnIndex >= spanObj.columnSpanStart && columnIndex <= spanObj.columnSpanEnd) {
            newColumnIndex = spanObj.columnSpanStart;
            break;
          }
        }
        ++i;
      }
      return new A._Record_2(newRowIndex, newColumnIndex);
    }
  };
  A.Sheet_rows_closure.prototype = {
    call$1(columnIndex) {
      var t1 = this.$this,
        t2 = this.rowIndex;
      if (t1._sheetData.$index(0, t2) != null && t1._sheetData.$index(0, t2).$index(0, columnIndex) != null)
        return t1._sheetData.$index(0, t2).$index(0, columnIndex);
      return null;
    },
    $signature: 35
  };
  A.Sheet__countRowsAndColumns_closure.prototype = {
    call$1(rowKey) {
      var t1, t2, keys;
      A._asInt(rowKey);
      t1 = this.$this;
      if (t1._sheetData.$index(0, rowKey) != null && t1._sheetData.$index(0, rowKey).__js_helper$_length !== 0) {
        t1 = t1._sheetData.$index(0, rowKey);
        t1.toString;
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
        keys = A.List_List$of(new A.LinkedHashMapKeyIterable(t1, t2), true, t2._eval$1("Iterable.E"));
        B.JSArray_methods.sort$0(keys);
        if (keys.length !== 0) {
          t1 = B.JSArray_methods.get$last(keys);
          t2 = this._box_0.maximumColumnIndex;
          if (typeof t1 !== "number")
            return t1.$gt();
          t2 = t1 > t2;
          t1 = t2;
        } else
          t1 = false;
        if (t1)
          this._box_0.maximumColumnIndex = B.JSArray_methods.get$last(keys);
      }
    },
    $signature: 28
  };
  A._hexTableReverse_closure.prototype = {
    call$2(k, v) {
      A._asInt(k);
      return new A.MapEntry(A._asString(v), k, type$.MapEntry_String_int);
    },
    $signature: 37
  };
  A.ExcelColor.prototype = {
    get$colorHex() {
      var t1 = this._color;
      return A._assertHexString(t1) || t1 === "none" ? t1 : B.ExcelColor_FF000000_black_ColorType_0.get$colorHex();
    },
    get$colorInt() {
      var _s8_ = "FF000000",
        t1 = this._color;
      if (A._assertHexString(t1))
        t1 = A._hexadecimalToDecimal(t1);
      else
        t1 = A._assertHexString(_s8_) ? A._hexadecimalToDecimal(_s8_) : B.ExcelColor_FF000000_black_ColorType_0.get$colorInt();
      return t1;
    },
    get$props() {
      var _this = this,
        t1 = _this._color,
        t2 = _this.get$colorHex(),
        t3 = A._assertHexString(t1) ? A._hexadecimalToDecimal(t1) : B.ExcelColor_FF000000_black_ColorType_0.get$colorInt();
      return [_this._excel$_name, t1, _this._type, t2, t3];
    }
  };
  A.ExcelColor_valuesAsMap_closure.prototype = {
    call$2(_, v) {
      A._asInt(_);
      type$.ExcelColor._as(v);
      return new A.MapEntry(v.get$colorHex(), v, type$.MapEntry_String_ExcelColor);
    },
    $signature: 38
  };
  A.ColorType.prototype = {
    _enumToString$0() {
      return "ColorType." + this._core$_name;
    }
  };
  A.TextWrapping.prototype = {
    _enumToString$0() {
      return "TextWrapping." + this._core$_name;
    }
  };
  A.VerticalAlign.prototype = {
    _enumToString$0() {
      return "VerticalAlign." + this._core$_name;
    }
  };
  A.HorizontalAlign.prototype = {
    _enumToString$0() {
      return "HorizontalAlign." + this._core$_name;
    }
  };
  A.Underline.prototype = {
    _enumToString$0() {
      return "Underline." + this._core$_name;
    }
  };
  A.FontScheme.prototype = {
    _enumToString$0() {
      return "FontScheme." + this._core$_name;
    }
  };
  A.FastList.prototype = {};
  A._Span.prototype = {
    get$props() {
      var _this = this;
      return [_this.rowSpanStart, _this.columnSpanStart, _this.rowSpanEnd, _this.columnSpanEnd];
    }
  };
  A._cellCoordsFromCellId_closure.prototype = {
    call$1(rune) {
      return A._asInt(rune) > 0;
    },
    $signature: 22
  };
  A.ExcelFileRepository.prototype = {
    init$1(bytes) {
      return this.init$body$ExcelFileRepository(type$.List_int._as(bytes));
    },
    init$body$ExcelFileRepository(bytes) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$init$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.print("Worker init");
              t1 = A.Excel_Excel$decodeBytes(bytes);
              $async$self.excel = t1;
              A.print("Worker Number of sheets:  " + A.LinkedHashMap_LinkedHashMap$from(t1._sheetMap, type$.String, type$.Sheet).__js_helper$_length + " ");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$1, $async$completer);
    },
    getColumnCount$0() {
      var sheet,
        t1 = type$.String,
        t2 = type$.Sheet,
        t3 = A.LinkedHashMap_LinkedHashMap$from(this.excel._sheetMap, t1, t2);
      t2 = A.LinkedHashMap_LinkedHashMap$from(this.excel._sheetMap, t1, t2);
      sheet = t3.$index(0, new A.LinkedHashMapKeyIterable(t2, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>")).get$first(0));
      if (sheet == null || sheet.get$rows(0).length === 0)
        return 0;
      return sheet._maxColumns;
    },
    getData$0(_) {
      var sheet,
        t1 = type$.String,
        t2 = type$.Sheet,
        t3 = A.LinkedHashMap_LinkedHashMap$from(this.excel._sheetMap, t1, t2);
      t2 = A.LinkedHashMap_LinkedHashMap$from(this.excel._sheetMap, t1, t2);
      sheet = t3.$index(0, new A.LinkedHashMapKeyIterable(t2, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>")).get$first(0));
      if (sheet == null)
        return A._setArrayType([], type$.JSArray_List_nullable_CellValue);
      t1 = sheet.get$rows(0);
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,List<CellValue?>>");
      return A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("List<CellValue?>(1)")._as(new A.ExcelFileRepository_getData_closure()), t3), true, t3._eval$1("ListIterable.E"));
    }
  };
  A.ExcelFileRepository_getData_closure.prototype = {
    call$1(row) {
      var t1 = J.map$1$1$ax(type$.List_nullable_Data._as(row), new A.ExcelFileRepository_getData__closure(), type$.nullable_CellValue);
      return A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
    },
    $signature: 40
  };
  A.ExcelFileRepository_getData__closure.prototype = {
    call$1(cell) {
      type$.nullable_Data._as(cell);
      return cell == null ? null : cell._excel$_value;
    },
    $signature: 41
  };
  A._$ExcelFileRepositoryWorkerService.prototype = {
    get$operations() {
      var t1, t2, result, _this = this,
        value = _this.___$ExcelFileRepositoryWorkerService_operations_FI;
      if (value === $) {
        t1 = type$.int;
        t2 = type$.dynamic_Function_List_dynamic;
        result = A.ConstantMap_ConstantMap$from(A.LinkedHashMap_LinkedHashMap$_literal([1, new A._$ExcelFileRepositoryWorkerService_operations_closure(_this), 2, new A._$ExcelFileRepositoryWorkerService_operations_closure0(_this), 3, new A._$ExcelFileRepositoryWorkerService_operations_closure1(_this), 4, new A._$ExcelFileRepositoryWorkerService_operations_closure2(_this)], t1, t2), t1, t2);
        _this.___$ExcelFileRepositoryWorkerService_operations_FI !== $ && A.throwLateFieldADI("operations");
        _this.set$___$ExcelFileRepositoryWorkerService_operations_FI(result);
        value = result;
      }
      return value;
    },
    set$___$ExcelFileRepositoryWorkerService_operations_FI(___$ExcelFileRepositoryWorkerService_operations_FI) {
      this.___$ExcelFileRepositoryWorkerService_operations_FI = type$.Map_of_int_and_dynamic_Function_List_dynamic._as(___$ExcelFileRepositoryWorkerService_operations_FI);
    },
    $isWorkerService: 1
  };
  A._$ExcelFileRepositoryWorkerService_operations_closure.prototype = {
    call$1($$) {
      type$.List_dynamic._as($$);
      return this.$this.getColumnCount$0();
    },
    $signature: 42
  };
  A._$ExcelFileRepositoryWorkerService_operations_closure0.prototype = {
    call$1($$) {
      return this.$call$body$_$ExcelFileRepositoryWorkerService_operations_closure(type$.List_dynamic._as($$));
    },
    $call$body$_$ExcelFileRepositoryWorkerService_operations_closure($$) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_List_dynamic),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._$X_$impl();
              t2 = type$.List_List_nullable_CellValue;
              t2 = A._Future$value(t2._as($async$self.$this.getData$0(0)), t2);
              $async$temp1 = t1;
              $async$goto = 3;
              return A._asyncAwait(t2, $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.$$sr1$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 43
  };
  A._$ExcelFileRepositoryWorkerService_operations_closure1.prototype = {
    call$1($$) {
      var t1;
      type$.List_dynamic._as($$);
      t1 = A.LinkedHashMap_LinkedHashMap$from(this.$this.excel._sheetMap, type$.String, type$.Sheet);
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).get$first(0);
    },
    $signature: 44
  };
  A._$ExcelFileRepositoryWorkerService_operations_closure2.prototype = {
    call$1($$) {
      var t1 = type$.List_dynamic;
      t1._as($$);
      return this.$this.init$1(A._$X_$impl().$$dsr3$1(J.$index$asx(t1._as(J.$index$asx($$, 3)), 0)));
    },
    $signature: 45
  };
  A._$X.prototype = {
    get$$$sr1() {
      var t1, result, _this = this,
        value = _this.___$X_$sr1_FI;
      if (value === $) {
        t1 = $.$get$Squadron__converter();
        value = _this.___$X_$sr0_FI;
        if (value === $) {
          result = t1.list$1$0(0, type$.dynamic);
          _this.___$X_$sr0_FI !== $ && A.throwLateFieldADI("$sr0");
          _this.set$___$X_$sr0_FI(result);
          value = result;
        }
        result = t1.list$1$1(0, value, type$.List_dynamic);
        _this.___$X_$sr1_FI !== $ && A.throwLateFieldADI("$sr1");
        _this.set$___$X_$sr1_FI(result);
        value = result;
      }
      return value;
    },
    get$$$dsr3() {
      var t1, result, _this = this,
        value = _this.___$X_$dsr3_FI;
      if (value === $) {
        t1 = $.$get$Squadron__converter();
        value = _this.___$X_$dsr2_FI;
        if (value === $) {
          result = t1.value$1$0(0, type$.int);
          _this.___$X_$dsr2_FI !== $ && A.throwLateFieldADI("$dsr2");
          _this.set$___$X_$dsr2_FI(result);
          value = result;
        }
        result = t1.list$1$1(0, value, type$.int);
        _this.___$X_$dsr3_FI !== $ && A.throwLateFieldADI("$dsr3");
        _this.set$___$X_$dsr3_FI(result);
        value = result;
      }
      return value;
    },
    get$$$dsr5() {
      var t1, result, _this = this,
        value = _this.___$X_$dsr5_FI;
      if (value === $) {
        t1 = $.$get$Squadron__converter();
        value = _this.___$X_$dsr4_FI;
        if (value === $) {
          result = t1.value$1$0(0, type$.Excel);
          _this.___$X_$dsr4_FI !== $ && A.throwLateFieldADI("$dsr4");
          _this.set$___$X_$dsr4_FI(result);
          value = result;
        }
        result = t1.nullable$1$1(value, type$.Excel);
        _this.___$X_$dsr5_FI !== $ && A.throwLateFieldADI("$dsr5");
        _this.set$___$X_$dsr5_FI(result);
        value = result;
      }
      return value;
    },
    set$___$X_$sr0_FI(___$X_$sr0_FI) {
      this.___$X_$sr0_FI = type$.List_dynamic_Function_dynamic._as(___$X_$sr0_FI);
    },
    set$___$X_$sr1_FI(___$X_$sr1_FI) {
      this.___$X_$sr1_FI = type$.List_List_dynamic_Function_dynamic._as(___$X_$sr1_FI);
    },
    set$___$X_$dsr2_FI(___$X_$dsr2_FI) {
      this.___$X_$dsr2_FI = type$.int_Function_dynamic._as(___$X_$dsr2_FI);
    },
    set$___$X_$dsr3_FI(___$X_$dsr3_FI) {
      this.___$X_$dsr3_FI = type$.List_int_Function_dynamic._as(___$X_$dsr3_FI);
    },
    set$___$X_$dsr4_FI(___$X_$dsr4_FI) {
      this.___$X_$dsr4_FI = type$.Excel_Function_dynamic._as(___$X_$dsr4_FI);
    },
    set$___$X_$dsr5_FI(___$X_$dsr5_FI) {
      this.___$X_$dsr5_FI = type$.nullable_Excel_Function_dynamic._as(___$X_$dsr5_FI);
    },
    $$sr1$1(arg0) {
      return this.get$$$sr1().call$1(arg0);
    },
    $$dsr3$1(arg0) {
      return this.get$$$dsr3().call$1(arg0);
    },
    $$dsr5$1(arg0) {
      return this.get$$$dsr5().call$1(arg0);
    }
  };
  A._$X_$impl_closure.prototype = {
    call$0() {
      return $._$X__impl = A._$X$_();
    },
    $signature: 1
  };
  A.LogEvent.prototype = {};
  A.LogFilter.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.Level.prototype = {
    _enumToString$0() {
      return "Level." + this._core$_name;
    }
  };
  A.LogOutput.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.LogPrinter.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.Logger.prototype = {
    Logger$4$filter$level$output$printer(filter, level, output, printer) {
      var _this = this,
        filterInit = _this._filter.init$0(),
        t1 = A.Future_wait(A._setArrayType([filterInit, _this._printer.init$0(), _this._output.init$0()], type$.JSArray_Future_void), type$.void);
      _this.__Logger__initialization_F !== $ && A.throwLateFieldAI("_initialization");
      _this.__Logger__initialization_F = t1;
    },
    e$1(_, message) {
      this.log$5$error$stackTrace$time(B.Level_5000_error, message, null, null, null);
    },
    log$5$error$stackTrace$time(level, message, error, stackTrace, time) {
      var outputEvent, callback, e, s, t1, logEvent, t2, callback0, output, exception;
      if (level === B.Level_0_all)
        throw A.wrapException(A.ArgumentError$("Log events cannot have Level.all", null));
      else if (level === B.Level_10000_off || level === B.Level_9999_nothing)
        throw A.wrapException(A.ArgumentError$("Log events cannot have Level.off", null));
      t1 = Date.now();
      logEvent = new A.LogEvent(level, message, error, stackTrace, new A.DateTime(t1, 0, false));
      for (t1 = A._LinkedHashSetIterator$($.Logger__logCallbacks, $.Logger__logCallbacks._collection$_modifications, $.Logger__logCallbacks.$ti._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        callback0 = t1._collection$_current;
        (callback0 == null ? t2._as(callback0) : callback0).call$1(logEvent);
      }
      if (this._filter.shouldLog$1(logEvent)) {
        output = this._printer.log$1(logEvent);
        if (output.length !== 0) {
          outputEvent = new A.OutputEvent(output, logEvent);
          try {
            for (t1 = A._LinkedHashSetIterator$($.Logger__outputCallbacks, $.Logger__outputCallbacks._collection$_modifications, $.Logger__outputCallbacks.$ti._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
              callback0 = t1._collection$_current;
              callback = callback0 == null ? t2._as(callback0) : callback0;
              callback.call$1(outputEvent);
            }
            this._output.output$1(outputEvent);
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            A.print(e);
            A.print(s);
          }
        }
      }
    }
  };
  A.OutputEvent.prototype = {};
  A.Context.prototype = {
    toString$0(_) {
      return "Context[" + A.Token_positionString(this.buffer, this.position) + "]";
    }
  };
  A.ParserException.prototype = {
    toString$0(_) {
      var t1 = this.failure;
      return this.super$Object$toString(0) + ": " + t1.message + " (at " + A.Token_positionString(t1.buffer, t1.position) + ")";
    }
  };
  A.Parser0.prototype = {
    fastParseOn$2(buffer, position) {
      var result = this.parseOn$1(new A.Context(buffer, position));
      return result instanceof A.Failure ? -1 : result.position;
    },
    get$children(_) {
      return B.List_empty3;
    },
    replace$2(_, source, target) {
    },
    toString$0(_) {
      var result = this.super$Object$toString(0);
      return B.JSString_methods.startsWith$1(result, "Instance of '") ? B.JSString_methods.replaceFirst$2(B.JSString_methods.substring$1(result, 13), "'", "") : result;
    }
  };
  A.Result.prototype = {};
  A.Success.prototype = {
    get$message(_) {
      return A.throwExpression(A.UnsupportedError$("Successful parse results do not have a message."));
    },
    toString$0(_) {
      return "Success[" + A.Token_positionString(this.buffer, this.position) + "]: " + A.S(this.value);
    },
    get$value(receiver) {
      return this.value;
    }
  };
  A.Failure.prototype = {
    get$value(_) {
      return A.throwExpression(new A.ParserException(this));
    },
    toString$0(_) {
      return "Failure[" + A.Token_positionString(this.buffer, this.position) + "]: " + this.message;
    },
    get$message(receiver) {
      return this.message;
    }
  };
  A.Token.prototype = {
    get$length(_) {
      return this.stop - this.start;
    },
    toString$0(_) {
      return "Token[" + A.Token_positionString(this.buffer, this.start) + "]: " + A.S(this.value);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Token && J.$eq$(this.value, other.value) && this.start === other.start && this.stop === other.stop;
    },
    get$hashCode(_) {
      return J.get$hashCode$(this.value) + B.JSInt_methods.get$hashCode(this.start) + B.JSInt_methods.get$hashCode(this.stop);
    }
  };
  A.ReferenceParser.prototype = {
    parseOn$1(context) {
      return A._throwUnsupported();
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.ReferenceParser) {
        t1 = J.$eq$(this.$function, other.$function);
        if (!t1)
          return false;
        for (t1 = this.$arguments; false;) {
          if (0 >= 0)
            return A.ioore(t1, 0);
          return false;
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return J.get$hashCode$(this.$function);
    },
    $isResolvableParser: 1
  };
  A.MatchesIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.MatchesIterator(_this.parser, _this.input, false, _this.start, _this.$ti._eval$1("MatchesIterator<1>"));
    }
  };
  A.MatchesIterator.prototype = {
    get$current(_) {
      var t1 = this.__MatchesIterator_current_A;
      t1 === $ && A.throwLateFieldNI("current");
      return t1;
    },
    moveNext$0() {
      var t1, t2, t3, t4, end, _this = this;
      for (t1 = _this.input, t2 = t1.length, t3 = _this.parser; t4 = _this.start, t4 <= t2;) {
        end = t3.delegate.fastParseOn$2(t1, t4);
        t4 = _this.start;
        if (end < 0)
          _this.start = t4 + 1;
        else {
          t1 = t3.parseOn$1(new A.Context(t1, t4));
          _this.set$__MatchesIterator_current_A(_this.$ti._precomputed1._as(t1.get$value(t1)));
          t1 = _this.start;
          if (t1 === end)
            _this.start = t1 + 1;
          else
            _this.start = end;
          return true;
        }
      }
      return false;
    },
    set$__MatchesIterator_current_A(__MatchesIterator_current_A) {
      this.__MatchesIterator_current_A = this.$ti._precomputed1._as(__MatchesIterator_current_A);
    },
    $isIterator: 1
  };
  A.FlattenParser.prototype = {
    parseOn$1(context) {
      var output,
        t1 = context.buffer,
        t2 = context.position,
        position = this.delegate.fastParseOn$2(t1, t2);
      if (position < 0)
        return new A.Failure(this.message, t1, t2);
      output = B.JSString_methods.substring$2(t1, t2, position);
      return new A.Success(output, t1, position, type$.Success_String);
    },
    fastParseOn$2(buffer, position) {
      return this.delegate.fastParseOn$2(buffer, position);
    },
    toString$0(_) {
      var t1 = this.super$Parser$toString(0);
      return t1 + "[" + this.message + "]";
    }
  };
  A.MapParser.prototype = {
    parseOn$1(context) {
      var t1, t2,
        result = this.delegate.parseOn$1(context);
      if (result instanceof A.Failure)
        return result;
      t1 = this.$ti;
      t2 = t1._rest[1]._as(this.callback.call$1(result.get$value(result)));
      return new A.Success(t2, result.buffer, result.position, t1._eval$1("Success<2>"));
    },
    fastParseOn$2(buffer, position) {
      var t1 = this.delegate.fastParseOn$2(buffer, position);
      return t1;
    }
  };
  A.TokenParser.prototype = {
    parseOn$1(context) {
      var t1, t2, t3,
        result = this.delegate.parseOn$1(context);
      if (result instanceof A.Failure)
        return result;
      t1 = result.position;
      t2 = this.$ti;
      t3 = t2._eval$1("Token<1>");
      t3 = t3._as(new A.Token(result.get$value(result), context.buffer, context.position, t1, t3));
      return new A.Success(t3, result.buffer, t1, t2._eval$1("Success<Token<1>>"));
    },
    fastParseOn$2(buffer, position) {
      return this.delegate.fastParseOn$2(buffer, position);
    }
  };
  A.SingleCharPredicate.prototype = {
    test$1(value) {
      return this.value === value;
    }
  };
  A.ConstantCharPredicate.prototype = {
    test$1(value) {
      return this.constant;
    }
  };
  A.LookupCharPredicate.prototype = {
    LookupCharPredicate$1(ranges) {
      var t1, t2, t3, t4, t5, _i, range, index, t6, t7, t8, t9;
      for (t1 = ranges.length, t2 = this.start, t3 = this.bits, t4 = t3.length, t5 = t3.$flags | 0, _i = 0; _i < t1; ++_i) {
        range = ranges[_i];
        for (index = range.start - t2, t6 = range.stop - t2; index <= t6; ++index) {
          t7 = B.JSInt_methods._shrOtherPositive$1(index, 5);
          if (!(t7 < t4))
            return A.ioore(t3, t7);
          t8 = t3[t7];
          t9 = B.List_ouN[index & 31];
          t5 & 2 && A.throwUnsupportedOperation(t3);
          t3[t7] = (t8 | t9) >>> 0;
        }
      }
    },
    test$1(value) {
      var t3,
        t1 = this.start,
        t2 = false;
      if (t1 <= value)
        if (value <= this.stop) {
          t1 = value - t1;
          t2 = this.bits;
          t3 = B.JSInt_methods._shrOtherPositive$1(t1, 5);
          if (!(t3 < t2.length))
            return A.ioore(t2, t3);
          t1 = (t2[t3] & B.List_ouN[t1 & 31]) >>> 0 !== 0;
        } else
          t1 = t2;
      else
        t1 = t2;
      return t1;
    },
    $isCharacterPredicate: 1
  };
  A.NotCharacterPredicate.prototype = {
    test$1(value) {
      return !this.predicate.test$1(value);
    }
  };
  A.optimizedRanges_closure.prototype = {
    call$2(first, second) {
      var t2,
        t1 = type$.RangeCharPredicate;
      t1._as(first);
      t1._as(second);
      t1 = first.start;
      t2 = second.start;
      return t1 !== t2 ? t1 - t2 : first.stop - second.stop;
    },
    $signature: 46
  };
  A.optimizedRanges_closure0.prototype = {
    call$2(current, range) {
      A._asInt(current);
      type$.RangeCharPredicate._as(range);
      return current + (range.stop - range.start + 1);
    },
    $signature: 47
  };
  A._single_closure.prototype = {
    call$1(element) {
      A._asString(element);
      if (0 >= element.length)
        return A.ioore(element, 0);
      return new A.RangeCharPredicate(element.charCodeAt(0), element.charCodeAt(0));
    },
    $signature: 48
  };
  A._range_closure.prototype = {
    call$3(start, _, $stop) {
      A._asString(start);
      A._asString(_);
      A._asString($stop);
      if (0 >= start.length)
        return A.ioore(start, 0);
      if (0 >= $stop.length)
        return A.ioore($stop, 0);
      return new A.RangeCharPredicate(start.charCodeAt(0), $stop.charCodeAt(0));
    },
    $signature: 49
  };
  A._pattern_closure.prototype = {
    call$2(negation, sequence) {
      var t1;
      A._asStringQ(negation);
      type$.CharacterPredicate._as(sequence);
      if (negation == null)
        t1 = sequence;
      else
        t1 = sequence instanceof A.ConstantCharPredicate ? new A.ConstantCharPredicate(!sequence.constant) : new A.NotCharacterPredicate(sequence);
      return t1;
    },
    $signature: 50
  };
  A.CharacterPredicate.prototype = {};
  A.RangeCharPredicate.prototype = {
    test$1(value) {
      return this.start <= value && value <= this.stop;
    },
    $isCharacterPredicate: 1
  };
  A.WhitespaceCharPredicate.prototype = {
    test$1(value) {
      if (value < 256)
        switch (value) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (value) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    $isCharacterPredicate: 1
  };
  A.ChoiceParser.prototype = {
    parseOn$1(context) {
      var result, t3, failure, i,
        t1 = this.children,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      result = t1[0].parseOn$1(context);
      if (!(result instanceof A.Failure))
        return result;
      for (t3 = this.failureJoiner, failure = result, i = 1; i < t2; ++i) {
        result = t1[i].parseOn$1(context);
        if (!(result instanceof A.Failure))
          return result;
        failure = t3.call$2(failure, result);
      }
      return failure;
    },
    fastParseOn$2(buffer, position) {
      var t1, t2, result, i;
      for (t1 = this.children, t2 = t1.length, result = -1, i = 0; i < t2; ++i) {
        result = t1[i].fastParseOn$2(buffer, position);
        if (result >= 0)
          return result;
      }
      return result;
    }
  };
  A.DelegateParser.prototype = {
    get$children(_) {
      return A._setArrayType([this.delegate], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      var _this = this;
      _this.super$Parser$replace(0, source, target);
      if (_this.delegate.$eq(0, source))
        _this.set$delegate(A._instanceType(_this)._eval$1("Parser0<DelegateParser.T>")._as(target));
    },
    set$delegate(delegate) {
      this.delegate = A._instanceType(this)._eval$1("Parser0<DelegateParser.T>")._as(delegate);
    }
  };
  A.SequenceParser2.prototype = {
    parseOn$1(context) {
      var result2, t1,
        result1 = this.parser1.parseOn$1(context);
      if (result1 instanceof A.Failure)
        return result1;
      result2 = this.parser2.parseOn$1(result1);
      if (result2 instanceof A.Failure)
        return result2;
      t1 = this.$ti;
      result1 = t1._eval$1("+(1,2)")._as(new A._Record_2(result1.get$value(result1), result2.get$value(result2)));
      return new A.Success(result1, result2.buffer, result2.position, t1._eval$1("Success<+(1,2)>"));
    },
    fastParseOn$2(buffer, position) {
      position = this.parser1.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = this.parser2.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      return position;
    },
    get$children(_) {
      return A._setArrayType([this.parser1, this.parser2], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      var _this = this;
      _this.super$Parser$replace(0, source, target);
      if (_this.parser1.$eq(0, source))
        _this.set$parser1(_this.$ti._eval$1("Parser0<1>")._as(target));
      if (_this.parser2.$eq(0, source))
        _this.set$parser2(_this.$ti._eval$1("Parser0<2>")._as(target));
    },
    set$parser1(parser1) {
      this.parser1 = this.$ti._eval$1("Parser0<1>")._as(parser1);
    },
    set$parser2(parser2) {
      this.parser2 = this.$ti._eval$1("Parser0<2>")._as(parser2);
    }
  };
  A.RecordParserExtension2_map2_closure.prototype = {
    call$1(record) {
      this.T1._eval$1("@<0>")._bind$1(this.T2)._eval$1("+(1,2)")._as(record);
      return this.callback.call$2(record._0, record._1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T1)._bind$1(this.T2)._eval$1("1(+(2,3))");
    }
  };
  A.SequenceParser3.prototype = {
    parseOn$1(context) {
      var result2, result3, t1, _this = this,
        result1 = _this.parser1.parseOn$1(context);
      if (result1 instanceof A.Failure)
        return result1;
      result2 = _this.parser2.parseOn$1(result1);
      if (result2 instanceof A.Failure)
        return result2;
      result3 = _this.parser3.parseOn$1(result2);
      if (result3 instanceof A.Failure)
        return result3;
      t1 = _this.$ti;
      result2 = t1._eval$1("+(1,2,3)")._as(new A._Record_3(result1.get$value(result1), result2.get$value(result2), result3.get$value(result3)));
      return new A.Success(result2, result3.buffer, result3.position, t1._eval$1("Success<+(1,2,3)>"));
    },
    fastParseOn$2(buffer, position) {
      position = this.parser1.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = this.parser2.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = this.parser3.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      return position;
    },
    get$children(_) {
      return A._setArrayType([this.parser1, this.parser2, this.parser3], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      var _this = this;
      _this.super$Parser$replace(0, source, target);
      if (_this.parser1.$eq(0, source))
        _this.set$parser1(_this.$ti._eval$1("Parser0<1>")._as(target));
      if (_this.parser2.$eq(0, source))
        _this.set$parser2(_this.$ti._eval$1("Parser0<2>")._as(target));
      if (_this.parser3.$eq(0, source))
        _this.set$parser3(_this.$ti._eval$1("Parser0<3>")._as(target));
    },
    set$parser1(parser1) {
      this.parser1 = this.$ti._eval$1("Parser0<1>")._as(parser1);
    },
    set$parser2(parser2) {
      this.parser2 = this.$ti._eval$1("Parser0<2>")._as(parser2);
    },
    set$parser3(parser3) {
      this.parser3 = this.$ti._eval$1("Parser0<3>")._as(parser3);
    }
  };
  A.RecordParserExtension3_map3_closure.prototype = {
    call$1(record) {
      var _this = this;
      _this.T1._eval$1("@<0>")._bind$1(_this.T2)._bind$1(_this.T3)._eval$1("+(1,2,3)")._as(record);
      return _this.callback.call$3(record._0, record._1, record._2);
    },
    $signature() {
      var _this = this;
      return _this.R._eval$1("@<0>")._bind$1(_this.T1)._bind$1(_this.T2)._bind$1(_this.T3)._eval$1("1(+(2,3,4))");
    }
  };
  A.SequenceParser4.prototype = {
    parseOn$1(context) {
      var result2, result3, result4, t1, _this = this,
        result1 = _this.parser1.parseOn$1(context);
      if (result1 instanceof A.Failure)
        return result1;
      result2 = _this.parser2.parseOn$1(result1);
      if (result2 instanceof A.Failure)
        return result2;
      result3 = _this.parser3.parseOn$1(result2);
      if (result3 instanceof A.Failure)
        return result3;
      result4 = _this.parser4.parseOn$1(result3);
      if (result4 instanceof A.Failure)
        return result4;
      t1 = _this.$ti;
      result3 = t1._eval$1("+(1,2,3,4)")._as(new A._Record_4([result1.get$value(result1), result2.get$value(result2), result3.get$value(result3), result4.get$value(result4)]));
      return new A.Success(result3, result4.buffer, result4.position, t1._eval$1("Success<+(1,2,3,4)>"));
    },
    fastParseOn$2(buffer, position) {
      var _this = this;
      position = _this.parser1.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser2.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser3.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser4.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      return position;
    },
    get$children(_) {
      var _this = this;
      return A._setArrayType([_this.parser1, _this.parser2, _this.parser3, _this.parser4], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      var _this = this;
      _this.super$Parser$replace(0, source, target);
      if (_this.parser1.$eq(0, source))
        _this.set$parser1(_this.$ti._eval$1("Parser0<1>")._as(target));
      if (_this.parser2.$eq(0, source))
        _this.set$parser2(_this.$ti._eval$1("Parser0<2>")._as(target));
      if (_this.parser3.$eq(0, source))
        _this.set$parser3(_this.$ti._eval$1("Parser0<3>")._as(target));
      if (_this.parser4.$eq(0, source))
        _this.set$parser4(_this.$ti._eval$1("Parser0<4>")._as(target));
    },
    set$parser1(parser1) {
      this.parser1 = this.$ti._eval$1("Parser0<1>")._as(parser1);
    },
    set$parser2(parser2) {
      this.parser2 = this.$ti._eval$1("Parser0<2>")._as(parser2);
    },
    set$parser3(parser3) {
      this.parser3 = this.$ti._eval$1("Parser0<3>")._as(parser3);
    },
    set$parser4(parser4) {
      this.parser4 = this.$ti._eval$1("Parser0<4>")._as(parser4);
    }
  };
  A.RecordParserExtension4_map4_closure.prototype = {
    call$1(record) {
      var _this = this,
        t1 = _this.T1._eval$1("@<0>")._bind$1(_this.T2)._bind$1(_this.T3)._bind$1(_this.T4)._eval$1("+(1,2,3,4)")._as(record)._values;
      return _this.callback.call$4(t1[0], t1[1], t1[2], t1[3]);
    },
    $signature() {
      var _this = this;
      return _this.R._eval$1("@<0>")._bind$1(_this.T1)._bind$1(_this.T2)._bind$1(_this.T3)._bind$1(_this.T4)._eval$1("1(+(2,3,4,5))");
    }
  };
  A.SequenceParser5.prototype = {
    parseOn$1(context) {
      var result2, result3, result4, result5, t1, _this = this,
        result1 = _this.parser1.parseOn$1(context);
      if (result1 instanceof A.Failure)
        return result1;
      result2 = _this.parser2.parseOn$1(result1);
      if (result2 instanceof A.Failure)
        return result2;
      result3 = _this.parser3.parseOn$1(result2);
      if (result3 instanceof A.Failure)
        return result3;
      result4 = _this.parser4.parseOn$1(result3);
      if (result4 instanceof A.Failure)
        return result4;
      result5 = _this.parser5.parseOn$1(result4);
      if (result5 instanceof A.Failure)
        return result5;
      t1 = _this.$ti;
      result4 = t1._eval$1("+(1,2,3,4,5)")._as(new A._Record_5([result1.get$value(result1), result2.get$value(result2), result3.get$value(result3), result4.get$value(result4), result5.get$value(result5)]));
      return new A.Success(result4, result5.buffer, result5.position, t1._eval$1("Success<+(1,2,3,4,5)>"));
    },
    fastParseOn$2(buffer, position) {
      var _this = this;
      position = _this.parser1.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser2.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser3.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser4.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser5.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      return position;
    },
    get$children(_) {
      var _this = this;
      return A._setArrayType([_this.parser1, _this.parser2, _this.parser3, _this.parser4, _this.parser5], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      var _this = this;
      _this.super$Parser$replace(0, source, target);
      if (_this.parser1.$eq(0, source))
        _this.set$parser1(_this.$ti._eval$1("Parser0<1>")._as(target));
      if (_this.parser2.$eq(0, source))
        _this.set$parser2(_this.$ti._eval$1("Parser0<2>")._as(target));
      if (_this.parser3.$eq(0, source))
        _this.set$parser3(_this.$ti._eval$1("Parser0<3>")._as(target));
      if (_this.parser4.$eq(0, source))
        _this.set$parser4(_this.$ti._eval$1("Parser0<4>")._as(target));
      if (_this.parser5.$eq(0, source))
        _this.set$parser5(_this.$ti._eval$1("Parser0<5>")._as(target));
    },
    set$parser1(parser1) {
      this.parser1 = this.$ti._eval$1("Parser0<1>")._as(parser1);
    },
    set$parser2(parser2) {
      this.parser2 = this.$ti._eval$1("Parser0<2>")._as(parser2);
    },
    set$parser3(parser3) {
      this.parser3 = this.$ti._eval$1("Parser0<3>")._as(parser3);
    },
    set$parser4(parser4) {
      this.parser4 = this.$ti._eval$1("Parser0<4>")._as(parser4);
    },
    set$parser5(parser5) {
      this.parser5 = this.$ti._eval$1("Parser0<5>")._as(parser5);
    }
  };
  A.RecordParserExtension5_map5_closure.prototype = {
    call$1(record) {
      var _this = this,
        t1 = _this.T1._eval$1("@<0>")._bind$1(_this.T2)._bind$1(_this.T3)._bind$1(_this.T4)._bind$1(_this.T5)._eval$1("+(1,2,3,4,5)")._as(record)._values;
      return _this.callback.call$5(t1[0], t1[1], t1[2], t1[3], t1[4]);
    },
    $signature() {
      var _this = this;
      return _this.R._eval$1("@<0>")._bind$1(_this.T1)._bind$1(_this.T2)._bind$1(_this.T3)._bind$1(_this.T4)._bind$1(_this.T5)._eval$1("1(+(2,3,4,5,6))");
    }
  };
  A.SequenceParser8.prototype = {
    parseOn$1(context) {
      var result2, result3, result4, result5, result6, result7, result8, t1, _this = this,
        result1 = _this.parser1.parseOn$1(context);
      if (result1 instanceof A.Failure)
        return result1;
      result2 = _this.parser2.parseOn$1(result1);
      if (result2 instanceof A.Failure)
        return result2;
      result3 = _this.parser3.parseOn$1(result2);
      if (result3 instanceof A.Failure)
        return result3;
      result4 = _this.parser4.parseOn$1(result3);
      if (result4 instanceof A.Failure)
        return result4;
      result5 = _this.parser5.parseOn$1(result4);
      if (result5 instanceof A.Failure)
        return result5;
      result6 = _this.parser6.parseOn$1(result5);
      if (result6 instanceof A.Failure)
        return result6;
      result7 = _this.parser7.parseOn$1(result6);
      if (result7 instanceof A.Failure)
        return result7;
      result8 = _this.parser8.parseOn$1(result7);
      if (result8 instanceof A.Failure)
        return result8;
      t1 = _this.$ti;
      result7 = t1._eval$1("+(1,2,3,4,5,6,7,8)")._as(new A._Record_8([result1.get$value(result1), result2.get$value(result2), result3.get$value(result3), result4.get$value(result4), result5.get$value(result5), result6.get$value(result6), result7.get$value(result7), result8.get$value(result8)]));
      return new A.Success(result7, result8.buffer, result8.position, t1._eval$1("Success<+(1,2,3,4,5,6,7,8)>"));
    },
    fastParseOn$2(buffer, position) {
      var _this = this;
      position = _this.parser1.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser2.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser3.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser4.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser5.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser6.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser7.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = _this.parser8.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      return position;
    },
    get$children(_) {
      var _this = this;
      return A._setArrayType([_this.parser1, _this.parser2, _this.parser3, _this.parser4, _this.parser5, _this.parser6, _this.parser7, _this.parser8], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      var _this = this;
      _this.super$Parser$replace(0, source, target);
      if (_this.parser1.$eq(0, source))
        _this.set$parser1(_this.$ti._eval$1("Parser0<1>")._as(target));
      if (_this.parser2.$eq(0, source))
        _this.set$parser2(_this.$ti._eval$1("Parser0<2>")._as(target));
      if (_this.parser3.$eq(0, source))
        _this.set$parser3(_this.$ti._eval$1("Parser0<3>")._as(target));
      if (_this.parser4.$eq(0, source))
        _this.set$parser4(_this.$ti._eval$1("Parser0<4>")._as(target));
      if (_this.parser5.$eq(0, source))
        _this.set$parser5(_this.$ti._eval$1("Parser0<5>")._as(target));
      if (_this.parser6.$eq(0, source))
        _this.set$parser6(_this.$ti._eval$1("Parser0<6>")._as(target));
      if (_this.parser7.$eq(0, source))
        _this.set$parser7(_this.$ti._eval$1("Parser0<7>")._as(target));
      if (_this.parser8.$eq(0, source))
        _this.set$parser8(_this.$ti._eval$1("Parser0<8>")._as(target));
    },
    set$parser1(parser1) {
      this.parser1 = this.$ti._eval$1("Parser0<1>")._as(parser1);
    },
    set$parser2(parser2) {
      this.parser2 = this.$ti._eval$1("Parser0<2>")._as(parser2);
    },
    set$parser3(parser3) {
      this.parser3 = this.$ti._eval$1("Parser0<3>")._as(parser3);
    },
    set$parser4(parser4) {
      this.parser4 = this.$ti._eval$1("Parser0<4>")._as(parser4);
    },
    set$parser5(parser5) {
      this.parser5 = this.$ti._eval$1("Parser0<5>")._as(parser5);
    },
    set$parser6(parser6) {
      this.parser6 = this.$ti._eval$1("Parser0<6>")._as(parser6);
    },
    set$parser7(parser7) {
      this.parser7 = this.$ti._eval$1("Parser0<7>")._as(parser7);
    },
    set$parser8(parser8) {
      this.parser8 = this.$ti._eval$1("Parser0<8>")._as(parser8);
    }
  };
  A.RecordParserExtension8_map8_closure.prototype = {
    call$1(record) {
      var _this = this,
        t1 = _this.T1._eval$1("@<0>")._bind$1(_this.T2)._bind$1(_this.T3)._bind$1(_this.T4)._bind$1(_this.T5)._bind$1(_this.T6)._bind$1(_this.T7)._bind$1(_this.T8)._eval$1("+(1,2,3,4,5,6,7,8)")._as(record)._values;
      return _this.callback.call$8(t1[0], t1[1], t1[2], t1[3], t1[4], t1[5], t1[6], t1[7]);
    },
    $signature() {
      var _this = this;
      return _this.R._eval$1("@<0>")._bind$1(_this.T1)._bind$1(_this.T2)._bind$1(_this.T3)._bind$1(_this.T4)._bind$1(_this.T5)._bind$1(_this.T6)._bind$1(_this.T7)._bind$1(_this.T8)._eval$1("1(+(2,3,4,5,6,7,8,9))");
    }
  };
  A.ListParser.prototype = {
    replace$2(_, source, target) {
      var t1, t2, t3, i;
      this.super$Parser$replace(0, source, target);
      for (t1 = this.children, t2 = t1.length, t3 = this.$ti._eval$1("Parser0<ListParser.R>"), i = 0; i < t2; ++i)
        if (t1[i].$eq(0, source))
          B.JSArray_methods.$indexSet(t1, i, t3._as(target));
    },
    get$children(receiver) {
      return this.children;
    }
  };
  A.OptionalParser.prototype = {
    parseOn$1(context) {
      var t1, t2,
        result = this.delegate.parseOn$1(context);
      if (!(result instanceof A.Failure))
        return result;
      t1 = this.$ti;
      t2 = t1._precomputed1._as(this.otherwise);
      return new A.Success(t2, context.buffer, context.position, t1._eval$1("Success<1>"));
    },
    fastParseOn$2(buffer, position) {
      var result = this.delegate.fastParseOn$2(buffer, position);
      return result < 0 ? position : result;
    }
  };
  A.SkipParser.prototype = {
    parseOn$1(context) {
      var resultContext, afterContext, t1, t2, _this = this,
        beforeContext = _this.before.parseOn$1(context);
      if (beforeContext instanceof A.Failure)
        return beforeContext;
      resultContext = _this.delegate.parseOn$1(beforeContext);
      if (resultContext instanceof A.Failure)
        return resultContext;
      afterContext = _this.after.parseOn$1(resultContext);
      if (afterContext instanceof A.Failure)
        return afterContext;
      t1 = _this.$ti;
      t2 = t1._precomputed1._as(resultContext.get$value(resultContext));
      return new A.Success(t2, afterContext.buffer, afterContext.position, t1._eval$1("Success<1>"));
    },
    fastParseOn$2(buffer, position) {
      position = this.before.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      position = this.delegate.fastParseOn$2(buffer, position);
      if (position < 0)
        return -1;
      return this.after.fastParseOn$2(buffer, position);
    },
    get$children(_) {
      return A._setArrayType([this.before, this.delegate, this.after], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      var _this = this;
      _this.super$DelegateParser$replace(0, source, target);
      if (_this.before.$eq(0, source))
        _this.before = target;
      if (_this.after.$eq(0, source))
        _this.after = target;
    }
  };
  A.EpsilonParser.prototype = {
    parseOn$1(context) {
      var t1 = this.$ti,
        t2 = t1._precomputed1._as(this.result);
      return new A.Success(t2, context.buffer, context.position, t1._eval$1("Success<1>"));
    },
    fastParseOn$2(buffer, position) {
      return position;
    },
    toString$0(_) {
      return this.super$Parser$toString(0) + "[" + A.S(this.result) + "]";
    }
  };
  A.NewlineParser.prototype = {
    parseOn$1(context) {
      var t2,
        buffer = context.buffer,
        position = context.position,
        t1 = buffer.length;
      if (position < t1) {
        if (!(position >= 0))
          return A.ioore(buffer, position);
        switch (buffer.charCodeAt(position)) {
          case 10:
            return new A.Success("\n", buffer, position + 1, type$.Success_String);
          case 13:
            t2 = position + 1;
            if (t2 < t1 && buffer.charCodeAt(t2) === 10)
              return new A.Success("\r\n", buffer, position + 2, type$.Success_String);
            else
              return new A.Success("\r", buffer, t2, type$.Success_String);
        }
      }
      return new A.Failure(this.message, buffer, position);
    },
    fastParseOn$2(buffer, position) {
      var t2,
        t1 = buffer.length;
      if (position < t1) {
        if (!(position >= 0))
          return A.ioore(buffer, position);
        switch (buffer.charCodeAt(position)) {
          case 10:
            return position + 1;
          case 13:
            t2 = position + 1;
            return t2 < t1 && buffer.charCodeAt(t2) === 10 ? position + 2 : t2;
        }
      }
      return -1;
    },
    toString$0(_) {
      return this.super$Parser$toString(0) + "[" + this.message + "]";
    }
  };
  A.AnyCharacterParser.prototype = {
    parseOn$1(context) {
      var buffer = context.buffer,
        position = context.position,
        t1 = buffer.length;
      if (position < t1) {
        if (!(position >= 0))
          return A.ioore(buffer, position);
        t1 = buffer[position];
        return new A.Success(t1, buffer, position + 1, type$.Success_String);
      }
      return new A.Failure(this.message, buffer, position);
    },
    fastParseOn$2(buffer, position) {
      return position < buffer.length ? position + 1 : -1;
    },
    toString$0(_) {
      return this.super$Parser$toString(0) + "[" + this.message + "]";
    }
  };
  A.SingleCharacterParser.prototype = {
    parseOn$1(context) {
      var t2,
        buffer = context.buffer,
        position = context.position,
        t1 = buffer.length;
      if (position < t1) {
        if (!(position >= 0))
          return A.ioore(buffer, position);
        t2 = this.predicate.test$1(buffer.charCodeAt(position));
      } else
        t2 = false;
      if (t2) {
        if (!(position >= 0 && position < t1))
          return A.ioore(buffer, position);
        t1 = buffer[position];
        return new A.Success(t1, buffer, position + 1, type$.Success_String);
      }
      return new A.Failure(this.message, buffer, position);
    },
    fastParseOn$2(buffer, position) {
      var t1 = buffer.length;
      if (position < t1) {
        if (!(position >= 0))
          return A.ioore(buffer, position);
        t1 = this.predicate.test$1(buffer.charCodeAt(position));
      } else
        t1 = false;
      return t1 ? position + 1 : -1;
    },
    toString$0(_) {
      return this.super$Parser$toString(0) + "[" + this.message + "]";
    }
  };
  A.PredicateParser.prototype = {
    parseOn$1(context) {
      var result,
        start = context.position,
        $stop = start + this.length,
        t1 = context.buffer;
      if ($stop <= t1.length) {
        result = B.JSString_methods.substring$2(t1, start, $stop);
        if (A.boolConversionCheck(this.predicate.call$1(result)))
          return new A.Success(result, t1, $stop, type$.Success_String);
      }
      return new A.Failure(this.message, t1, start);
    },
    fastParseOn$2(buffer, position) {
      var $stop = position + this.length;
      return $stop <= buffer.length && A.boolConversionCheck(this.predicate.call$1(B.JSString_methods.substring$2(buffer, position, $stop))) ? $stop : -1;
    },
    toString$0(_) {
      return this.super$Parser$toString(0) + "[" + this.message + "]";
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.string_closure.prototype = {
    call$1(each) {
      return this.element === each;
    },
    $signature: 21
  };
  A.RepeatingCharacterParser.prototype = {
    parseOn$1(context) {
      var t1, t2, position, count, t3, _this = this,
        buffer = context.buffer,
        start = context.position,
        end = buffer.length;
      for (t1 = _this.min, t2 = _this.predicate, position = start, count = 0; count < t1;) {
        if (position < end) {
          if (!(position >= 0 && position < end))
            return A.ioore(buffer, position);
          t3 = !t2.test$1(buffer.charCodeAt(position));
        } else
          t3 = true;
        if (t3)
          return new A.Failure(_this.message, buffer, position);
        ++position;
        ++count;
      }
      t1 = _this.max;
      while (true) {
        if (!(position < end && count < t1))
          break;
        if (!(position >= 0 && position < end))
          return A.ioore(buffer, position);
        if (!t2.test$1(buffer.charCodeAt(position)))
          break;
        ++position;
        ++count;
      }
      t1 = B.JSString_methods.substring$2(buffer, start, position);
      return new A.Success(t1, buffer, position, type$.Success_String);
    },
    fastParseOn$2(buffer, position) {
      var t1, t2, count, t3,
        end = buffer.length;
      for (t1 = this.min, t2 = this.predicate, count = 0; count < t1;) {
        if (position < end) {
          if (!(position >= 0 && position < end))
            return A.ioore(buffer, position);
          t3 = !t2.test$1(buffer.charCodeAt(position));
        } else
          t3 = true;
        if (t3)
          return -1;
        ++position;
        ++count;
      }
      t1 = this.max;
      while (true) {
        if (!(position < end && count < t1))
          break;
        if (!(position >= 0 && position < end))
          return A.ioore(buffer, position);
        if (!t2.test$1(buffer.charCodeAt(position)))
          break;
        ++position;
        ++count;
      }
      return position;
    },
    toString$0(_) {
      var _this = this,
        t1 = _this.super$Parser$toString(0),
        t2 = _this.max;
      return t1 + "[" + _this.message + ", " + _this.min + ".." + A.S(t2 === 9007199254740991 ? "*" : t2) + "]";
    }
  };
  A.LazyRepeatingParser.prototype = {
    parseOn$1(context) {
      var t2, current, result, limiter, _this = this,
        t1 = _this.$ti,
        elements = A._setArrayType([], t1._eval$1("JSArray<1>"));
      for (t2 = _this.min, current = context; elements.length < t2; current = result) {
        result = _this.delegate.parseOn$1(current);
        if (result instanceof A.Failure)
          return result;
        B.JSArray_methods.add$1(elements, result.get$value(result));
      }
      for (t2 = _this.max; true; current = result) {
        limiter = _this.limit.parseOn$1(current);
        if (limiter instanceof A.Failure) {
          if (elements.length >= t2)
            return limiter;
          result = _this.delegate.parseOn$1(current);
          if (result instanceof A.Failure)
            return limiter;
          B.JSArray_methods.add$1(elements, result.get$value(result));
        } else {
          t1._eval$1("List<1>")._as(elements);
          return new A.Success(elements, current.buffer, current.position, t1._eval$1("Success<List<1>>"));
        }
      }
    },
    fastParseOn$2(buffer, position) {
      var t1, current, count, result, _this = this;
      for (t1 = _this.min, current = position, count = 0; count < t1; current = result) {
        result = _this.delegate.fastParseOn$2(buffer, current);
        if (result < 0)
          return -1;
        ++count;
      }
      for (t1 = _this.max; true; current = result)
        if (_this.limit.fastParseOn$2(buffer, current) < 0) {
          if (count >= t1)
            return -1;
          result = _this.delegate.fastParseOn$2(buffer, current);
          if (result < 0)
            return -1;
          ++count;
        } else
          return current;
    }
  };
  A.LimitedRepeatingParser.prototype = {
    get$children(_) {
      return A._setArrayType([this.delegate, this.limit], type$.JSArray_Parser_dynamic);
    },
    replace$2(_, source, target) {
      this.super$DelegateParser$replace(0, source, target);
      if (this.limit.$eq(0, source))
        this.limit = target;
    }
  };
  A.PossessiveRepeatingParser.prototype = {
    parseOn$1(context) {
      var t2, current, result, _this = this,
        t1 = _this.$ti,
        elements = A._setArrayType([], t1._eval$1("JSArray<1>"));
      for (t2 = _this.min, current = context; elements.length < t2; current = result) {
        result = _this.delegate.parseOn$1(current);
        if (result instanceof A.Failure)
          return result;
        B.JSArray_methods.add$1(elements, result.get$value(result));
      }
      for (t2 = _this.max; elements.length < t2; current = result) {
        result = _this.delegate.parseOn$1(current);
        if (result instanceof A.Failure)
          break;
        B.JSArray_methods.add$1(elements, result.get$value(result));
      }
      t1._eval$1("List<1>")._as(elements);
      return new A.Success(elements, current.buffer, current.position, t1._eval$1("Success<List<1>>"));
    },
    fastParseOn$2(buffer, position) {
      var t1, current, count, result, _this = this;
      for (t1 = _this.min, current = position, count = 0; count < t1; current = result) {
        result = _this.delegate.fastParseOn$2(buffer, current);
        if (result < 0)
          return -1;
        ++count;
      }
      for (t1 = _this.max; count < t1; current = result) {
        result = _this.delegate.fastParseOn$2(buffer, current);
        if (result < 0)
          break;
        ++count;
      }
      return current;
    }
  };
  A.RepeatingParser.prototype = {
    toString$0(_) {
      var t1 = this.super$Parser$toString(0),
        t2 = this.max;
      return t1 + "[" + this.min + ".." + A.S(t2 === 9007199254740991 ? "*" : t2) + "]";
    }
  };
  A.bootstrap_closure0.prototype = {
    call$1(r) {
      var t1, t2;
      r.internalLogger.log$5$error$stackTrace$time(B.Level_1000_trace, "Terminating Web Worker", null, null, null);
      t1 = this.com;
      t2 = type$.JSObject;
      t2._as(t1.port1).close();
      t2._as(t1.port2).close();
      t2._as(self.self).close();
    },
    $signature: 51
  };
  A.bootstrap_closure.prototype = {
    call$1(e) {
      var t2, t3, t4,
        t1 = type$.JSObject;
      t1._as(e);
      t2 = this.com;
      t3 = this.runner;
      t1._as(t2.port1).onmessage = A._functionToJS1(A.JsWorkerRunnerExt_get_handle(t3));
      t4 = type$.nullable_List_dynamic._as(A.$JSEventExt__getMessageEventData(e));
      t4.toString;
      t3.connect$3(A.WorkerRequestExt_from(t4), t1._as(t2.port2), this.initializer);
    },
    $signature: 52
  };
  A.$jsify_squadronJsify.prototype = {
    call$1(obj) {
      var t1, cached, t2, len, jsArray, i, jsMap, jsSet, res, t3, t4, buffer, _this = this;
      if (obj == null)
        return null;
      t1 = _this.cache;
      cached = t1.$index(0, obj);
      if (cached != null)
        return cached;
      if (type$.List_dynamic._is(obj) && !type$.TypedData._is(obj)) {
        t2 = J.getInterceptor$asx(obj);
        len = t2.get$length(obj);
        jsArray = type$.JSArray_nullable_Object._as(new self.Array());
        t1.$indexSet(0, obj, jsArray);
        for (i = 0; i < len; ++i)
          jsArray.push(_this.call$1(t2.$index(obj, i)));
        return jsArray;
      }
      if (type$.Map_dynamic_dynamic._is(obj)) {
        jsMap = type$.JSObject._as(new self.Map());
        t1.$indexSet(0, obj, jsMap);
        for (t1 = J.get$entries$x(obj), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current(t1);
          jsMap.set(_this.call$1(t2.key), _this.call$1(t2.value));
        }
        return jsMap;
      }
      if (type$.Set_dynamic._is(obj)) {
        t2 = type$.JSObject;
        jsSet = t2._as(new self.Set());
        t1.$indexSet(0, obj, jsSet);
        for (t1 = obj.get$iterator(obj); t1.moveNext$0();)
          t2._as(jsSet.add(_this.call$1(t1.get$current(t1))));
        return jsSet;
      }
      if (obj instanceof A._BigIntImpl)
        return type$.JavaScriptBigInt._as(self.BigInt(obj.toString$0(0)));
      res = A.jsify(obj);
      if (res != null) {
        if (typeof obj != "number" && !A._isBool(obj) && typeof obj != "string")
          t1.$indexSet(0, obj, res);
        t1 = _this.transfer;
        if (t1 != null) {
          t2 = self;
          t3 = type$.JSObject;
          t3._as(t2);
          t4 = t3._as(t2.Object);
          t2 = res instanceof type$.JavaScriptFunction._as(t4.getPrototypeOf.apply(t4, [t3._as(t2.Int8Array)]));
          if (t2) {
            buffer = type$.NativeTypedData._as(res).buffer;
            if (buffer != null && A.JSAnyUtilityExtension_instanceOfString(buffer, "ArrayBuffer"))
              t1.push(buffer);
          } else if (A._isTransferable(res))
            t1.push(res);
        }
      }
      return res;
    },
    $signature: 7
  };
  A.$dartify_squadronDartify.prototype = {
    call$1(js) {
      var t1, cached, t2, len, dartList, i, keys, dartMap, t3, entry, values, dartSet, result, res, _this = this, _null = null;
      if (js == null)
        return _null;
      t1 = _this.cache;
      cached = t1.$index(0, js);
      if (cached != null)
        return cached;
      t2 = A.JSAnyUtilityExtension_instanceOfString(js, "Array");
      if (t2) {
        type$.JSArray_nullable_Object._as(js);
        len = A._asInt(js.length);
        dartList = [];
        t1.$indexSet(0, js, dartList);
        for (i = 0; i < len; ++i)
          dartList.push(_this.call$1(js.at(i)));
        return dartList;
      }
      t2 = A.JSAnyUtilityExtension_instanceOfString(js, "Map");
      if (t2) {
        t2 = type$.JSObject;
        t2._as(js);
        keys = t2._as(js.entries());
        t2 = type$.dynamic;
        dartMap = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        t1.$indexSet(0, js, dartMap);
        for (t1 = type$.JSArray_nullable_Object, t2 = type$.nullable_JSObject; true;) {
          t3 = t2._as(A.JSObjectUnsafeUtilExtension__callMethod(keys, $.$get$_$JSProps_next(), _null, _null, _null, _null));
          if (t3 == null || !!t3[$.$get$_$JSProps_done()])
            break;
          entry = t1._as(t3[$.$get$_$JSProps_value()]);
          dartMap.$indexSet(0, _this.call$1(entry.at(0)), _this.call$1(entry.at(1)));
        }
        return dartMap;
      }
      t2 = A.JSAnyUtilityExtension_instanceOfString(js, "Set");
      if (t2) {
        t2 = type$.JSObject;
        t2._as(js);
        values = t2._as(js.values());
        dartSet = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
        t1.$indexSet(0, js, dartSet);
        for (t1 = type$.nullable_JSObject; true;) {
          t2 = t1._as(A.JSObjectUnsafeUtilExtension__callMethod(values, $.$get$_$JSProps_next(), _null, _null, _null, _null));
          if (t2 == null || !!t2[$.$get$_$JSProps_done()])
            break;
          dartSet.add$1(0, _this.call$1(t2[$.$get$_$JSProps_value()]));
        }
        return dartSet;
      }
      if (typeof js === "bigint") {
        t1 = A._asString(type$.JavaScriptBigInt._as(js).toString());
        result = A._BigIntImpl__tryParse(t1, _null);
        if (result == null)
          A.throwExpression(A.FormatException$("Could not parse BigInt", t1, _null));
        return result;
      }
      res = A.dartify(js);
      if (res != null && typeof res != "number" && !A._isBool(res) && typeof res != "string")
        t1.$indexSet(0, js, res);
      return res;
    },
    $signature: 7
  };
  A._WebWorkerChannel.prototype = {
    _postResponse$1(res) {
      var ex, st, exception;
      try {
        this._sendPort.postMessage(A.$jsify(A.WorkerResponseExt_wrapInPlace(res), null));
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        this._logger.e$1(0, new A._WebWorkerChannel__postResponse_closure(res, ex));
        throw A.wrapException(A.SquadronErrorExt_create("Failed to post response: " + A.S(ex), st));
      }
    },
    _inspectAndPostResponse$1(res) {
      var data, transfer, message, ex, st, exception;
      try {
        data = A.WorkerResponseExt_wrapInPlace(res);
        transfer = type$.JSArray_nullable_Object._as(new self.Array());
        message = A.$jsify(data, transfer);
        this._sendPort.postMessage(message, transfer);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        this._logger.e$1(0, new A._WebWorkerChannel__inspectAndPostResponse_closure(res, ex));
        throw A.wrapException(A.SquadronErrorExt_create("Failed to post response: " + A.S(ex), st));
      }
    },
    reply$1(_, data) {
      return this._postResponse$1([A.microsecTimeStamp(null), data, null, null, null]);
    },
    inspectAndReply$1(data) {
      return this._inspectAndPostResponse$1([A.microsecTimeStamp(null), data, null, null, null]);
    },
    log$1(message) {
      var t1 = A.microsecTimeStamp(null),
        t2 = A._LogEventSerializationExt__stringify(message.message),
        t3 = A.microsecTimeStamp(message.time);
      return this._postResponse$1([t1, null, null, null, [message.level.value, t2, t3, null, null]]);
    },
    $isWorkerChannel: 1
  };
  A._WebWorkerChannel__postResponse_closure.prototype = {
    call$0() {
      return "Failed to post response " + A.S(this.res) + ": " + A.S(this.ex);
    },
    $signature: 10
  };
  A._WebWorkerChannel__inspectAndPostResponse_closure.prototype = {
    call$0() {
      return "Failed to post response " + A.S(this.res) + ": " + A.S(this.ex);
    },
    $signature: 10
  };
  A.JsWorkerRunnerExt_get_handle_closure.prototype = {
    call$1($event) {
      var t1 = type$.nullable_List_dynamic._as(A.$JSEventExt__getMessageEventData(type$.JSObject._as($event)));
      t1.toString;
      return this._this.processRequest$1(A.WorkerRequestExt_from(t1));
    },
    $signature: 55
  };
  A.InternalLogger.prototype = {};
  A._NoLogOutput.prototype = {
    output$1($event) {
    }
  };
  A._DummyPrinter.prototype = {
    log$1($event) {
      return B.List_2No;
    }
  };
  A._LogAllFilter.prototype = {
    shouldLog$1($event) {
      return true;
    }
  };
  A.WorkerRunner.prototype = {
    connect$3(startRequest, channelInfo, initializer) {
      return this.connect$body$WorkerRunner(startRequest, channelInfo, type$.FutureOr_WorkerService_Function_List_dynamic._as(initializer));
    },
    connect$body$WorkerRunner(startRequest, channelInfo, initializer) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$self = this, logger, ex, st, t2, channel, t3, exception, t1, $async$exception;
      var $async$connect$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.channel = null;
              $async$handler = 3;
              A.WorkerRequestExt_unwrapInPlace(startRequest, $async$self.internalLogger);
              t2 = J.getInterceptor$asx(startRequest);
              channel = type$.nullable_WorkerChannel._as(t2.$index(startRequest, 1));
              t1.channel = channel;
              if (channel == null) {
                t2 = A.SquadronErrorExt_create("Missing client for connection request", null);
                throw A.wrapException(t2);
              }
              if ($async$self._logForwarder == null) {
                logger = channel.get$log();
                $async$self.set$_logForwarder(new A.WorkerRunner_connect_closure(logger));
                t3 = $async$self._logForwarder;
                t3.toString;
                $.Logger__outputCallbacks.add$1(0, t3);
              }
              if (A._asInt(t2.$index(startRequest, 2)) !== -1) {
                t2 = A.SquadronErrorExt_create("Connection request expected", null);
                throw A.wrapException(t2);
              } else if ($async$self._service != null) {
                t2 = A.SquadronErrorExt_create("Already connected", null);
                throw A.wrapException(t2);
              }
              t2 = initializer.call$1(startRequest);
              t3 = type$.WorkerService;
              $async$goto = 6;
              return A._asyncAwait(type$.Future_WorkerService._is(t2) ? t2 : A._Future$value(t3._as(t2), t3), $async$connect$3);
            case 6:
              // returning from await.
              $async$self.set$_service($async$result);
              t2 = $async$self._service.get$operations();
              t2 = t2.get$keys(t2);
              t3 = A._instanceType(t2);
              if (!new A.WhereIterable(t2, t3._eval$1("bool(Iterable.E)")._as(new A.WorkerRunner_connect_closure0()), t3._eval$1("WhereIterable<Iterable.E>")).get$isEmpty(0)) {
                t2 = A.SquadronErrorExt_create("Invalid command identifier in service operations map; command ids must be > 0", null);
                throw A.wrapException(t2);
              }
              channel._inspectAndPostResponse$1([A.microsecTimeStamp(null), channelInfo, null, null, null]);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              $async$self.internalLogger.e$1(0, new A.WorkerRunner_connect_closure1(ex));
              t1 = t1.channel;
              if (t1 != null) {
                ex = A.SquadronException_from(type$.Object._as(ex), type$.nullable_StackTrace._as(st), null);
                t1._postResponse$1([A.microsecTimeStamp(null), null, ex, null, null]);
              }
              $async$self._exit$0();
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$connect$3, $async$completer);
    },
    processRequest$1(request) {
      return this.processRequest$body$WorkerRunner(request);
    },
    processRequest$body$WorkerRunner(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, pendingInstallation, token, canceler, token0, tokenRef, cmd, op, result, reply, ex, st, t1, t2, t3, ex0, t4, exception, channel, $async$exception;
      var $async$processRequest$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              channel = null;
              $async$handler = 4;
              A.WorkerRequestExt_unwrapInPlace(request, $async$self.internalLogger);
              t1 = J.getInterceptor$asx(request);
              t2 = type$.nullable_WorkerChannel;
              channel = t2._as(t1.$index(request, 1));
              if (A._asInt(t1.$index(request, 2)) === -4) {
                $async$self._terminationRequested = true;
                if ($async$self._executing === 0)
                  $async$self._unmount$0();
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = $async$self._installCompleter;
              pendingInstallation = t3 == null ? null : t3.future;
              $async$goto = pendingInstallation != null ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait(pendingInstallation, $async$processRequest$1);
            case 9:
              // returning from await.
              $async$self._installCompleter = null;
            case 8:
              // join
              t3 = $async$self._installError;
              if (t3 != null)
                throw A.wrapException(t3);
              if (A._asInt(t1.$index(request, 2)) === -3) {
                t1 = type$.nullable_SquadronCancelationToken._as(t1.$index(request, 4));
                t1.toString;
                token = t1;
                t1 = $async$self._getTokenRef$1(token);
                ex0 = type$.SquadronCancelationToken._as(token).get$exception();
                if (ex0 != null && (t1.__cancelation_token_ref$_completer.future._state & 30) === 0) {
                  t1.__cancelation_token_ref$_exception = ex0;
                  t1.__cancelation_token_ref$_completer.complete$1(0, ex0);
                }
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              } else if (A._asInt(t1.$index(request, 2)) === -2) {
                canceler = $async$self._streamCancelers.$index(0, A._asIntQ(t1.$index(request, 5)));
                t1 = canceler;
                t1 = t1 == null ? null : t1.call$0();
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              if (A._asInt(t1.$index(request, 2)) === -1) {
                t1 = A.SquadronErrorExt_create("Unexpected connection request: " + A.S(request), null);
                throw A.wrapException(t1);
              } else if ($async$self._service == null) {
                t1 = A.SquadronErrorExt_create("Worker service is not ready", null);
                throw A.wrapException(t1);
              }
              if (channel == null) {
                t1 = A.SquadronErrorExt_create("Missing client for request: " + A.S(request), null);
                throw A.wrapException(t1);
              }
              t3 = type$.nullable_SquadronCancelationToken;
              token0 = t3._as(t1.$index(request, 4));
              t4 = token0;
              if (t4 != null)
                t4.throwIfCanceled$0();
              ++$async$self._executing;
              token = $async$self._getTokenRef$1(t3._as(t1.$index(request, 4)));
              if (token._hasRef) {
                ++token._refCount;
                if (t3._as(t1.$index(request, 4)) != null) {
                  t3 = t3._as(t1.$index(request, 4));
                  t3 = t3.get$id(t3) !== token.id;
                } else
                  t3 = true;
                if (t3)
                  A.throwExpression(A.SquadronErrorExt_create("Cancelation token mismatch", null));
                t1.$indexSet(request, 4, token);
              } else if (t3._as(t1.$index(request, 4)) != null)
                A.throwExpression(A.SquadronErrorExt_create("Token reference mismatch", null));
              tokenRef = token;
              $async$handler = 10;
              cmd = A._asInt(t1.$index(request, 2));
              t3 = $async$self._service;
              op = t3 == null ? null : t3.get$operations().$index(0, cmd);
              if (op == null) {
                t1 = A.SquadronErrorExt_create("Unknown command: " + A.S(cmd), null);
                throw A.wrapException(t1);
              }
              result = op.call$1(request);
              $async$goto = result instanceof A._Future ? 13 : 14;
              break;
            case 13:
              // then
              $async$goto = 15;
              return A._asyncAwait(result, $async$processRequest$1);
            case 15:
              // returning from await.
              result = $async$result;
            case 14:
              // join
              if (A._asBool(t1.$index(request, 6))) {
                t1 = t2._as(t1.$index(request, 1));
                t1 = t1 == null ? null : t1.get$inspectAndReply();
              } else {
                t1 = t2._as(t1.$index(request, 1));
                t1 = t1 == null ? null : t1.get$reply(t1);
              }
              t1.toString;
              reply = t1;
              reply.call$1(result);
              $async$next.push(12);
              // goto finally
              $async$goto = 11;
              break;
            case 10:
              // uncaught
              $async$next = [4];
            case 11:
              // finally
              $async$handler = 4;
              t1 = type$.CancelationTokenReference._as(tokenRef);
              if (t1._hasRef)
                --t1._refCount;
              if (t1._refCount === 0)
                $async$self._cancelTokens.remove$1(0, t1.id);
              t1 = --$async$self._executing;
              if ($async$self._terminationRequested && t1 === 0)
                $async$self._unmount$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 12:
              // after finally
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              if (channel != null) {
                t1 = channel;
                t2 = A._asInt(J.$index$asx(request, 2));
                ex = A.SquadronException_from(type$.Object._as(ex), type$.nullable_StackTrace._as(st), t2);
                t1._postResponse$1([A.microsecTimeStamp(null), null, ex, null, null]);
              } else
                $async$self.internalLogger.e$1(0, "Unhandled error: " + A.S(ex));
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$processRequest$1, $async$completer);
    },
    _getTokenRef$1(token) {
      return token == null ? $.$get$CancelationTokenReference_noToken() : this._cancelTokens.putIfAbsent$2(0, token.get$id(token), new A.WorkerRunner__getTokenRef_closure(token));
    },
    _unmount$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$next = [], $async$self = this, ex, exception;
      var $async$_unmount$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
              } catch (exception) {
                ex = A.unwrapException(exception);
                $async$self.internalLogger.e$1(0, "Service uninstallation failed with error: " + A.S(ex));
              } finally {
                $async$self._exit$0();
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_unmount$0, $async$completer);
    },
    _exit$0() {
      var ex, exception, t1, _this = this;
      try {
        _this._terminate.call$1(_this);
      } catch (exception) {
        ex = A.unwrapException(exception);
        _this.internalLogger.e$1(0, "Worker termination failed with error: " + A.S(ex));
      }
      t1 = _this._logForwarder;
      if (t1 != null)
        $.Logger__outputCallbacks.remove$1(0, t1);
    },
    set$_service(_service) {
      this._service = type$.nullable_WorkerService._as(_service);
    },
    set$_logForwarder(_logForwarder) {
      this._logForwarder = type$.nullable_void_Function_OutputEvent._as(_logForwarder);
    }
  };
  A.WorkerRunner_connect_closure.prototype = {
    call$1($event) {
      return this.logger.call$1(type$.OutputEvent._as($event).origin);
    },
    $signature: 56
  };
  A.WorkerRunner_connect_closure0.prototype = {
    call$1(k) {
      return A._asInt(k) <= 0;
    },
    $signature: 22
  };
  A.WorkerRunner_connect_closure1.prototype = {
    call$0() {
      return "Connection failed: " + A.S(this.ex);
    },
    $signature: 10
  };
  A.WorkerRunner__getTokenRef_closure.prototype = {
    call$0() {
      var t1 = this.token;
      return new A.CancelationTokenReference(t1.get$id(t1), new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_SquadronCanceledException), type$._AsyncCompleter_SquadronCanceledException), true);
    },
    $signature: 57
  };
  A.CastConverter.prototype = {
    value$1$0(_, $T) {
      return A.instantiate1(A.converter_Converter_identity$closure(), $T);
    }
  };
  A.Converter0.prototype = {
    nullable$1$1(cast, $T) {
      $T._eval$1("0(@)?")._as(cast);
      return J.$eq$(cast, A.instantiate1(A.converter_Converter_identity$closure(), $T)) ? this.value$1$0(0, $T._eval$1("0?")) : new A.Converter_nullable_closure(cast, $T);
    },
    list$1$1(_, cast, $T) {
      var op;
      $T._eval$1("0(@)?")._as(cast);
      op = cast == null ? this.value$1$0(0, $T) : cast;
      return J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)) ? new A.Converter_list_closure($T) : new A.Converter_list_closure0(op, $T);
    },
    list$1$0(_, $T) {
      return this.list$1$1(0, null, $T);
    }
  };
  A.Converter_nullable_closure.prototype = {
    call$1($$) {
      return $$ == null ? null : this.op.call$1($$);
    },
    $signature() {
      return this.T._eval$1("0?(@)");
    }
  };
  A.Converter_list_closure.prototype = {
    call$1(x) {
      return J.cast$1$0$ax(A.Converter_toList(x), this.T);
    },
    $signature() {
      return this.T._eval$1("List<0>(@)");
    }
  };
  A.Converter_list_closure0.prototype = {
    call$1(x) {
      var t1 = J.map$1$1$ax(A.Converter_toList(x), this.op, this.T);
      return A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
    },
    $signature() {
      return this.T._eval$1("List<0>(@)");
    }
  };
  A.SquadronCanceledException.prototype = {
    serialize$0() {
      var _this = this,
        t1 = _this.get$message(_this),
        t2 = _this.get$stackTrace();
      t2 = t2 == null ? null : t2.toString$0(0);
      return A.List_List$unmodifiable(["$C", _this.tokenId, t1, t2], type$.dynamic);
    },
    $isCanceledException: 1
  };
  A.SquadronCanceledException_SquadronCanceledException$from_closure.prototype = {
    call$1(e) {
      type$.CanceledException._as(e);
      return A.SquadronCanceledException_SquadronCanceledException$from(this.tokenId, e, e.get$stackTrace());
    },
    $signature: 58
  };
  A.SquadronCanceledExceptions.prototype = {
    get$message(_) {
      var t1 = this._exceptions,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.SquadronCanceledExceptions_message_closure()), t2._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
    },
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(this.serialize$0(), null);
    },
    serialize$0() {
      var t1 = this._exceptions,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<@>>");
      return A.List_List$unmodifiable(["$C*", this.tokenId, A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("List<@>(1)")._as(new A.SquadronCanceledExceptions_serialize_closure()), t3), true, t3._eval$1("ListIterable.E"))], type$.dynamic);
    }
  };
  A.SquadronCanceledExceptions_message_closure.prototype = {
    call$1(e) {
      type$.SquadronCanceledException._as(e);
      return e.get$message(e);
    },
    $signature: 59
  };
  A.SquadronCanceledExceptions_serialize_closure.prototype = {
    call$1(e) {
      return type$.SquadronCanceledException._as(e).serialize$0();
    },
    $signature: 60
  };
  A.SquadronError.prototype = {
    serialize$0() {
      var t1 = this._stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["$!", this.message, t1, this._squadron_error$_command], type$.dynamic);
    }
  };
  A.SquadronException.prototype = {
    SquadronException$init$2(message, _stackTrace) {
      var st, exception;
      if (this._stackTrace == null)
        try {
          this._stackTrace = A.StackTrace_current();
        } catch (exception) {
          st = A.getTraceFromException(exception);
          this.set$_stackTrace(st);
        }
    },
    get$stackTrace() {
      return this._stackTrace;
    },
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(this.serialize$0(), null);
    },
    set$_stackTrace(_stackTrace) {
      this._stackTrace = type$.nullable_StackTrace._as(_stackTrace);
    },
    get$message(receiver) {
      return this.message;
    }
  };
  A.SquadronTimeoutException.prototype = {
    serialize$0() {
      var t2, _this = this,
        t1 = _this._stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = _this.duration;
      t2 = t2 == null ? null : t2._duration;
      return A.List_List$unmodifiable(["$T", _this.tokenId, _this.message, t1, t2], type$.dynamic);
    }
  };
  A.WorkerException.prototype = {
    serialize$0() {
      var t1 = this._stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["$#", this.message, t1, this._command], type$.dynamic);
    }
  };
  A.CancelationTokenReference.prototype = {
    get$exception() {
      return this.__cancelation_token_ref$_exception;
    },
    throwIfCanceled$0() {
      var t1 = this.__cancelation_token_ref$_exception;
      if (t1 != null)
        throw A.wrapException(t1);
    },
    $isCancelationToken: 1,
    $isSquadronCancelationToken: 1,
    get$id(receiver) {
      return this.id;
    }
  };
  A.SquadronCancelationToken.prototype = {
    get$exception() {
      return this.__squadron_cancelation_token$_exception;
    },
    get$id(receiver) {
      return this.id;
    }
  };
  A.DtdExternalId.prototype = {
    toString$0(_) {
      var t2, _this = this,
        t1 = _this.publicId;
      if (t1 != null) {
        t2 = _this.publicIdType.token;
        t2 = "" + "PUBLIC " + t2 + t1 + t2;
        t1 = t2;
      } else
        t1 = "" + "SYSTEM";
      t2 = _this.systemIdType.token;
      t2 = t1 + " " + t2 + _this.systemId + t2;
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    get$hashCode(_) {
      return A.Object_hash(this.systemId, this.publicId, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DtdExternalId;
    }
  };
  A.XmlDefaultEntityMapping.prototype = {
    decodeEntity$1(input) {
      var t1 = input.length;
      if (t1 > 1 && input[0] === "#") {
        if (t1 > 2) {
          t1 = input[1];
          t1 = t1 === "x" || t1 === "X";
        } else
          t1 = false;
        if (t1)
          return this._decodeNumericEntity$2(B.JSString_methods.substring$1(input, 2), 16);
        else
          return this._decodeNumericEntity$2(B.JSString_methods.substring$1(input, 1), 10);
      } else
        return B.Map_4YusT.$index(0, input);
    },
    _decodeNumericEntity$2(input, radix) {
      var value = A.Primitives_parseInt(input, radix);
      if (value == null || value < 0 || 1114111 < value)
        return null;
      return A.Primitives_stringFromCharCode(value);
    },
    encodeAttributeValue$2(input, type) {
      switch (type) {
        case B.XmlAttributeType_3h3:
          return A.stringReplaceAllFuncUnchecked(input, $.$get$_singeQuoteAttributePattern(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(A.default_mapping___singeQuoteAttributeReplace$closure())), null);
        case B.XmlAttributeType_2x0:
          return A.stringReplaceAllFuncUnchecked(input, $.$get$_doubleQuoteAttributePattern(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(A.default_mapping___doubleQuoteAttributeReplace$closure())), null);
      }
    }
  };
  A._asNumericCharacterReferences_closure.prototype = {
    call$1(rune) {
      return "&#x" + B.JSInt_methods.toRadixString$1(A._asInt(rune), 16).toUpperCase() + ";";
    },
    $signature: 23
  };
  A.XmlEntityMapping.prototype = {
    decode$1(_, input) {
      var t1, index, value, next,
        start = B.JSString_methods.indexOf$2(input, "&", 0);
      if (start < 0)
        return input;
      t1 = B.JSString_methods.substring$2(input, 0, start);
      for (; true; start = next) {
        ++start;
        index = B.JSString_methods.indexOf$2(input, ";", start);
        if (start < index) {
          value = this.decodeEntity$1(B.JSString_methods.substring$2(input, start, index));
          if (value != null) {
            t1 += value;
            start = index + 1;
          } else
            t1 += "&";
        } else
          t1 += "&";
        next = B.JSString_methods.indexOf$2(input, "&", start);
        if (next === -1) {
          t1 += B.JSString_methods.substring$1(input, start);
          break;
        }
        t1 += B.JSString_methods.substring$2(input, start, next);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.XmlAttributeType.prototype = {
    _enumToString$0() {
      return "XmlAttributeType." + this._core$_name;
    }
  };
  A.XmlNodeType.prototype = {
    _enumToString$0() {
      return "XmlNodeType." + this._core$_name;
    }
  };
  A.XmlException.prototype = {};
  A.XmlFormatException.prototype = {
    get$_lineAndColumn() {
      var t1, t2, result, _this = this,
        value = _this.XmlFormatException___XmlFormatException__lineAndColumn_FI;
      if (value === $) {
        if (_this.get$buffer(_this) != null && _this.get$position(_this) != null) {
          t1 = _this.get$buffer(_this);
          t1.toString;
          t2 = _this.get$position(_this);
          t2.toString;
          result = A.Token_lineAndColumnOf(t1, t2);
        } else
          result = B.List_0_0;
        _this.XmlFormatException___XmlFormatException__lineAndColumn_FI !== $ && A.throwLateFieldADI("_lineAndColumn");
        _this.set$__XmlFormatException__lineAndColumn_FI(result);
        value = result;
      }
      return value;
    },
    get$locationString() {
      var t1, value, result, value0, _this = this;
      if (_this.get$buffer(_this) == null || _this.get$position(_this) == null)
        t1 = "";
      else {
        value = _this.XmlFormatException___XmlFormatException_line_FI;
        if (value === $) {
          result = _this.get$_lineAndColumn()[0];
          _this.XmlFormatException___XmlFormatException_line_FI !== $ && A.throwLateFieldADI("line");
          _this.XmlFormatException___XmlFormatException_line_FI = result;
          value = result;
        }
        value0 = _this.XmlFormatException___XmlFormatException_column_FI;
        if (value0 === $) {
          result = _this.get$_lineAndColumn()[1];
          _this.XmlFormatException___XmlFormatException_column_FI !== $ && A.throwLateFieldADI("column");
          _this.XmlFormatException___XmlFormatException_column_FI = result;
          value0 = result;
        }
        t1 = " at " + A.S(value) + ":" + A.S(value0);
      }
      return t1;
    },
    set$__XmlFormatException__lineAndColumn_FI(__XmlFormatException__lineAndColumn_FI) {
      this.XmlFormatException___XmlFormatException__lineAndColumn_FI = type$.List_int._as(__XmlFormatException__lineAndColumn_FI);
    }
  };
  A.XmlParentException.prototype = {
    toString$0(_) {
      return "XmlParentException: " + this.message;
    }
  };
  A.XmlParserException.prototype = {
    toString$0(_) {
      return "XmlParserException: " + this.message + this.get$locationString();
    },
    get$buffer(receiver) {
      return this.buffer;
    },
    get$position(receiver) {
      return this.position;
    }
  };
  A._XmlParserException_XmlException_XmlFormatException.prototype = {};
  A.XmlTagException.prototype = {
    toString$0(_) {
      return "XmlTagException: " + this.message + this.get$locationString();
    },
    get$buffer(receiver) {
      return this.buffer;
    },
    get$position(receiver) {
      return this.position;
    }
  };
  A._XmlTagException_XmlException_XmlFormatException.prototype = {};
  A.XmlNodeTypeException.prototype = {
    toString$0(_) {
      return "XmlNodeTypeException: " + this.message;
    }
  };
  A.XmlDescendantsIterable.prototype = {
    get$iterator(_) {
      var t1 = new A.XmlDescendantsIterator(A._setArrayType([], type$.JSArray_XmlNode));
      t1.push$1(this._start);
      return t1;
    }
  };
  A.XmlDescendantsIterator.prototype = {
    push$1(node) {
      var t1 = this._todo;
      B.JSArray_methods.addAll$1(t1, J.get$reversed$ax(node.get$children(node)));
      B.JSArray_methods.addAll$1(t1, J.get$reversed$ax(node.get$attributes(node)));
    },
    get$current(_) {
      var t1 = this.__XmlDescendantsIterator__current_A;
      t1 === $ && A.throwLateFieldNI("_current");
      return t1;
    },
    moveNext$0() {
      var t1 = this._todo,
        t2 = t1.length;
      if (t2 === 0)
        return false;
      else {
        if (0 >= t2)
          return A.ioore(t1, -1);
        t1 = type$.XmlNode._as(t1.pop());
        this.__XmlDescendantsIterator__current_A = t1;
        this.push$1(t1);
        return true;
      }
    },
    $isIterator: 1
  };
  A.XmlStringExtension_get_innerText_closure.prototype = {
    call$1(node) {
      type$.XmlNode._as(node);
      return node instanceof A.XmlText || node instanceof A.XmlCDATA;
    },
    $signature: 62
  };
  A.XmlStringExtension_get_innerText_closure0.prototype = {
    call$1(node) {
      type$.XmlNode._as(node);
      return node.get$value(node);
    },
    $signature: 63
  };
  A.XmlAttributesBase.prototype = {
    get$attributes(_) {
      return B.List_empty;
    },
    getAttributeNode$2$namespace($name, namespace) {
      return null;
    }
  };
  A.XmlHasAttributes.prototype = {
    getAttribute$1(_, $name) {
      var t1 = this.getAttributeNode$2$namespace($name, null);
      return t1 == null ? null : t1.value;
    },
    getAttributeNode$2$namespace($name, namespace) {
      var t1, t2, t3,
        tester = A.createNameMatcher($name, namespace);
      for (t1 = this.get$attributes(this)._base, t2 = A._arrayInstanceType(t1), t1 = new J.ArrayIterator(t1, t1.length, t2._eval$1("ArrayIterator<1>")), t2 = t2._precomputed1; t1.moveNext$0();) {
        t3 = t1.__interceptors$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (A.boolConversionCheck(tester.call$1(t3)))
          return t3;
      }
      return null;
    },
    get$attributes(receiver) {
      return this.XmlHasAttributes_attributes;
    }
  };
  A.XmlChildrenBase.prototype = {
    get$children(_) {
      return B.List_empty0;
    }
  };
  A.XmlHasChildren.prototype = {
    getElement$1($name) {
      var t1, t2, node,
        tester = A.createNameMatcher($name, null);
      for (t1 = this.get$children(this)._base, t2 = A._arrayInstanceType(t1), t1 = new J.ArrayIterator(t1, t1.length, t2._eval$1("ArrayIterator<1>")), t2 = t2._precomputed1; t1.moveNext$0();) {
        node = t1.__interceptors$_current;
        if (node == null)
          node = t2._as(node);
        if (node instanceof A.XmlElement && A.boolConversionCheck(tester.call$1(node)))
          return node;
      }
      return null;
    },
    get$children(receiver) {
      return this.XmlHasChildren_children;
    }
  };
  A.XmlHasName.prototype = {};
  A.XmlParentBase.prototype = {
    get$parent(_) {
      return null;
    },
    attachParent$1($parent) {
      return this._throwNoParent$0();
    },
    detachParent$1($parent) {
      return this._throwNoParent$0();
    },
    _throwNoParent$0() {
      return A.throwExpression(A.UnsupportedError$(this.toString$0(0) + " does not have a parent"));
    }
  };
  A.XmlHasParent.prototype = {
    get$parent(_) {
      return this.XmlHasParent__parent;
    },
    attachParent$1($parent) {
      A._instanceType(this)._eval$1("XmlHasParent.T")._as($parent);
      A.XmlParentException_checkNoParent(this);
      this.set$_parent($parent);
    },
    detachParent$1($parent) {
      var _this = this;
      A._instanceType(_this)._eval$1("XmlHasParent.T")._as($parent);
      if (_this.get$parent(_this) !== $parent)
        A.throwExpression(A.XmlParentException$("Node already has a non-matching parent", _this, $parent));
      _this.set$_parent(null);
    },
    set$_parent(_parent) {
      this.XmlHasParent__parent = A._instanceType(this)._eval$1("XmlHasParent.T?")._as(_parent);
    }
  };
  A.XmlValueBase.prototype = {
    get$value(_) {
      return null;
    }
  };
  A.XmlHasVisitor.prototype = {};
  A.XmlHasWriter.prototype = {
    toXmlString$0() {
      var t1,
        buffer = new A.StringBuffer(""),
        writer = new A.XmlWriter(buffer, B.C_XmlDefaultEntityMapping);
      this.accept$1(0, writer);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0(_) {
      return this.toXmlString$0();
    }
  };
  A.XmlAttribute.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_0;
    },
    copy$0() {
      return A.XmlAttribute$(this.name.copy$0(), this.value, this.attributeType);
    },
    accept$1(_, visitor) {
      var t1, t2, t3;
      this.name.accept$1(0, visitor);
      t1 = visitor.buffer;
      t1._contents += "=";
      t2 = this.attributeType;
      t3 = t2.token;
      t3 = t3 + visitor.entityMapping.encodeAttributeValue$2(this.value, t2) + t3;
      t1._contents += t3;
      return null;
    },
    get$name(receiver) {
      return this.name;
    },
    get$value(receiver) {
      return this.value;
    }
  };
  A._XmlAttribute_XmlNode_XmlHasName.prototype = {};
  A._XmlAttribute_XmlNode_XmlHasName_XmlHasParent.prototype = {};
  A.XmlCDATA.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_1;
    },
    copy$0() {
      return new A.XmlCDATA(this.value, null);
    },
    accept$1(_, visitor) {
      var t1 = visitor.buffer,
        t2 = t1._contents += "<![CDATA[";
      t2 += this.value;
      t1._contents = t2;
      t1._contents = t2 + "]]>";
      return null;
    }
  };
  A.XmlComment.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_2;
    },
    copy$0() {
      return new A.XmlComment(this.value, null);
    },
    accept$1(_, visitor) {
      var t1 = visitor.buffer,
        t2 = t1._contents += "<!--";
      t2 += this.value;
      t1._contents = t2;
      t1._contents = t2 + "-->";
      return null;
    }
  };
  A.XmlData.prototype = {
    get$value(receiver) {
      return this.value;
    }
  };
  A._XmlData_XmlNode_XmlHasParent.prototype = {};
  A.XmlDeclaration.prototype = {
    get$value(_) {
      var result;
      if (this.XmlHasAttributes_attributes._base.length === 0)
        return "";
      result = this.toXmlString$0();
      return B.JSString_methods.substring$2(result, 6, result.length - 2);
    },
    get$nodeType(_) {
      return B.XmlNodeType_3;
    },
    copy$0() {
      var t1 = this.XmlHasAttributes_attributes,
        t2 = t1._base,
        t3 = A._arrayInstanceType(t2);
      return A.XmlDeclaration$(new A.MappedListIterable(t2, t3._eval$1("XmlAttribute(1)")._as(t1.$ti._eval$1("XmlAttribute(1)")._as(new A.XmlDeclaration_copy_closure())), t3._eval$1("MappedListIterable<1,XmlAttribute>")));
    },
    accept$1(_, visitor) {
      var t1 = visitor.buffer;
      t1._contents += "<?xml";
      visitor.writeAttributes$1(this);
      t1._contents += "?>";
      return null;
    }
  };
  A.XmlDeclaration_copy_closure.prototype = {
    call$1(each) {
      type$.XmlAttribute._as(each);
      return A.XmlAttribute$(each.name.copy$0(), each.value, each.attributeType);
    },
    $signature: 24
  };
  A._XmlDeclaration_XmlNode_XmlHasParent.prototype = {};
  A._XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes.prototype = {};
  A.XmlDoctype.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_4;
    },
    copy$0() {
      return new A.XmlDoctype(this.name, this.externalId, this.internalSubset, null);
    },
    accept$1(_, visitor) {
      var t3,
        t1 = visitor.buffer,
        t2 = t1._contents += "<!DOCTYPE";
      t2 += " ";
      t1._contents = t2;
      t2 = t1._contents = t2 + this.name;
      t3 = this.externalId;
      if (t3 != null) {
        t1._contents = t2 + " ";
        t2 = t3.toString$0(0);
        t2 = t1._contents += t2;
      }
      t3 = this.internalSubset;
      if (t3 != null) {
        t2 += " ";
        t1._contents = t2;
        t2 += "[";
        t1._contents = t2;
        t3 = t2 + t3;
        t1._contents = t3;
        t3 = t1._contents = t3 + "]";
        t2 = t3;
      }
      t1._contents = t2 + ">";
      return null;
    }
  };
  A._XmlDoctype_XmlNode_XmlHasParent.prototype = {};
  A.XmlDocument.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_5;
    },
    copy$0() {
      var t1 = this.XmlHasChildren_children,
        t2 = t1._base,
        t3 = A._arrayInstanceType(t2);
      return A.XmlDocument$(new A.MappedListIterable(t2, t3._eval$1("XmlNode(1)")._as(t1.$ti._eval$1("XmlNode(1)")._as(new A.XmlDocument_copy_closure())), t3._eval$1("MappedListIterable<1,XmlNode>")));
    },
    accept$1(_, visitor) {
      return visitor.visitDocument$1(this);
    }
  };
  A.XmlDocument_copy_closure.prototype = {
    call$1(each) {
      return type$.XmlNode._as(each).copy$0();
    },
    $signature: 25
  };
  A._XmlDocument_XmlNode_XmlHasChildren.prototype = {};
  A.XmlElement.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_7;
    },
    copy$0() {
      var _this = this,
        t1 = _this.XmlHasAttributes_attributes,
        t2 = t1._base,
        t3 = A._arrayInstanceType(t2),
        t4 = _this.XmlHasChildren_children,
        t5 = t4._base,
        t6 = A._arrayInstanceType(t5);
      return A.XmlElement$(_this.name.copy$0(), new A.MappedListIterable(t2, t3._eval$1("XmlAttribute(1)")._as(t1.$ti._eval$1("XmlAttribute(1)")._as(new A.XmlElement_copy_closure())), t3._eval$1("MappedListIterable<1,XmlAttribute>")), new A.MappedListIterable(t5, t6._eval$1("XmlNode(1)")._as(t4.$ti._eval$1("XmlNode(1)")._as(new A.XmlElement_copy_closure0())), t6._eval$1("MappedListIterable<1,XmlNode>")), _this.isSelfClosing);
    },
    accept$1(_, visitor) {
      return visitor.visitElement$1(this);
    },
    get$name(receiver) {
      return this.name;
    }
  };
  A.XmlElement_copy_closure.prototype = {
    call$1(each) {
      type$.XmlAttribute._as(each);
      return A.XmlAttribute$(each.name.copy$0(), each.value, each.attributeType);
    },
    $signature: 24
  };
  A.XmlElement_copy_closure0.prototype = {
    call$1(each) {
      return type$.XmlNode._as(each).copy$0();
    },
    $signature: 25
  };
  A._XmlElement_XmlNode_XmlHasName.prototype = {};
  A._XmlElement_XmlNode_XmlHasName_XmlHasParent.prototype = {};
  A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes.prototype = {};
  A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes_XmlHasChildren.prototype = {};
  A.XmlNode.prototype = {};
  A._XmlNode_Object_XmlAttributesBase.prototype = {};
  A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase.prototype = {};
  A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor.prototype = {};
  A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter.prototype = {};
  A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase.prototype = {};
  A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase_XmlValueBase.prototype = {};
  A.XmlProcessing.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_10;
    },
    copy$0() {
      return new A.XmlProcessing(this.target, this.value, null);
    },
    accept$1(_, visitor) {
      var t3,
        t1 = visitor.buffer,
        t2 = t1._contents += "<?";
      t2 = t1._contents = t2 + this.target;
      t3 = this.value;
      if (t3.length !== 0) {
        t2 += " ";
        t1._contents = t2;
        t3 = t1._contents = t2 + t3;
        t2 = t3;
      }
      t1._contents = t2 + "?>";
      return null;
    }
  };
  A.XmlText.prototype = {
    get$nodeType(_) {
      return B.XmlNodeType_11;
    },
    copy$0() {
      return new A.XmlText(this.value, null);
    },
    accept$1(_, visitor) {
      var t1 = visitor.buffer,
        t2 = A.stringReplaceAllFuncUnchecked(this.value, $.$get$_textPattern(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(A.default_mapping___textReplace$closure())), null);
      t1._contents += t2;
      return null;
    }
  };
  A.XmlCache.prototype = {
    $index(_, key) {
      var t1, t2, t3, it, _this = this;
      _this.$ti._precomputed1._as(key);
      t1 = _this._cache$_values;
      if (!t1.containsKey$1(0, key)) {
        t1.$indexSet(0, key, _this._loader.call$1(key));
        for (t2 = _this._maxSize, t3 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"); t1.__js_helper$_length > t2;) {
          it = new A.LinkedHashMapKeyIterable(t1, t3).get$iterator(0);
          if (!it.moveNext$0())
            A.throwExpression(A.IterableElementError_noElement());
          t1.remove$1(0, it.get$current(0));
        }
      }
      t1 = t1.$index(0, key);
      t1.toString;
      return t1;
    }
  };
  A.XmlCharacterDataParser.prototype = {
    parseOn$1(context) {
      var t1,
        buffer = context.buffer,
        position = context.position,
        end = buffer.length,
        index = position < end ? B.JSString_methods.indexOf$2(buffer, this._stopper, position) : end;
      end = index === -1 ? end : index;
      if (end - position < this._minLength)
        return new A.Failure("Unable to parse character data.", buffer, position);
      else {
        t1 = B.JSString_methods.substring$2(buffer, position, end);
        return new A.Success(t1, buffer, end, type$.Success_String);
      }
    },
    fastParseOn$2(buffer, position) {
      var end = buffer.length,
        index = position < end ? B.JSString_methods.indexOf$2(buffer, this._stopper, position) : end;
      end = index === -1 ? end : index;
      return end - position < this._minLength ? -1 : end;
    }
  };
  A.XmlName.prototype = {
    accept$1(_, visitor) {
      var t1 = visitor.buffer,
        t2 = this.get$qualified();
      t1._contents += t2;
      return null;
    },
    $isXmlParentBase: 1
  };
  A._XmlName_Object_XmlHasVisitor.prototype = {};
  A._XmlName_Object_XmlHasVisitor_XmlHasWriter.prototype = {};
  A._XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent.prototype = {};
  A.createNameMatcher_closure.prototype = {
    call$1(named) {
      type$.XmlHasName._as(named);
      return true;
    },
    $signature: 26
  };
  A.createNameMatcher_closure0.prototype = {
    call$1(named) {
      type$.XmlHasName._as(named);
      return named.get$name(named).get$qualified() === this.name;
    },
    $signature: 26
  };
  A.XmlNodeList.prototype = {
    $indexSet(_, index, value) {
      var t1, $length, t2, _this = this;
      _this.$ti._precomputed1._as(value);
      t1 = _this._base;
      $length = t1.length;
      A.IndexError_check(index, $length, _this, null, null);
      if (value.get$nodeType(value) === B.XmlNodeType_6)
        _this.replaceRange$3(0, index, index + 1, _this._expandFragment$1(value));
      else {
        t2 = _this.__XmlNodeList__nodeTypes_F;
        t2 === $ && A.throwLateFieldNI("_nodeTypes");
        A.XmlNodeTypeException_checkValidType(value, t2);
        A.XmlParentException_checkNoParent(value);
        if (!(index >= 0 && index < t1.length))
          return A.ioore(t1, index);
        t1 = t1[index];
        t2 = _this.__XmlNodeList__parent_F;
        t2 === $ && A.throwLateFieldNI("_parent");
        t1.detachParent$1(t2);
        _this.super$DelegatingList$$indexSet(0, index, value);
        value.attachParent$1(t2);
      }
    },
    add$1(_, value) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(value);
      if (value.get$nodeType(value) === B.XmlNodeType_6)
        _this.addAll$1(0, _this._expandFragment$1(value));
      else {
        t1 = _this.__XmlNodeList__nodeTypes_F;
        t1 === $ && A.throwLateFieldNI("_nodeTypes");
        A.XmlNodeTypeException_checkValidType(value, t1);
        A.XmlParentException_checkNoParent(value);
        _this.super$DelegatingList$add(0, value);
        t1 = _this.__XmlNodeList__parent_F;
        t1 === $ && A.throwLateFieldNI("_parent");
        value.attachParent$1(t1);
      }
    },
    addAll$1(_, iterable) {
      var t1, _i, node, t2, _this = this,
        expanded = _this._expandNodes$1(_this.$ti._eval$1("Iterable<1>")._as(iterable));
      _this.super$DelegatingList$addAll(0, expanded);
      for (t1 = expanded.length, _i = 0; _i < expanded.length; expanded.length === t1 || (0, A.throwConcurrentModificationError)(expanded), ++_i) {
        node = expanded[_i];
        t2 = _this.__XmlNodeList__parent_F;
        t2 === $ && A.throwLateFieldNI("_parent");
        node.attachParent$1(t2);
      }
    },
    replaceRange$3(_, start, end, iterable) {
      var t1, expanded, i, t2, t3, _i, node, _this = this;
      _this.$ti._eval$1("Iterable<1>")._as(iterable);
      t1 = _this._base;
      A.RangeError_checkValidRange(start, end, t1.length);
      expanded = _this._expandNodes$1(iterable);
      for (i = start; i < end; ++i) {
        if (!(i >= 0 && i < t1.length))
          return A.ioore(t1, i);
        t2 = t1[i];
        t3 = _this.__XmlNodeList__parent_F;
        t3 === $ && A.throwLateFieldNI("_parent");
        t2.detachParent$1(t3);
      }
      _this.super$DelegatingList$replaceRange(0, start, end, expanded);
      for (t1 = expanded.length, _i = 0; _i < expanded.length; expanded.length === t1 || (0, A.throwConcurrentModificationError)(expanded), ++_i) {
        node = expanded[_i];
        t2 = _this.__XmlNodeList__parent_F;
        t2 === $ && A.throwLateFieldNI("_parent");
        node.attachParent$1(t2);
      }
    },
    _expandFragment$1(fragment) {
      var t1 = this.$ti._precomputed1;
      t1._as(fragment);
      return J.map$1$1$ax(fragment.get$children(fragment), new A.XmlNodeList__expandFragment_closure(this), t1);
    },
    _expandNodes$1(iterable) {
      var expanded, node, t2,
        t1 = this.$ti;
      t1._eval$1("Iterable<1>")._as(iterable);
      expanded = A._setArrayType([], t1._eval$1("JSArray<1>"));
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        node = t1.get$current(t1);
        if (J.get$nodeType$x(node) === B.XmlNodeType_6)
          B.JSArray_methods.addAll$1(expanded, this._expandFragment$1(node));
        else {
          t2 = this.__XmlNodeList__nodeTypes_F;
          t2 === $ && A.throwLateFieldNI("_nodeTypes");
          if (!t2.contains$1(0, node.get$nodeType(node)))
            A.throwExpression(A.XmlNodeTypeException$("Got " + node.get$nodeType(node).toString$0(0) + ", but expected one of " + t2.join$1(0, ", "), node, t2));
          if (node.get$parent(node) != null)
            A.throwExpression(A.XmlParentException$(string$.Node_a, node, node.get$parent(node)));
          B.JSArray_methods.add$1(expanded, node);
        }
      }
      return expanded;
    },
    set$__XmlNodeList__nodeTypes_F(__XmlNodeList__nodeTypes_F) {
      this.__XmlNodeList__nodeTypes_F = type$.Set_XmlNodeType._as(__XmlNodeList__nodeTypes_F);
    }
  };
  A.XmlNodeList__expandFragment_closure.prototype = {
    call$1(node) {
      var t1, t2;
      type$.XmlNode._as(node);
      t1 = this.$this;
      t2 = t1.__XmlNodeList__nodeTypes_F;
      t2 === $ && A.throwLateFieldNI("_nodeTypes");
      A.XmlNodeTypeException_checkValidType(node, t2);
      return t1.$ti._precomputed1._as(node.copy$0());
    },
    $signature() {
      return this.$this.$ti._eval$1("1(XmlNode)");
    }
  };
  A.XmlPrefixName.prototype = {
    _throwNoParent$0() {
      return A.throwExpression(A.NoSuchMethodError_NoSuchMethodError$withInvocation(this, A.JSInvocationMirror$(B.Symbol__throwNoParent, "_prefix_name$_throwNoParent$0", 0, [], [], 0)));
    },
    copy$0() {
      return new A.XmlPrefixName(this.prefix, this.local, this.qualified, null);
    },
    get$local() {
      return this.local;
    },
    get$qualified() {
      return this.qualified;
    }
  };
  A.XmlSimpleName.prototype = {
    _throwNoParent$0() {
      return A.throwExpression(A.NoSuchMethodError_NoSuchMethodError$withInvocation(this, A.JSInvocationMirror$(B.Symbol__throwNoParent, "_simple_name$_throwNoParent$0", 0, [], [], 0)));
    },
    get$qualified() {
      return this.local;
    },
    copy$0() {
      return new A.XmlSimpleName(this.local, null);
    },
    get$local() {
      return this.local;
    }
  };
  A.XmlVisitor.prototype = {};
  A.XmlWriter.prototype = {
    visitDocument$1(node) {
      this.writeIterable$1(node.XmlHasChildren_children);
    },
    visitElement$1(node) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.buffer;
      t1._contents += "<";
      t2 = node.name;
      t2.accept$1(0, _this);
      _this.writeAttributes$1(node);
      t3 = node.XmlHasChildren_children;
      t4 = t3._base.length === 0 && node.isSelfClosing;
      t5 = t1._contents;
      if (t4)
        t1._contents = t5 + "/>";
      else {
        t1._contents = t5 + ">";
        _this.writeIterable$1(t3);
        t1._contents += "</";
        t2.accept$1(0, _this);
        t1._contents += ">";
      }
    },
    writeAttributes$1(node) {
      var t1 = node.XmlHasAttributes_attributes;
      if (t1._base.length !== 0) {
        this.buffer._contents += " ";
        this.writeIterable$2(t1, " ");
      }
    },
    writeIterable$2(nodes, separator) {
      var t1, t2, t3, t4, t5, _this = this,
        iterator = J.get$iterator$ax(type$.Iterable_XmlHasVisitor._as(nodes));
      if (iterator.moveNext$0())
        if (separator == null || separator.length === 0) {
          t1 = type$.XmlHasVisitor;
          t2 = iterator.$ti._precomputed1;
          do {
            t3 = iterator.__interceptors$_current;
            t1._as(t3 == null ? t2._as(t3) : t3).accept$1(0, _this);
          } while (iterator.moveNext$0());
        } else {
          t1 = iterator.__interceptors$_current;
          if (t1 == null)
            t1 = iterator.$ti._precomputed1._as(t1);
          t2 = type$.XmlHasVisitor;
          t2._as(t1).accept$1(0, _this);
          for (t1 = _this.buffer, t3 = A.S(separator), t4 = iterator.$ti._precomputed1; iterator.moveNext$0();) {
            t1._contents += t3;
            t5 = iterator.__interceptors$_current;
            t2._as(t5 == null ? t4._as(t5) : t5).accept$1(0, _this);
          }
        }
    },
    writeIterable$1(nodes) {
      return this.writeIterable$2(nodes, null);
    }
  };
  A._XmlWriter_Object_XmlVisitor.prototype = {};
  A.XmlAnnotator.prototype = {
    annotate$4$buffer$start$stop($event, buffer, start, $stop) {
      var _this = this,
        t1 = _this._parents,
        t2 = t1.length;
      if (t2 === 0)
        $label0$0: {
          if ($event instanceof A.XmlDeclarationEvent) {
            t2 = _this._roots;
            if (!new A.WhereTypeIterable(t2, type$.WhereTypeIterable_XmlDeclarationEvent).get$isEmpty(0))
              throw A.wrapException(A.XmlParserException$("Expected at most one XML declaration", buffer, start));
            else if (t2.length !== 0)
              throw A.wrapException(A.XmlParserException$("Unexpected XML declaration", buffer, start));
            B.JSArray_methods.add$1(t2, $event);
            break $label0$0;
          }
          if ($event instanceof A.XmlDoctypeEvent) {
            t2 = _this._roots;
            if (!new A.WhereTypeIterable(t2, type$.WhereTypeIterable_XmlDoctypeEvent).get$isEmpty(0))
              throw A.wrapException(A.XmlParserException$("Expected at most one doctype declaration", buffer, start));
            else if (!new A.WhereTypeIterable(t2, type$.WhereTypeIterable_XmlStartElementEvent).get$isEmpty(0))
              throw A.wrapException(A.XmlParserException$("Unexpected doctype declaration", buffer, start));
            B.JSArray_methods.add$1(t2, $event);
            break $label0$0;
          }
          if ($event instanceof A.XmlStartElementEvent) {
            t2 = _this._roots;
            if (!new A.WhereTypeIterable(t2, type$.WhereTypeIterable_XmlStartElementEvent).get$isEmpty(0))
              throw A.wrapException(A.XmlParserException$("Unexpected root element", buffer, start));
            B.JSArray_methods.add$1(t2, $event);
          }
        }
      $label1$1: {
        if ($event instanceof A.XmlStartElementEvent) {
          if (!$event.isSelfClosing)
            B.JSArray_methods.add$1(t1, $event);
          break $label1$1;
        }
        if ($event instanceof A.XmlEndElementEvent) {
          if (t1.length === 0)
            throw A.wrapException(A.XmlTagException_XmlTagException$unexpectedClosingTag($event.name, buffer, start));
          else {
            t2 = $event.name;
            if (B.JSArray_methods.get$last(t1).name !== t2)
              throw A.wrapException(A.XmlTagException_XmlTagException$mismatchClosingTag(B.JSArray_methods.get$last(t1).name, t2, buffer, start));
          }
          t2 = t1.length;
          if (t2 !== 0) {
            if (0 >= t2)
              return A.ioore(t1, -1);
            t1.pop();
          }
        }
      }
    }
  };
  A.XmlHasBuffer.prototype = {};
  A.XmlHasLocation.prototype = {};
  A.XmlHasParent0.prototype = {};
  A._XmlEventEncoderSink.prototype = {
    visitCDATAEvent$1($event) {
      var t1 = this.sink,
        t2 = t1.$ti._precomputed1;
      t2._as("<![CDATA[");
      t1 = t1.callback;
      t1.call$1("<![CDATA[");
      t1.call$1(t2._as($event.value));
      t1.call$1(t2._as("]]>"));
    },
    visitCommentEvent$1($event) {
      var t1 = this.sink,
        t2 = t1.$ti._precomputed1;
      t2._as("<!--");
      t1 = t1.callback;
      t1.call$1("<!--");
      t1.call$1(t2._as($event.value));
      t1.call$1(t2._as("-->"));
    },
    visitDeclarationEvent$1($event) {
      var t1 = this.sink,
        t2 = t1.$ti._precomputed1;
      t2._as("<?xml");
      t1 = t1.callback;
      t1.call$1("<?xml");
      this.addAttributes$1($event.attributes);
      t1.call$1(t2._as("?>"));
    },
    visitDoctypeEvent$1($event) {
      var externalId, intSubset,
        t1 = this.sink,
        t2 = t1.$ti._precomputed1;
      t2._as("<!DOCTYPE");
      t1 = t1.callback;
      t1.call$1("<!DOCTYPE");
      t2._as(" ");
      t1.call$1(" ");
      t1.call$1(t2._as($event.name));
      externalId = $event.externalId;
      if (externalId != null) {
        t1.call$1(" ");
        t1.call$1(t2._as(externalId.toString$0(0)));
      }
      intSubset = $event.internalSubset;
      if (intSubset != null) {
        t1.call$1(" ");
        t1.call$1(t2._as("["));
        t1.call$1(t2._as(intSubset));
        t1.call$1(t2._as("]"));
      }
      t1.call$1(t2._as(">"));
    },
    visitEndElementEvent$1($event) {
      var t1 = this.sink,
        t2 = t1.$ti._precomputed1;
      t2._as("</");
      t1 = t1.callback;
      t1.call$1("</");
      t1.call$1(t2._as($event.name));
      t1.call$1(t2._as(">"));
    },
    visitProcessingEvent$1($event) {
      var t3,
        t1 = this.sink,
        t2 = t1.$ti._precomputed1;
      t2._as("<?");
      t1 = t1.callback;
      t1.call$1("<?");
      t1.call$1(t2._as($event.target));
      t3 = $event.value;
      if (t3.length !== 0) {
        t1.call$1(t2._as(" "));
        t1.call$1(t2._as(t3));
      }
      t1.call$1(t2._as("?>"));
    },
    visitStartElementEvent$1($event) {
      var t1 = this.sink,
        t2 = t1.$ti._precomputed1;
      t2._as("<");
      t1 = t1.callback;
      t1.call$1("<");
      t1.call$1(t2._as($event.name));
      this.addAttributes$1($event.attributes);
      if ($event.isSelfClosing)
        t1.call$1(t2._as("/>"));
      else
        t1.call$1(t2._as(">"));
    },
    visitTextEvent$1($event) {
      var t1 = this.sink,
        t2 = t1.$ti._precomputed1._as(A.stringReplaceAllFuncUnchecked($event.get$value(0), $.$get$_textPattern(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(A.default_mapping___textReplace$closure())), null));
      t1.callback.call$1(t2);
    },
    addAttributes$1(attributes) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      for (t1 = J.get$iterator$ax(type$.List_XmlEventAttribute._as(attributes)), t2 = this.sink, t3 = t2.$ti._precomputed1, t4 = this.entityMapping; t1.moveNext$0();) {
        t5 = t1.get$current(t1);
        t3._as(" ");
        t6 = t2.callback;
        t6.call$1(" ");
        t6.call$1(t3._as(t5.name));
        t6.call$1(t3._as("="));
        t7 = t5.value;
        t5 = t5.attributeType;
        t8 = t5.token;
        t6.call$1(t3._as(t8 + t4.encodeAttributeValue$2(t7, t5) + t8));
      }
    },
    $isSink: 1
  };
  A.__XmlEventEncoderSink_Object_XmlEventVisitor.prototype = {};
  A._XmlNodeDecoderSink.prototype = {
    visitCDATAEvent$1($event) {
      return this.commit$2(0, new A.XmlCDATA($event.value, null), $event);
    },
    visitCommentEvent$1($event) {
      return this.commit$2(0, new A.XmlComment($event.value, null), $event);
    },
    visitDeclarationEvent$1($event) {
      return this.commit$2(0, A.XmlDeclaration$(this.convertAttributes$1($event.attributes)), $event);
    },
    visitDoctypeEvent$1($event) {
      return this.commit$2(0, new A.XmlDoctype($event.name, $event.externalId, $event.internalSubset, null), $event);
    },
    visitEndElementEvent$1($event) {
      var t2, t3, t4, t5,
        t1 = this.parent;
      if (t1 == null)
        throw A.wrapException(A.XmlTagException_XmlTagException$unexpectedClosingTag($event.name, $event.XmlHasBuffer__buffer, $event.XmlHasLocation__start));
      t2 = t1.name.get$qualified();
      t3 = $event.name;
      t4 = $event.XmlHasBuffer__buffer;
      t5 = $event.XmlHasLocation__start;
      if (t2 !== t3)
        A.throwExpression(A.XmlTagException_XmlTagException$mismatchClosingTag(t2, t3, t4, t5));
      t1.isSelfClosing = t1.XmlHasChildren_children._base.length !== 0;
      t2 = A.XmlParentExtension_get_parentElement(t1);
      this.parent = t2;
      if (t2 == null)
        this.commit$2(0, t1, $event.XmlHasParent__parent0);
    },
    visitProcessingEvent$1($event) {
      return this.commit$2(0, new A.XmlProcessing($event.target, $event.value, null), $event);
    },
    visitStartElementEvent$1($event) {
      var t1, _this = this,
        element = A.XmlElement$tag($event.name, _this.convertAttributes$1($event.attributes), B.List_empty0, true);
      if ($event.isSelfClosing)
        _this.commit$2(0, element, $event);
      else {
        t1 = _this.parent;
        if (t1 != null)
          t1.XmlHasChildren_children.add$1(0, element);
        _this.parent = element;
      }
    },
    visitTextEvent$1($event) {
      return this.commit$2(0, new A.XmlText($event.get$value(0), null), $event);
    },
    commit$2(_, node, $event) {
      var outerEvent, outerElement, t2,
        t1 = this.parent;
      if (t1 == null) {
        outerEvent = $event == null ? null : $event.XmlHasParent__parent0;
        t1 = type$.JSArray_XmlNode;
        outerElement = node;
        for (; outerEvent != null; outerEvent = outerEvent.XmlHasParent__parent0)
          outerElement = A.XmlElement$tag(outerEvent.name, this.convertAttributes$1(outerEvent.attributes), A._setArrayType([outerElement], t1), outerEvent.isSelfClosing);
        t2 = this.sink;
        t1 = t2.$ti._precomputed1._as(A._setArrayType([node], t1));
        t2.callback.call$1(t1);
      } else
        t1.XmlHasChildren_children.add$1(0, node);
    },
    convertAttributes$1(attributes) {
      return J.map$1$1$ax(type$.Iterable_XmlEventAttribute._as(attributes), new A._XmlNodeDecoderSink_convertAttributes_closure(), type$.XmlAttribute);
    },
    $isSink: 1
  };
  A._XmlNodeDecoderSink_convertAttributes_closure.prototype = {
    call$1(attribute) {
      type$.XmlEventAttribute._as(attribute);
      return A.XmlAttribute$(A.XmlName_XmlName$fromString(attribute.name), attribute.value, attribute.attributeType);
    },
    $signature: 67
  };
  A.__XmlNodeDecoderSink_Object_XmlEventVisitor.prototype = {};
  A.XmlEvent.prototype = {
    toString$0(_) {
      var t1,
        buffer = new A.StringBuffer("");
      B.JSArray_methods.forEach$1(type$.List_XmlEvent._as(A._setArrayType([this], type$.JSArray_XmlEvent)), new A._XmlEventEncoderSink(type$.Sink_String._as(new A.ConversionSink(buffer.get$write(buffer), type$.ConversionSink_String)), B.C_XmlDefaultEntityMapping).get$visit());
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._XmlEvent_Object_XmlHasParent.prototype = {};
  A._XmlEvent_Object_XmlHasParent_XmlHasLocation.prototype = {};
  A._XmlEvent_Object_XmlHasParent_XmlHasLocation_XmlHasBuffer.prototype = {};
  A.XmlCDATAEvent.prototype = {
    accept$1(_, visitor) {
      return visitor.visitCDATAEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_1, this.value, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlCDATAEvent && other.value === this.value;
    }
  };
  A.XmlCommentEvent.prototype = {
    accept$1(_, visitor) {
      return visitor.visitCommentEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_2, this.value, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlCommentEvent && other.value === this.value;
    }
  };
  A.XmlDeclarationEvent.prototype = {
    accept$1(_, visitor) {
      return visitor.visitDeclarationEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_3, B.C_ListEquality.hash$1(0, this.attributes), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlDeclarationEvent && B.C_ListEquality.equals$2(other.attributes, this.attributes);
    }
  };
  A.XmlDoctypeEvent.prototype = {
    accept$1(_, visitor) {
      return visitor.visitDoctypeEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_4, this.name, this.externalId, this.internalSubset, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlDoctypeEvent && this.name === other.name && J.$eq$(this.externalId, other.externalId) && this.internalSubset == other.internalSubset;
    }
  };
  A.XmlEndElementEvent.prototype = {
    accept$1(_, visitor) {
      return visitor.visitEndElementEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_7, this.name, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlEndElementEvent && other.name === this.name;
    }
  };
  A._XmlEndElementEvent_XmlEvent_XmlNamed.prototype = {};
  A.XmlProcessingEvent.prototype = {
    accept$1(_, visitor) {
      return visitor.visitProcessingEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_10, this.value, this.target, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlProcessingEvent && other.target === this.target && other.value === this.value;
    }
  };
  A.XmlStartElementEvent.prototype = {
    accept$1(_, visitor) {
      return visitor.visitStartElementEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_7, this.name, this.isSelfClosing, B.C_ListEquality.hash$1(0, this.attributes), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlStartElementEvent && other.name === this.name && other.isSelfClosing === this.isSelfClosing && B.C_ListEquality.equals$2(other.attributes, this.attributes);
    }
  };
  A._XmlStartElementEvent_XmlEvent_XmlNamed.prototype = {};
  A.XmlRawTextEvent.prototype = {
    get$value(_) {
      var result, _this = this,
        value = _this.__XmlRawTextEvent_value_FI;
      if (value === $) {
        result = _this.entityMapping.decode$1(0, _this.raw);
        _this.__XmlRawTextEvent_value_FI !== $ && A.throwLateFieldADI("value");
        _this.__XmlRawTextEvent_value_FI = result;
        value = result;
      }
      return value;
    },
    accept$1(_, visitor) {
      return visitor.visitTextEvent$1(this);
    },
    get$hashCode(_) {
      return A.Object_hash(B.XmlNodeType_11, this.get$value(0), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlRawTextEvent && other.get$value(0) === this.get$value(0);
    },
    $isXmlTextEvent: 1
  };
  A.XmlEventIterable.prototype = {
    get$iterator(_) {
      var t1 = A._setArrayType([], type$.JSArray_XmlEvent),
        t2 = A._setArrayType([], type$.JSArray_XmlStartElementEvent);
      return new A.XmlEventIterator($.$get$eventParserCache().$index(0, this.entityMapping), new A.XmlAnnotator(true, true, false, false, false, t1, t2), new A.Failure("", this.input, 0));
    }
  };
  A.XmlEventIterator.prototype = {
    get$current(_) {
      var t1 = this._iterator$_current;
      t1.toString;
      return t1;
    },
    moveNext$0() {
      var result, t1, t2, t3, t4, t5, _this = this,
        context = _this._context;
      if (context != null) {
        result = _this._eventParser.parseOn$1(context);
        if (result instanceof A.Success) {
          _this.set$_context(result);
          t1 = result.value;
          _this.set$_iterator$_current(t1);
          _this._annotator.annotate$4$buffer$start$stop(t1, context.buffer, context.position, result.position);
          return true;
        } else {
          t1 = context.position;
          t2 = context.buffer;
          if (t1 < t2.length) {
            t3 = result.get$message(result);
            _this.set$_context(new A.Failure(t3, t2, t1 + 1));
            _this._iterator$_current = null;
            throw A.wrapException(A.XmlParserException$(result.get$message(result), result.buffer, result.position));
          } else {
            _this.set$_context(null);
            _this._iterator$_current = null;
            t3 = _this._annotator;
            t4 = t3._parents;
            t5 = t4.length;
            if (t5 !== 0)
              A.throwExpression(A.XmlTagException_XmlTagException$missingClosingTag(B.JSArray_methods.get$last(t4).name, t2, t1));
            t3 = new A.WhereTypeIterable(t3._roots, type$.WhereTypeIterable_XmlStartElementEvent).get$iterator(0).moveNext$0();
            if (!t3)
              A.throwExpression(A.XmlParserException$("Expected a single root element", t2, t1));
            return false;
          }
        }
      }
      return false;
    },
    set$_context(_context) {
      this._context = type$.nullable_Result_XmlEvent._as(_context);
    },
    set$_iterator$_current(_current) {
      this._iterator$_current = type$.nullable_XmlEvent._as(_current);
    },
    $isIterator: 1
  };
  A.XmlEventParser.prototype = {
    event$0() {
      var _this = this;
      return A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(_this.get$characterData(), B.List_empty2, type$.ReferenceParser_XmlTextEvent), new A.ReferenceParser(_this.get$startElement(), B.List_empty2, type$.ReferenceParser_XmlStartElementEvent), new A.ReferenceParser(_this.get$endElement(_this), B.List_empty2, type$.ReferenceParser_XmlEndElementEvent), new A.ReferenceParser(_this.get$comment(), B.List_empty2, type$.ReferenceParser_XmlCommentEvent), new A.ReferenceParser(_this.get$cdata(), B.List_empty2, type$.ReferenceParser_XmlCDATAEvent), new A.ReferenceParser(_this.get$declaration(), B.List_empty2, type$.ReferenceParser_XmlDeclarationEvent), new A.ReferenceParser(_this.get$processing(), B.List_empty2, type$.ReferenceParser_XmlProcessingEvent), new A.ReferenceParser(_this.get$doctype(), B.List_empty2, type$.ReferenceParser_XmlDoctypeEvent)], type$.JSArray_Parser_XmlEvent), A.failure_joiner__selectFarthest$closure(), type$.XmlEvent);
    },
    characterData$0() {
      return A.MapParserExtension_map(new A.XmlCharacterDataParser("<", 1), new A.XmlEventParser_characterData_closure(this), false, type$.String, type$.XmlTextEvent);
    },
    startElement$0() {
      var _this = this,
        t1 = type$.ReferenceParser_String,
        t2 = type$.String,
        t3 = type$.List_XmlEventAttribute;
      return A.RecordParserExtension5_map5(A.seq5(A.PredicateStringExtension_toParser("<"), new A.ReferenceParser(_this.get$nameToken(), B.List_empty2, t1), new A.ReferenceParser(_this.get$attributes(_this), B.List_empty2, type$.ReferenceParser_List_XmlEventAttribute), new A.ReferenceParser(_this.get$spaceOptional(), B.List_empty2, t1), A.ChoiceParser$(A._setArrayType([A.PredicateStringExtension_toParser(">"), A.PredicateStringExtension_toParser("/>")], type$.JSArray_Parser_String), A.failure_joiner__selectFirst$closure(), t2), t2, t2, t3, t2, t2), new A.XmlEventParser_startElement_closure(), t2, t2, t3, t2, t2, type$.XmlStartElementEvent);
    },
    attributes$0(_) {
      return A.PossessiveRepeatingParserExtension_repeat(new A.ReferenceParser(this.get$attribute(), B.List_empty2, type$.ReferenceParser_XmlEventAttribute), 0, 9007199254740991, type$.XmlEventAttribute);
    },
    attribute$0() {
      var _this = this,
        t1 = type$.ReferenceParser_String,
        t2 = type$.String,
        t3 = type$.Record_2_String_and_XmlAttributeType;
      return A.RecordParserExtension3_map3(A.seq3(new A.ReferenceParser(_this.get$space(), B.List_empty2, t1), new A.ReferenceParser(_this.get$nameToken(), B.List_empty2, t1), new A.ReferenceParser(_this.get$attributeAssignment(), B.List_empty2, type$.ReferenceParser_Record_2_String_and_XmlAttributeType), t2, t2, t3), new A.XmlEventParser_attribute_closure(_this), t2, t2, t3, type$.XmlEventAttribute);
    },
    attributeAssignment$0() {
      var t1 = this.get$spaceOptional(),
        t2 = type$.ReferenceParser_String,
        t3 = type$.String,
        t4 = type$.Record_2_String_and_XmlAttributeType;
      return new A.OptionalParser(B.Record2_8aB, A.RecordParserExtension4_map4(A.seq4(new A.ReferenceParser(t1, B.List_empty2, t2), A.PredicateStringExtension_toParser("="), new A.ReferenceParser(t1, B.List_empty2, t2), new A.ReferenceParser(this.get$attributeValue(), B.List_empty2, type$.ReferenceParser_Record_2_String_and_XmlAttributeType), t3, t3, t3, t4), new A.XmlEventParser_attributeAssignment_closure(), t3, t3, t3, t4, t4), type$.OptionalParser_Record_2_String_and_XmlAttributeType);
    },
    attributeValue$0() {
      var t1 = type$.ReferenceParser_Record_2_String_and_XmlAttributeType;
      return A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(this.get$attributeValueDoubleQuote(), B.List_empty2, t1), new A.ReferenceParser(this.get$attributeValueSingleQuote(), B.List_empty2, t1), new A.ReferenceParser(this.get$attributeValueNoQuote(), B.List_empty2, t1)], type$.JSArray_Parser_Record_2_String_and_XmlAttributeType), null, type$.Record_2_String_and_XmlAttributeType);
    },
    attributeValueDoubleQuote$0() {
      var t1 = type$.String;
      return A.RecordParserExtension3_map3(A.seq3(A.PredicateStringExtension_toParser('"'), new A.XmlCharacterDataParser('"', 0), A.PredicateStringExtension_toParser('"'), t1, t1, t1), new A.XmlEventParser_attributeValueDoubleQuote_closure(), t1, t1, t1, type$.Record_2_String_and_XmlAttributeType);
    },
    attributeValueSingleQuote$0() {
      var t1 = type$.String;
      return A.RecordParserExtension3_map3(A.seq3(A.PredicateStringExtension_toParser("'"), new A.XmlCharacterDataParser("'", 0), A.PredicateStringExtension_toParser("'"), t1, t1, t1), new A.XmlEventParser_attributeValueSingleQuote_closure(), t1, t1, t1, type$.Record_2_String_and_XmlAttributeType);
    },
    attributeValueNoQuote$0() {
      return A.MapParserExtension_map(new A.ReferenceParser(this.get$nameToken(), B.List_empty2, type$.ReferenceParser_String), new A.XmlEventParser_attributeValueNoQuote_closure(), false, type$.String, type$.Record_2_String_and_XmlAttributeType);
    },
    endElement$0(_) {
      var t1 = type$.ReferenceParser_String,
        t2 = type$.String;
      return A.RecordParserExtension4_map4(A.seq4(A.PredicateStringExtension_toParser("</"), new A.ReferenceParser(this.get$nameToken(), B.List_empty2, t1), new A.ReferenceParser(this.get$spaceOptional(), B.List_empty2, t1), A.PredicateStringExtension_toParser(">"), t2, t2, t2, t2), new A.XmlEventParser_endElement_closure(), t2, t2, t2, t2, type$.XmlEndElementEvent);
    },
    comment$0() {
      var t1 = type$.String;
      return A.RecordParserExtension3_map3(A.seq3(A.PredicateStringExtension_toParser("<!--"), new A.FlattenParser('"-->" expected', new A.LazyRepeatingParser(A.PredicateStringExtension_toParser("-->"), 0, 9007199254740991, new A.AnyCharacterParser("input expected"), type$.LazyRepeatingParser_String), type$.FlattenParser_List_String), A.PredicateStringExtension_toParser("-->"), t1, t1, t1), new A.XmlEventParser_comment_closure(), t1, t1, t1, type$.XmlCommentEvent);
    },
    cdata$0() {
      var t1 = type$.String;
      return A.RecordParserExtension3_map3(A.seq3(A.PredicateStringExtension_toParser("<![CDATA["), new A.FlattenParser('"]]>" expected', new A.LazyRepeatingParser(A.PredicateStringExtension_toParser("]]>"), 0, 9007199254740991, new A.AnyCharacterParser("input expected"), type$.LazyRepeatingParser_String), type$.FlattenParser_List_String), A.PredicateStringExtension_toParser("]]>"), t1, t1, t1), new A.XmlEventParser_cdata_closure(), t1, t1, t1, type$.XmlCDATAEvent);
    },
    declaration$0() {
      var t1 = type$.String,
        t2 = type$.List_XmlEventAttribute;
      return A.RecordParserExtension4_map4(A.seq4(A.PredicateStringExtension_toParser("<?xml"), new A.ReferenceParser(this.get$attributes(this), B.List_empty2, type$.ReferenceParser_List_XmlEventAttribute), new A.ReferenceParser(this.get$spaceOptional(), B.List_empty2, type$.ReferenceParser_String), A.PredicateStringExtension_toParser("?>"), t1, t2, t1, t1), new A.XmlEventParser_declaration_closure(), t1, t2, t1, t1, type$.XmlDeclarationEvent);
    },
    processing$0() {
      var t1 = type$.ReferenceParser_String,
        t2 = type$.String;
      return A.RecordParserExtension4_map4(A.seq4(A.PredicateStringExtension_toParser("<?"), new A.ReferenceParser(this.get$nameToken(), B.List_empty2, t1), new A.OptionalParser("", A.RecordParserExtension2_map2(A.seq2(new A.ReferenceParser(this.get$space(), B.List_empty2, t1), new A.FlattenParser('"?>" expected', new A.LazyRepeatingParser(A.PredicateStringExtension_toParser("?>"), 0, 9007199254740991, new A.AnyCharacterParser("input expected"), type$.LazyRepeatingParser_String), type$.FlattenParser_List_String), t2, t2), new A.XmlEventParser_processing_closure(), t2, t2, t2), type$.OptionalParser_String), A.PredicateStringExtension_toParser("?>"), t2, t2, t2, t2), new A.XmlEventParser_processing_closure0(), t2, t2, t2, t2, type$.XmlProcessingEvent);
    },
    doctype$0() {
      var _this = this,
        t1 = A.PredicateStringExtension_toParser("<!DOCTYPE"),
        t2 = _this.get$space(),
        t3 = type$.ReferenceParser_String,
        t4 = _this.get$spaceOptional(),
        t5 = type$.String;
      return A.RecordParserExtension8_map8(new A.SequenceParser8(t1, new A.ReferenceParser(t2, B.List_empty2, t3), new A.ReferenceParser(_this.get$nameToken(), B.List_empty2, t3), new A.OptionalParser(null, new A.SkipParser(new A.ReferenceParser(t2, B.List_empty2, type$.ReferenceParser_void), new A.EpsilonParser(null, type$.EpsilonParser_void), new A.ReferenceParser(_this.get$doctypeExternalId(), B.List_empty2, type$.ReferenceParser_DtdExternalId), type$.SkipParser_DtdExternalId), type$.OptionalParser_nullable_DtdExternalId), new A.ReferenceParser(t4, B.List_empty2, t3), new A.OptionalParser(null, new A.ReferenceParser(_this.get$doctypeIntSubset(), B.List_empty2, t3), type$.OptionalParser_nullable_String), new A.ReferenceParser(t4, B.List_empty2, t3), A.PredicateStringExtension_toParser(">"), type$.SequenceParser8_of_String_and_String_and_String_and_nullable_DtdExternalId_and_String_and_nullable_String_and_String_and_String), new A.XmlEventParser_doctype_closure(), t5, t5, t5, type$.nullable_DtdExternalId, t5, type$.nullable_String, t5, t5, type$.XmlDoctypeEvent);
    },
    doctypeExternalId$0() {
      var t1 = type$.ReferenceParser_DtdExternalId;
      return A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(this.get$doctypeExternalIdSystem(), B.List_empty2, t1), new A.ReferenceParser(this.get$doctypeExternalIdPublic(), B.List_empty2, t1)], type$.JSArray_Parser_DtdExternalId), null, type$.DtdExternalId);
    },
    doctypeExternalIdSystem$0() {
      var t1 = type$.String,
        t2 = type$.Record_2_String_and_XmlAttributeType;
      return A.RecordParserExtension3_map3(A.seq3(A.PredicateStringExtension_toParser("SYSTEM"), new A.ReferenceParser(this.get$space(), B.List_empty2, type$.ReferenceParser_String), new A.ReferenceParser(this.get$attributeValue(), B.List_empty2, type$.ReferenceParser_Record_2_String_and_XmlAttributeType), t1, t1, t2), new A.XmlEventParser_doctypeExternalIdSystem_closure(), t1, t1, t2, type$.DtdExternalId);
    },
    doctypeExternalIdPublic$0() {
      var t1 = this.get$space(),
        t2 = type$.ReferenceParser_String,
        t3 = this.get$attributeValue(),
        t4 = type$.ReferenceParser_Record_2_String_and_XmlAttributeType,
        t5 = type$.String,
        t6 = type$.Record_2_String_and_XmlAttributeType;
      return A.RecordParserExtension5_map5(A.seq5(A.PredicateStringExtension_toParser("PUBLIC"), new A.ReferenceParser(t1, B.List_empty2, t2), new A.ReferenceParser(t3, B.List_empty2, t4), new A.ReferenceParser(t1, B.List_empty2, t2), new A.ReferenceParser(t3, B.List_empty2, t4), t5, t5, t6, t5, t6), new A.XmlEventParser_doctypeExternalIdPublic_closure(), t5, t5, t6, t5, t6, type$.DtdExternalId);
    },
    doctypeIntSubset$0() {
      var t3, _this = this,
        t1 = A.PredicateStringExtension_toParser("["),
        t2 = type$.ReferenceParser_dynamic;
      t2 = A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(_this.get$doctypeElementDecl(), B.List_empty2, t2), new A.ReferenceParser(_this.get$doctypeAttlistDecl(), B.List_empty2, t2), new A.ReferenceParser(_this.get$doctypeEntityDecl(), B.List_empty2, t2), new A.ReferenceParser(_this.get$doctypeNotationDecl(), B.List_empty2, t2), new A.ReferenceParser(_this.get$processing(), B.List_empty2, type$.ReferenceParser_XmlProcessingEvent), new A.ReferenceParser(_this.get$comment(), B.List_empty2, type$.ReferenceParser_XmlCommentEvent), new A.ReferenceParser(_this.get$doctypeReference(), B.List_empty2, t2), new A.AnyCharacterParser("input expected")], type$.JSArray_Parser_dynamic), null, type$.dynamic);
      t3 = type$.String;
      return A.RecordParserExtension3_map3(A.seq3(t1, new A.FlattenParser('"]" expected', new A.LazyRepeatingParser(A.PredicateStringExtension_toParser("]"), 0, 9007199254740991, t2, type$.LazyRepeatingParser_dynamic), type$.FlattenParser_List_dynamic), A.PredicateStringExtension_toParser("]"), t3, t3, t3), new A.XmlEventParser_doctypeIntSubset_closure(), t3, t3, t3, t3);
    },
    doctypeElementDecl$0() {
      var t1 = A.PredicateStringExtension_toParser("<!ELEMENT"),
        t2 = A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(this.get$nameToken(), B.List_empty2, type$.ReferenceParser_String), new A.ReferenceParser(this.get$attributeValue(), B.List_empty2, type$.ReferenceParser_Record_2_String_and_XmlAttributeType), new A.AnyCharacterParser("input expected")], type$.JSArray_Parser_Object), null, type$.Object),
        t3 = type$.String;
      return A.seq3(t1, new A.LazyRepeatingParser(A.PredicateStringExtension_toParser(">"), 0, 9007199254740991, t2, type$.LazyRepeatingParser_Object), A.PredicateStringExtension_toParser(">"), t3, type$.List_Object, t3);
    },
    doctypeAttlistDecl$0() {
      var t1 = A.PredicateStringExtension_toParser("<!ATTLIST"),
        t2 = A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(this.get$nameToken(), B.List_empty2, type$.ReferenceParser_String), new A.ReferenceParser(this.get$attributeValue(), B.List_empty2, type$.ReferenceParser_Record_2_String_and_XmlAttributeType), new A.AnyCharacterParser("input expected")], type$.JSArray_Parser_Object), null, type$.Object),
        t3 = type$.String;
      return A.seq3(t1, new A.LazyRepeatingParser(A.PredicateStringExtension_toParser(">"), 0, 9007199254740991, t2, type$.LazyRepeatingParser_Object), A.PredicateStringExtension_toParser(">"), t3, type$.List_Object, t3);
    },
    doctypeEntityDecl$0() {
      var t1 = A.PredicateStringExtension_toParser("<!ENTITY"),
        t2 = A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(this.get$nameToken(), B.List_empty2, type$.ReferenceParser_String), new A.ReferenceParser(this.get$attributeValue(), B.List_empty2, type$.ReferenceParser_Record_2_String_and_XmlAttributeType), new A.AnyCharacterParser("input expected")], type$.JSArray_Parser_Object), null, type$.Object),
        t3 = type$.String;
      return A.seq3(t1, new A.LazyRepeatingParser(A.PredicateStringExtension_toParser(">"), 0, 9007199254740991, t2, type$.LazyRepeatingParser_Object), A.PredicateStringExtension_toParser(">"), t3, type$.List_Object, t3);
    },
    doctypeNotationDecl$0() {
      var t1 = A.PredicateStringExtension_toParser("<!NOTATION"),
        t2 = A.ChoiceParser$(A._setArrayType([new A.ReferenceParser(this.get$nameToken(), B.List_empty2, type$.ReferenceParser_String), new A.ReferenceParser(this.get$attributeValue(), B.List_empty2, type$.ReferenceParser_Record_2_String_and_XmlAttributeType), new A.AnyCharacterParser("input expected")], type$.JSArray_Parser_Object), null, type$.Object),
        t3 = type$.String;
      return A.seq3(t1, new A.LazyRepeatingParser(A.PredicateStringExtension_toParser(">"), 0, 9007199254740991, t2, type$.LazyRepeatingParser_Object), A.PredicateStringExtension_toParser(">"), t3, type$.List_Object, t3);
    },
    doctypeReference$0() {
      var t1 = type$.String;
      return A.seq3(A.PredicateStringExtension_toParser("%"), new A.ReferenceParser(this.get$nameToken(), B.List_empty2, type$.ReferenceParser_String), A.PredicateStringExtension_toParser(";"), t1, t1, t1);
    },
    space$0() {
      var _s19_ = "whitespace expected";
      return A.RepeatingCharacterParserExtension_repeatString(new A.SingleCharacterParser(B.C_WhitespaceCharPredicate, _s19_), 1, 9007199254740991, _s19_);
    },
    spaceOptional$0() {
      var _s19_ = "whitespace expected";
      return A.RepeatingCharacterParserExtension_repeatString(new A.SingleCharacterParser(B.C_WhitespaceCharPredicate, _s19_), 0, 9007199254740991, _s19_);
    },
    nameToken$0() {
      var t1 = type$.ReferenceParser_String,
        t2 = type$.String;
      return new A.FlattenParser("name expected", A.seq2(new A.ReferenceParser(this.get$nameStartChar(), B.List_empty2, t1), A.PossessiveRepeatingParserExtension_repeat(new A.ReferenceParser(this.get$nameChar(), B.List_empty2, t1), 0, 9007199254740991, t2), t2, type$.List_String), type$.FlattenParser_Record_2_String_and_List_String);
    },
    nameStartChar$0() {
      return A.pattern(":A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c-\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd", null);
    },
    nameChar$0() {
      return A.pattern(":A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c-\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd-.0-9\xb7\u0300-\u036f\u203f-\u2040", null);
    }
  };
  A.XmlEventParser_characterData_closure.prototype = {
    call$1(each) {
      var _null = null;
      return new A.XmlRawTextEvent(A._asString(each), this.$this.entityMapping, _null, _null, _null, _null);
    },
    $signature: 83
  };
  A.XmlEventParser_startElement_closure.prototype = {
    call$5(_, nameToken, attributes, __, closeElement) {
      var _null = null;
      A._asString(_);
      A._asString(nameToken);
      type$.List_XmlEventAttribute._as(attributes);
      A._asString(__);
      return new A.XmlStartElementEvent(nameToken, attributes, A._asString(closeElement) === "/>", _null, _null, _null, _null);
    },
    $signature: 84
  };
  A.XmlEventParser_attribute_closure.prototype = {
    call$3(_, $name, attribute) {
      A._asString(_);
      A._asString($name);
      type$.Record_2_String_and_XmlAttributeType._as(attribute);
      return new A.XmlEventAttribute($name, this.$this.entityMapping.decode$1(0, attribute._0), attribute._1, null);
    },
    $signature: 85
  };
  A.XmlEventParser_attributeAssignment_closure.prototype = {
    call$4(_, __, ___, value) {
      A._asString(_);
      A._asString(__);
      A._asString(___);
      return type$.Record_2_String_and_XmlAttributeType._as(value);
    },
    $signature: 86
  };
  A.XmlEventParser_attributeValueDoubleQuote_closure.prototype = {
    call$3(_, value, __) {
      A._asString(_);
      A._asString(value);
      A._asString(__);
      return new A._Record_2(value, B.XmlAttributeType_2x0);
    },
    $signature: 27
  };
  A.XmlEventParser_attributeValueSingleQuote_closure.prototype = {
    call$3(_, value, __) {
      A._asString(_);
      A._asString(value);
      A._asString(__);
      return new A._Record_2(value, B.XmlAttributeType_3h3);
    },
    $signature: 27
  };
  A.XmlEventParser_attributeValueNoQuote_closure.prototype = {
    call$1(value) {
      return new A._Record_2(A._asString(value), B.XmlAttributeType_2x0);
    },
    $signature: 88
  };
  A.XmlEventParser_endElement_closure.prototype = {
    call$4(_, $name, __, ___) {
      var _null = null;
      A._asString(_);
      A._asString($name);
      A._asString(__);
      A._asString(___);
      return new A.XmlEndElementEvent($name, _null, _null, _null, _null);
    },
    $signature: 89
  };
  A.XmlEventParser_comment_closure.prototype = {
    call$3(_, text, __) {
      var _null = null;
      A._asString(_);
      A._asString(text);
      A._asString(__);
      return new A.XmlCommentEvent(text, _null, _null, _null, _null);
    },
    $signature: 90
  };
  A.XmlEventParser_cdata_closure.prototype = {
    call$3(_, text, __) {
      var _null = null;
      A._asString(_);
      A._asString(text);
      A._asString(__);
      return new A.XmlCDATAEvent(text, _null, _null, _null, _null);
    },
    $signature: 91
  };
  A.XmlEventParser_declaration_closure.prototype = {
    call$4(_, attributes, __, ___) {
      var _null = null;
      A._asString(_);
      type$.List_XmlEventAttribute._as(attributes);
      A._asString(__);
      A._asString(___);
      return new A.XmlDeclarationEvent(attributes, _null, _null, _null, _null);
    },
    $signature: 92
  };
  A.XmlEventParser_processing_closure.prototype = {
    call$2(_, text) {
      A._asString(_);
      return A._asString(text);
    },
    $signature: 93
  };
  A.XmlEventParser_processing_closure0.prototype = {
    call$4(_, target, text, __) {
      var _null = null;
      A._asString(_);
      A._asString(target);
      A._asString(text);
      A._asString(__);
      return new A.XmlProcessingEvent(target, text, _null, _null, _null, _null);
    },
    $signature: 94
  };
  A.XmlEventParser_doctype_closure.prototype = {
    call$8(_, __, $name, externalId, ___, internalSubset, ____, _____) {
      var _null = null;
      A._asString(_);
      A._asString(__);
      A._asString($name);
      type$.nullable_DtdExternalId._as(externalId);
      A._asString(___);
      A._asStringQ(internalSubset);
      A._asString(____);
      A._asString(_____);
      return new A.XmlDoctypeEvent($name, externalId, internalSubset, _null, _null, _null, _null);
    },
    $signature: 95
  };
  A.XmlEventParser_doctypeExternalIdSystem_closure.prototype = {
    call$3(_, __, attribute) {
      A._asString(_);
      A._asString(__);
      type$.Record_2_String_and_XmlAttributeType._as(attribute);
      return new A.DtdExternalId(null, null, attribute._0, attribute._1);
    },
    $signature: 96
  };
  A.XmlEventParser_doctypeExternalIdPublic_closure.prototype = {
    call$5(_, __, publicAttribute, ___, systemAttribute) {
      var t1;
      A._asString(_);
      A._asString(__);
      t1 = type$.Record_2_String_and_XmlAttributeType;
      t1._as(publicAttribute);
      A._asString(___);
      t1._as(systemAttribute);
      return new A.DtdExternalId(publicAttribute._0, publicAttribute._1, systemAttribute._0, systemAttribute._1);
    },
    $signature: 97
  };
  A.XmlEventParser_doctypeIntSubset_closure.prototype = {
    call$3(_, contents, __) {
      A._asString(_);
      A._asString(contents);
      A._asString(__);
      return contents;
    },
    $signature: 98
  };
  A.eventParserCache_closure.prototype = {
    call$1(entityMapping) {
      return A.resolve(new A.ReferenceParser(new A.XmlEventParser(type$.XmlEntityMapping._as(entityMapping)).get$event(), B.List_empty2, type$.ReferenceParser_XmlEvent), type$.XmlEvent);
    },
    $signature: 99
  };
  A.ConversionSink.prototype = {$isSink: 1};
  A.XmlEventAttribute.prototype = {
    get$hashCode(_) {
      return A.Object_hash(this.name, this.value, this.attributeType, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.XmlEventAttribute && other.name === this.name && other.value === this.value && other.attributeType === this.attributeType;
    }
  };
  A._XmlEventAttribute_Object_XmlNamed.prototype = {};
  A._XmlEventAttribute_Object_XmlNamed_XmlHasParent.prototype = {};
  A.XmlNamed.prototype = {};
  A.XmlEventVisitor.prototype = {
    visit$1($event) {
      return type$.XmlEvent._as($event).accept$1(0, this);
    },
    visitCDATAEvent$1($event) {
    },
    visitCommentEvent$1($event) {
    },
    visitDeclarationEvent$1($event) {
    },
    visitDoctypeEvent$1($event) {
    },
    visitEndElementEvent$1($event) {
    },
    visitProcessingEvent$1($event) {
    },
    visitStartElementEvent$1($event) {
    },
    visitTextEvent$1($event) {
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = A.DelegatingList.prototype;
    _.super$DelegatingList$$indexSet = _.$indexSet;
    _.super$DelegatingList$add = _.add$1;
    _.super$DelegatingList$addAll = _.addAll$1;
    _.super$DelegatingList$replaceRange = _.replaceRange$3;
    _ = A.Parser0.prototype;
    _.super$Parser$replace = _.replace$2;
    _.super$Parser$toString = _.toString$0;
    _ = A.DelegateParser.prototype;
    _.super$DelegateParser$replace = _.replace$2;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_1_u = hunkHelpers._instance_1u,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_0_i = hunkHelpers._instance_0i;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 101);
    _instance_1_i(J.JSArray.prototype, "get$addAll", "addAll$1", 11);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 14);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 14);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 14);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 15);
    _instance_1_i(A.StringBuffer.prototype, "get$write", "write$1", 11);
    _static_2(A, "equatable_utils___combine$closure", "_combine", 103);
    _static_1(A, "excel___letterOnly$closure", "_letterOnly", 19);
    _static_1(A, "excel_service__$ExcelFileRepositoryInitializer$closure", "$ExcelFileRepositoryInitializer", 104);
    _static_1(A, "optimize__optimizedRanges$closure", "optimizedRanges", 105);
    var _;
    _instance_1_i(_ = A._WebWorkerChannel.prototype, "get$reply", "reply$1", 4);
    _instance_1_u(_, "get$inspectAndReply", "inspectAndReply$1", 4);
    _instance_1_u(_, "get$log", "log$1", 53);
    _static(A, "converter_Converter_identity$closure", 1, null, ["call$1$1", "call$1"], ["Converter_identity", function(x) {
      return A.Converter_identity(x, type$.dynamic);
    }], 106, 1);
    _static_1(A, "squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure", "SquadronCanceledExceptionExt_deserialize", 107);
    _static_1(A, "default_mapping___textReplace$closure", "_textReplace", 8);
    _static_1(A, "default_mapping___singeQuoteAttributeReplace$closure", "_singeQuoteAttributeReplace", 8);
    _static_1(A, "default_mapping___doubleQuoteAttributeReplace$closure", "_doubleQuoteAttributeReplace", 8);
    _instance_0_u(_ = A.XmlEventParser.prototype, "get$event", "event$0", 68);
    _instance_0_u(_, "get$characterData", "characterData$0", 69);
    _instance_0_u(_, "get$startElement", "startElement$0", 70);
    _instance_0_i(_, "get$attributes", "attributes$0", 71);
    _instance_0_u(_, "get$attribute", "attribute$0", 109);
    _instance_0_u(_, "get$attributeAssignment", "attributeAssignment$0", 5);
    _instance_0_u(_, "get$attributeValue", "attributeValue$0", 5);
    _instance_0_u(_, "get$attributeValueDoubleQuote", "attributeValueDoubleQuote$0", 5);
    _instance_0_u(_, "get$attributeValueSingleQuote", "attributeValueSingleQuote$0", 5);
    _instance_0_u(_, "get$attributeValueNoQuote", "attributeValueNoQuote$0", 5);
    _instance_0_i(_, "get$endElement", "endElement$0", 74);
    _instance_0_u(_, "get$comment", "comment$0", 75);
    _instance_0_u(_, "get$cdata", "cdata$0", 76);
    _instance_0_u(_, "get$declaration", "declaration$0", 77);
    _instance_0_u(_, "get$processing", "processing$0", 78);
    _instance_0_u(_, "get$doctype", "doctype$0", 79);
    _instance_0_u(_, "get$doctypeExternalId", "doctypeExternalId$0", 13);
    _instance_0_u(_, "get$doctypeExternalIdSystem", "doctypeExternalIdSystem$0", 13);
    _instance_0_u(_, "get$doctypeExternalIdPublic", "doctypeExternalIdPublic$0", 13);
    _instance_0_u(_, "get$doctypeIntSubset", "doctypeIntSubset$0", 2);
    _instance_0_u(_, "get$doctypeElementDecl", "doctypeElementDecl$0", 6);
    _instance_0_u(_, "get$doctypeAttlistDecl", "doctypeAttlistDecl$0", 6);
    _instance_0_u(_, "get$doctypeEntityDecl", "doctypeEntityDecl$0", 6);
    _instance_0_u(_, "get$doctypeNotationDecl", "doctypeNotationDecl$0", 6);
    _instance_0_u(_, "get$doctypeReference", "doctypeReference$0", 6);
    _instance_0_u(_, "get$space", "space$0", 2);
    _instance_0_u(_, "get$spaceOptional", "spaceOptional$0", 2);
    _instance_0_u(_, "get$nameToken", "nameToken$0", 2);
    _instance_0_u(_, "get$nameStartChar", "nameStartChar$0", 2);
    _instance_0_u(_, "get$nameChar", "nameChar$0", 2);
    _instance_1_u(A.XmlEventVisitor.prototype, "get$visit", "visit$1", 100);
    _static_1(A, "code___toFormattedChar$closure", "_toFormattedChar", 23);
    _static_2(A, "failure_joiner__selectFirst$closure", "selectFirst", 12);
    _static_2(A, "failure_joiner__selectLast$closure", "selectLast", 12);
    _static_2(A, "failure_joiner__selectFarthest$closure", "selectFarthest", 12);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Iterable, A.CastIterator, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.SkipIterator, A.EmptyIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.MapBase, A.Symbol, A._Record, A.MapView, A.ConstantMap, A.Closure, A._KeysOrValuesOrElementsIterator, A.SetBase, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._UnmodifiableNativeByteBufferView, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A._StreamIterator, A._Zone, A._HashMapKeyIterator, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._UnmodifiableMapMixin, A.Codec, A.Converter, A._JsonStringifier, A._JsonPrettyPrintMixin, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.RuneIterator, A.StringBuffer, A.CssStyleDeclarationBase, A.ImmutableListMixin, A.FixedSizeListIterator, A.NullRejectionException, A.Endian, A.ArchiveFile, A.Bz2BitReader, A.BZip2Decoder, A.FileContent, A.Aes, A.CipherParameters, A.BaseKeyDerivator, A.BaseMac, A.BaseDigest, A.Register64, A.BaseBlockCipher, A.InputStreamBase, A.OutputStreamBase, A.ZipDirectory, A.AesHeader, A.ZipFileHeader, A.ZipDecoder, A.HuffmanTable, A.Inflate, A.CancelationToken, A.DefaultEquality, A.ListEquality, A._DelegatingIterableBase, A.Equatable, A.Excel, A.NumFormatMaintainer, A.NumFormat, A.Parser, A._SharedStringsMaintainer, A._IndexingHolder, A.SharedString, A.TextSpan, A.CellValue, A.Sheet, A.FastList, A.ExcelFileRepository, A._$X, A.LogEvent, A.LogFilter, A.LogOutput, A.LogPrinter, A.Logger, A.OutputEvent, A.Context, A.ParserException, A.Parser0, A.Token, A.MatchesIterator, A.CharacterPredicate, A.LookupCharPredicate, A.RangeCharPredicate, A.WhitespaceCharPredicate, A._WebWorkerChannel, A.WorkerRunner, A.Converter0, A.SquadronException, A.CancelationTokenReference, A.DtdExternalId, A.XmlEntityMapping, A.XmlException, A.XmlFormatException, A.XmlDescendantsIterator, A.XmlAttributesBase, A.XmlHasAttributes, A.XmlChildrenBase, A.XmlHasChildren, A.XmlHasName, A.XmlParentBase, A.XmlHasParent, A.XmlValueBase, A.XmlHasVisitor, A.XmlHasWriter, A._XmlNode_Object_XmlAttributesBase, A.XmlCache, A._XmlName_Object_XmlHasVisitor, A.XmlVisitor, A._XmlWriter_Object_XmlVisitor, A.XmlAnnotator, A.XmlHasBuffer, A.XmlHasLocation, A.XmlHasParent0, A.__XmlEventEncoderSink_Object_XmlEventVisitor, A.__XmlNodeDecoderSink_Object_XmlEventVisitor, A._XmlEvent_Object_XmlHasParent, A.XmlEventIterator, A.XmlEventParser, A.ConversionSink, A._XmlEventAttribute_Object_XmlNamed, A.XmlNamed, A.XmlEventVisitor]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData, A.EventTarget, A.AccessibleNodeList, A.Blob, A.CssTransformComponent, A.CssRule, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.CssStyleValue, A.DataTransferItemList, A.DomException, A._DomRectList_JavaScriptObject_ListMixin, A.DomRectReadOnly, A._DomStringList_JavaScriptObject_ListMixin, A.DomTokenList, A._FileList_JavaScriptObject_ListMixin, A.Gamepad, A.History, A._HtmlCollection_JavaScriptObject_ListMixin, A.Location, A.MediaList, A._MidiInputMap_JavaScriptObject_MapMixin, A._MidiOutputMap_JavaScriptObject_MapMixin, A.MimeType, A._MimeTypeArray_JavaScriptObject_ListMixin, A._NodeList_JavaScriptObject_ListMixin, A.Plugin, A._PluginArray_JavaScriptObject_ListMixin, A._RtcStatsReport_JavaScriptObject_MapMixin, A.SpeechGrammar, A._SpeechGrammarList_JavaScriptObject_ListMixin, A.SpeechRecognitionResult, A._Storage_JavaScriptObject_MapMixin, A.StyleSheet, A._TextTrackCueList_JavaScriptObject_ListMixin, A.TimeRanges, A.Touch, A._TouchList_JavaScriptObject_ListMixin, A.TrackDefaultList, A.Url, A.__CssRuleList_JavaScriptObject_ListMixin, A.__GamepadList_JavaScriptObject_ListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin, A.__StyleSheetList_JavaScriptObject_ListMixin, A.Length, A._LengthList_JavaScriptObject_ListMixin, A.Number, A._NumberList_JavaScriptObject_ListMixin, A.PointList, A._StringList_JavaScriptObject_ListMixin, A.Transform, A._TransformList_JavaScriptObject_ListMixin, A.AudioBuffer, A._AudioParamMap_JavaScriptObject_MapMixin]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.SkipIterable, A.WhereTypeIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.Runes, A.Archive, A.MatchesIterable, A.XmlDescendantsIterable, A.XmlEventIterable]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.Error, [A.LateError, A.ReachabilityError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A.AssertionError, A._Error, A.JsonUnsupportedObjectError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A._ListIndicesIterable, A.ReversedListIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inheritMany(A.MapBase, [A.UnmodifiableMapBase, A.JsLinkedHashMap, A._HashMap]);
    _inherit(A.ListMapView, A.UnmodifiableMapBase);
    _inheritMany(A._Record, [A._Record2, A._Record3, A._RecordN]);
    _inherit(A._Record_2, A._Record2);
    _inherit(A._Record_3, A._Record3);
    _inheritMany(A._RecordN, [A._Record_4, A._Record_5, A._Record_8]);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.Closure, [A.Closure2Args, A.Instantiation, A.Closure0Args, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A.Future_wait_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.MapBase_entries_closure, A._BigIntImpl_hashCode_finish, A.jsify__convert, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.dartify_convert, A.setEquals_closure, A._combine_closure0, A.mapPropsToString_closure, A.Parser__parseRelations_closure, A.Parser__parseSharedStrings_closure, A.Parser__parseSharedStrings_closure0, A.Parser__parseContent_closure, A.Parser__parseMergedCells__closure, A.Parser__parseStyles_closure, A.Parser__parseStyles__closure1, A.Parser__parseStyles_closure0, A.Parser__parseStyles_closure1, A.Parser__parseStyles__closure0, A.Parser__parseStyles_closure2, A.Parser__parseStyles__closure, A.Parser__parseStyles___closure, A.Parser__parseTable_closure, A.Parser__parseRow_closure, A.Parser__parseValue_closure, A.Parser__getAvailableRid_closure0, A.Parser__parseColWidthsRowHeights_closure, A.Parser__parseColWidthsRowHeights_closure0, A.Parser__parseColWidthsRowHeights_closure1, A.SharedString_textSpan_getBool, A.SharedString_textSpan_getDouble, A.SharedString_stringValue_closure, A.getBorderStyleByName_closure, A.Sheet_rows_closure, A.Sheet__countRowsAndColumns_closure, A._cellCoordsFromCellId_closure, A.ExcelFileRepository_getData_closure, A.ExcelFileRepository_getData__closure, A._$ExcelFileRepositoryWorkerService_operations_closure, A._$ExcelFileRepositoryWorkerService_operations_closure0, A._$ExcelFileRepositoryWorkerService_operations_closure1, A._$ExcelFileRepositoryWorkerService_operations_closure2, A._single_closure, A._range_closure, A.RecordParserExtension2_map2_closure, A.RecordParserExtension3_map3_closure, A.RecordParserExtension4_map4_closure, A.RecordParserExtension5_map5_closure, A.RecordParserExtension8_map8_closure, A.string_closure, A.bootstrap_closure0, A.bootstrap_closure, A.$jsify_squadronJsify, A.$dartify_squadronDartify, A.JsWorkerRunnerExt_get_handle_closure, A.WorkerRunner_connect_closure, A.WorkerRunner_connect_closure0, A.Converter_nullable_closure, A.Converter_list_closure, A.Converter_list_closure0, A.SquadronCanceledException_SquadronCanceledException$from_closure, A.SquadronCanceledExceptions_message_closure, A.SquadronCanceledExceptions_serialize_closure, A._asNumericCharacterReferences_closure, A.XmlStringExtension_get_innerText_closure, A.XmlStringExtension_get_innerText_closure0, A.XmlDeclaration_copy_closure, A.XmlDocument_copy_closure, A.XmlElement_copy_closure, A.XmlElement_copy_closure0, A.createNameMatcher_closure, A.createNameMatcher_closure0, A.XmlNodeList__expandFragment_closure, A._XmlNodeDecoderSink_convertAttributes_closure, A.XmlEventParser_characterData_closure, A.XmlEventParser_startElement_closure, A.XmlEventParser_attribute_closure, A.XmlEventParser_attributeAssignment_closure, A.XmlEventParser_attributeValueDoubleQuote_closure, A.XmlEventParser_attributeValueSingleQuote_closure, A.XmlEventParser_attributeValueNoQuote_closure, A.XmlEventParser_endElement_closure, A.XmlEventParser_comment_closure, A.XmlEventParser_cdata_closure, A.XmlEventParser_declaration_closure, A.XmlEventParser_processing_closure0, A.XmlEventParser_doctype_closure, A.XmlEventParser_doctypeExternalIdSystem_closure, A.XmlEventParser_doctypeExternalIdPublic_closure, A.XmlEventParser_doctypeIntSubset_closure, A.eventParserCache_closure]);
    _inheritMany(A.Closure2Args, [A.ConstantMap_map_closure, A.Primitives_functionNoSuchMethod_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A._Future__chainForeignFuture_closure0, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A._JsonPrettyPrintMixin_writeMap_closure, A._BigIntImpl_hashCode_combine, A.NoSuchMethodError_toString_closure, A.MidiInputMap_keys_closure, A.MidiOutputMap_keys_closure, A.RtcStatsReport_keys_closure, A.Storage_keys_closure, A.AudioParamMap_keys_closure, A._combine_closure, A._combine_closure1, A.Parser__parseMergedCells_closure, A.Parser__getAvailableRid_closure, A._hexTableReverse_closure, A.ExcelColor_valuesAsMap_closure, A.optimizedRanges_closure, A.optimizedRanges_closure0, A._pattern_closure, A.XmlEventParser_processing_closure]);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inheritMany(A.SetBase, [A.ConstantSet, A._SetBase]);
    _inherit(A.GeneralConstantSet, A.ConstantSet);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.JsConstantLinkedHashMap, A.JsLinkedHashMap);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__chainCoreFutureAsync_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A._SharedStringsMaintainer_add_closure, A._$X_$impl_closure, A._WebWorkerChannel__postResponse_closure, A._WebWorkerChannel__inspectAndPostResponse_closure, A.WorkerRunner_connect_closure1, A.WorkerRunner__getTokenRef_closure]);
    _inherit(A._AsyncCompleter, A._Completer);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._IdentityHashMap, A._HashMap);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.Codec, [A.Encoding, A.JsonCodec]);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inheritMany(A.Converter, [A.JsonEncoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inherit(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonStringStringifier);
    _inherit(A._JsonStringStringifierPretty, A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inherit(A.Utf8Codec, A.Encoding);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inheritMany(A.EventTarget, [A.Node, A.FileWriter, A.SourceBuffer, A._SourceBufferList_EventTarget_ListMixin, A.TextTrack, A.TextTrackCue, A._TextTrackList_EventTarget_ListMixin, A.VideoTrackList, A.AudioTrackList, A.BaseAudioContext]);
    _inheritMany(A.Node, [A.Element, A.CharacterData]);
    _inherit(A.HtmlElement, A.Element);
    _inheritMany(A.HtmlElement, [A.AnchorElement, A.AreaElement, A.FormElement, A.SelectElement]);
    _inherit(A.CssPerspective, A.CssTransformComponent);
    _inherit(A.CssStyleDeclaration, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase);
    _inheritMany(A.CssStyleValue, [A.CssTransformValue, A.CssUnparsedValue]);
    _inherit(A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin, A._DomRectList_JavaScriptObject_ListMixin);
    _inherit(A.DomRectList, A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin, A._DomStringList_JavaScriptObject_ListMixin);
    _inherit(A.DomStringList, A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.File, A.Blob);
    _inherit(A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin, A._FileList_JavaScriptObject_ListMixin);
    _inherit(A.FileList, A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A._HtmlCollection_JavaScriptObject_ListMixin);
    _inherit(A.HtmlCollection, A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.MidiInputMap, A._MidiInputMap_JavaScriptObject_MapMixin);
    _inherit(A.MidiOutputMap, A._MidiOutputMap_JavaScriptObject_MapMixin);
    _inherit(A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin, A._MimeTypeArray_JavaScriptObject_ListMixin);
    _inherit(A.MimeTypeArray, A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A._NodeList_JavaScriptObject_ListMixin);
    _inherit(A.NodeList, A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin, A._PluginArray_JavaScriptObject_ListMixin);
    _inherit(A.PluginArray, A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.RtcStatsReport, A._RtcStatsReport_JavaScriptObject_MapMixin);
    _inherit(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A._SourceBufferList_EventTarget_ListMixin);
    _inherit(A.SourceBufferList, A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin, A._SpeechGrammarList_JavaScriptObject_ListMixin);
    _inherit(A.SpeechGrammarList, A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.Storage, A._Storage_JavaScriptObject_MapMixin);
    _inherit(A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TextTrackCueList_JavaScriptObject_ListMixin);
    _inherit(A.TextTrackCueList, A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A._TextTrackList_EventTarget_ListMixin);
    _inherit(A.TextTrackList, A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TouchList_JavaScriptObject_ListMixin);
    _inherit(A.TouchList, A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__CssRuleList_JavaScriptObject_ListMixin);
    _inherit(A._CssRuleList, A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._DomRect, A.DomRectReadOnly);
    _inherit(A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__GamepadList_JavaScriptObject_ListMixin);
    _inherit(A._GamepadList, A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin);
    _inherit(A._NamedNodeMap, A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin);
    _inherit(A._SpeechRecognitionResultList, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__StyleSheetList_JavaScriptObject_ListMixin);
    _inherit(A._StyleSheetList, A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin, A._LengthList_JavaScriptObject_ListMixin);
    _inherit(A.LengthList, A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin, A._NumberList_JavaScriptObject_ListMixin);
    _inherit(A.NumberList, A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin, A._StringList_JavaScriptObject_ListMixin);
    _inherit(A.StringList, A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TransformList_JavaScriptObject_ListMixin);
    _inherit(A.TransformList, A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.AudioParamMap, A._AudioParamMap_JavaScriptObject_MapMixin);
    _inherit(A.OfflineAudioContext, A.BaseAudioContext);
    _inherit(A.ArchiveException, A.FormatException);
    _inheritMany(A.CipherParameters, [A.Pbkdf2Parameters, A.KeyParameter]);
    _inherit(A.PBKDF2KeyDerivator, A.BaseKeyDerivator);
    _inherit(A.MD4FamilyDigest, A.BaseDigest);
    _inherit(A.SHA1Digest, A.MD4FamilyDigest);
    _inherit(A.HMac, A.BaseMac);
    _inherit(A.AESEngine, A.BaseBlockCipher);
    _inherit(A.InputStream, A.InputStreamBase);
    _inherit(A.OutputStream, A.OutputStreamBase);
    _inherit(A.ZipFile, A.FileContent);
    _inherit(A.DelegatingList, A._DelegatingIterableBase);
    _inheritMany(A.NumFormat, [A.NumericNumFormat, A.DateTimeNumFormat, A.TimeNumFormat]);
    _inheritMany(A.NumericNumFormat, [A.StandardNumericNumFormat, A.CustomNumericNumFormat]);
    _inheritMany(A.DateTimeNumFormat, [A.StandardDateTimeNumFormat, A.CustomDateTimeNumFormat]);
    _inherit(A.StandardTimeNumFormat, A.TimeNumFormat);
    _inheritMany(A.Equatable, [A.Border, A._BorderSet, A.CellIndex, A.CellStyle, A.Data, A._FontStyle, A.ExcelColor, A._Span]);
    _inheritMany(A._Enum, [A.BorderStyle, A.ColorType, A.TextWrapping, A.VerticalAlign, A.HorizontalAlign, A.Underline, A.FontScheme, A.Level, A.XmlAttributeType, A.XmlNodeType]);
    _inheritMany(A.CellValue, [A.FormulaCellValue, A.IntCellValue, A.DoubleCellValue, A.DateCellValue, A.TextCellValue, A.BoolCellValue, A.TimeCellValue, A.DateTimeCellValue]);
    _inherit(A._$ExcelFileRepositoryWorkerService, A.ExcelFileRepository);
    _inherit(A.Result, A.Context);
    _inheritMany(A.Result, [A.Success, A.Failure]);
    _inheritMany(A.Parser0, [A.ReferenceParser, A.DelegateParser, A.ListParser, A.SequenceParser2, A.SequenceParser3, A.SequenceParser4, A.SequenceParser5, A.SequenceParser8, A.EpsilonParser, A.NewlineParser, A.AnyCharacterParser, A.SingleCharacterParser, A.PredicateParser, A.RepeatingCharacterParser, A.XmlCharacterDataParser]);
    _inheritMany(A.DelegateParser, [A.FlattenParser, A.MapParser, A.TokenParser, A.OptionalParser, A.SkipParser, A.RepeatingParser]);
    _inheritMany(A.CharacterPredicate, [A.SingleCharPredicate, A.ConstantCharPredicate, A.NotCharacterPredicate]);
    _inherit(A.ChoiceParser, A.ListParser);
    _inheritMany(A.RepeatingParser, [A.LimitedRepeatingParser, A.PossessiveRepeatingParser]);
    _inherit(A.LazyRepeatingParser, A.LimitedRepeatingParser);
    _inherit(A.InternalLogger, A.Logger);
    _inherit(A._NoLogOutput, A.LogOutput);
    _inherit(A._DummyPrinter, A.LogPrinter);
    _inherit(A._LogAllFilter, A.LogFilter);
    _inherit(A.CastConverter, A.Converter0);
    _inheritMany(A.SquadronException, [A.SquadronCanceledException, A.SquadronError, A.WorkerException]);
    _inheritMany(A.SquadronCanceledException, [A.SquadronCanceledExceptions, A.SquadronTimeoutException]);
    _inherit(A.SquadronCancelationToken, A.CancelationToken);
    _inherit(A.XmlDefaultEntityMapping, A.XmlEntityMapping);
    _inheritMany(A.XmlException, [A.XmlParentException, A._XmlParserException_XmlException_XmlFormatException, A._XmlTagException_XmlException_XmlFormatException, A.XmlNodeTypeException]);
    _inherit(A.XmlParserException, A._XmlParserException_XmlException_XmlFormatException);
    _inherit(A.XmlTagException, A._XmlTagException_XmlException_XmlFormatException);
    _inherit(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase, A._XmlNode_Object_XmlAttributesBase);
    _inherit(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor, A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase);
    _inherit(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter, A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor);
    _inherit(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase, A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter);
    _inherit(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase_XmlValueBase, A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase);
    _inherit(A.XmlNode, A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase_XmlValueBase);
    _inheritMany(A.XmlNode, [A._XmlAttribute_XmlNode_XmlHasName, A._XmlData_XmlNode_XmlHasParent, A._XmlDeclaration_XmlNode_XmlHasParent, A._XmlDoctype_XmlNode_XmlHasParent, A._XmlDocument_XmlNode_XmlHasChildren, A._XmlElement_XmlNode_XmlHasName]);
    _inherit(A._XmlAttribute_XmlNode_XmlHasName_XmlHasParent, A._XmlAttribute_XmlNode_XmlHasName);
    _inherit(A.XmlAttribute, A._XmlAttribute_XmlNode_XmlHasName_XmlHasParent);
    _inherit(A.XmlData, A._XmlData_XmlNode_XmlHasParent);
    _inheritMany(A.XmlData, [A.XmlCDATA, A.XmlComment, A.XmlProcessing, A.XmlText]);
    _inherit(A._XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes, A._XmlDeclaration_XmlNode_XmlHasParent);
    _inherit(A.XmlDeclaration, A._XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes);
    _inherit(A.XmlDoctype, A._XmlDoctype_XmlNode_XmlHasParent);
    _inherit(A.XmlDocument, A._XmlDocument_XmlNode_XmlHasChildren);
    _inherit(A._XmlElement_XmlNode_XmlHasName_XmlHasParent, A._XmlElement_XmlNode_XmlHasName);
    _inherit(A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes, A._XmlElement_XmlNode_XmlHasName_XmlHasParent);
    _inherit(A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes_XmlHasChildren, A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes);
    _inherit(A.XmlElement, A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes_XmlHasChildren);
    _inherit(A._XmlName_Object_XmlHasVisitor_XmlHasWriter, A._XmlName_Object_XmlHasVisitor);
    _inherit(A._XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent, A._XmlName_Object_XmlHasVisitor_XmlHasWriter);
    _inherit(A.XmlName, A._XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent);
    _inherit(A.XmlNodeList, A.DelegatingList);
    _inheritMany(A.XmlName, [A.XmlPrefixName, A.XmlSimpleName]);
    _inherit(A.XmlWriter, A._XmlWriter_Object_XmlVisitor);
    _inherit(A._XmlEventEncoderSink, A.__XmlEventEncoderSink_Object_XmlEventVisitor);
    _inherit(A._XmlNodeDecoderSink, A.__XmlNodeDecoderSink_Object_XmlEventVisitor);
    _inherit(A._XmlEvent_Object_XmlHasParent_XmlHasLocation, A._XmlEvent_Object_XmlHasParent);
    _inherit(A._XmlEvent_Object_XmlHasParent_XmlHasLocation_XmlHasBuffer, A._XmlEvent_Object_XmlHasParent_XmlHasLocation);
    _inherit(A.XmlEvent, A._XmlEvent_Object_XmlHasParent_XmlHasLocation_XmlHasBuffer);
    _inheritMany(A.XmlEvent, [A.XmlCDATAEvent, A.XmlCommentEvent, A.XmlDeclarationEvent, A.XmlDoctypeEvent, A._XmlEndElementEvent_XmlEvent_XmlNamed, A.XmlProcessingEvent, A._XmlStartElementEvent_XmlEvent_XmlNamed, A.XmlRawTextEvent]);
    _inherit(A.XmlEndElementEvent, A._XmlEndElementEvent_XmlEvent_XmlNamed);
    _inherit(A.XmlStartElementEvent, A._XmlStartElementEvent_XmlEvent_XmlNamed);
    _inherit(A._XmlEventAttribute_Object_XmlNamed_XmlHasParent, A._XmlEventAttribute_Object_XmlNamed);
    _inherit(A.XmlEventAttribute, A._XmlEventAttribute_Object_XmlNamed_XmlHasParent);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A.UnmodifiableMapBase, A._UnmodifiableMapMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonPrettyPrintMixin);
    _mixin(A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.CssStyleDeclarationBase);
    _mixin(A._DomRectList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._DomStringList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._FileList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._MidiInputMap_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._MidiOutputMap_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._MimeTypeArray_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NodeList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._PluginArray_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._RtcStatsReport_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._SourceBufferList_EventTarget_ListMixin, A.ListBase);
    _mixin(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._SpeechGrammarList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._Storage_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._TextTrackCueList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TextTrackList_EventTarget_ListMixin, A.ListBase);
    _mixin(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TouchList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__CssRuleList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__GamepadList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__StyleSheetList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._LengthList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NumberList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._StringList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TransformList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._AudioParamMap_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._XmlParserException_XmlException_XmlFormatException, A.XmlFormatException);
    _mixin(A._XmlTagException_XmlException_XmlFormatException, A.XmlFormatException);
    _mixin(A._XmlAttribute_XmlNode_XmlHasName, A.XmlHasName);
    _mixin(A._XmlAttribute_XmlNode_XmlHasName_XmlHasParent, A.XmlHasParent);
    _mixin(A._XmlData_XmlNode_XmlHasParent, A.XmlHasParent);
    _mixin(A._XmlDeclaration_XmlNode_XmlHasParent, A.XmlHasParent);
    _mixin(A._XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes, A.XmlHasAttributes);
    _mixin(A._XmlDoctype_XmlNode_XmlHasParent, A.XmlHasParent);
    _mixin(A._XmlDocument_XmlNode_XmlHasChildren, A.XmlHasChildren);
    _mixin(A._XmlElement_XmlNode_XmlHasName, A.XmlHasName);
    _mixin(A._XmlElement_XmlNode_XmlHasName_XmlHasParent, A.XmlHasParent);
    _mixin(A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes, A.XmlHasAttributes);
    _mixin(A._XmlElement_XmlNode_XmlHasName_XmlHasParent_XmlHasAttributes_XmlHasChildren, A.XmlHasChildren);
    _mixin(A._XmlNode_Object_XmlAttributesBase, A.XmlAttributesBase);
    _mixin(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase, A.XmlChildrenBase);
    _mixin(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor, A.XmlHasVisitor);
    _mixin(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter, A.XmlHasWriter);
    _mixin(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase, A.XmlParentBase);
    _mixin(A._XmlNode_Object_XmlAttributesBase_XmlChildrenBase_XmlHasVisitor_XmlHasWriter_XmlParentBase_XmlValueBase, A.XmlValueBase);
    _mixin(A._XmlName_Object_XmlHasVisitor, A.XmlHasVisitor);
    _mixin(A._XmlName_Object_XmlHasVisitor_XmlHasWriter, A.XmlHasWriter);
    _mixin(A._XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent, A.XmlHasParent);
    _mixin(A._XmlWriter_Object_XmlVisitor, A.XmlVisitor);
    _mixin(A.__XmlEventEncoderSink_Object_XmlEventVisitor, A.XmlEventVisitor);
    _mixin(A.__XmlNodeDecoderSink_Object_XmlEventVisitor, A.XmlEventVisitor);
    _mixin(A._XmlEvent_Object_XmlHasParent, A.XmlHasParent0);
    _mixin(A._XmlEvent_Object_XmlHasParent_XmlHasLocation, A.XmlHasLocation);
    _mixin(A._XmlEvent_Object_XmlHasParent_XmlHasLocation_XmlHasBuffer, A.XmlHasBuffer);
    _mixin(A._XmlEndElementEvent_XmlEvent_XmlNamed, A.XmlNamed);
    _mixin(A._XmlStartElementEvent_XmlEvent_XmlNamed, A.XmlNamed);
    _mixin(A._XmlEventAttribute_Object_XmlNamed, A.XmlNamed);
    _mixin(A._XmlEventAttribute_Object_XmlNamed_XmlHasParent, A.XmlHasParent0);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["~(XmlElement)", "~()", "Parser0<String>()", "~(String,@)", "~(@)", "Parser0<+(String,XmlAttributeType)>()", "Parser0<@>()", "Object?(Object?)", "String(Match)", "~(Object?,Object?)", "String()", "~(Object?)", "Failure(Failure,Failure)", "Parser0<DtdExternalId>()", "~(~())", "@(@)", "Null(@)", "Null()", "@()", "int(int)", "int(Object?,Object?)", "bool(String)", "bool(int)", "String(int)", "XmlAttribute(XmlAttribute)", "XmlNode(XmlNode)", "bool(XmlHasName)", "+(String,XmlAttributeType)(String,String,String)", "~(int)", "int(String,String)", "_Future<@>(@)", "_IndexingHolder()", "bool(XmlElement)", "int(XmlElement)", "bool(BorderStyle)", "Data?(int)", "~(@,@)", "MapEntry<String,int>(int,String)", "MapEntry<String,ExcelColor>(int,ExcelColor)", "@(String)", "List<CellValue?>(List<Data?>)", "CellValue?(Data?)", "int/(List<@>)", "Future<List<List<@>>>(List<@>)", "String/(List<@>)", "Future<~>(List<@>)", "int(RangeCharPredicate,RangeCharPredicate)", "int(int,RangeCharPredicate)", "RangeCharPredicate(String)", "RangeCharPredicate(String,String,String)", "CharacterPredicate(String?,CharacterPredicate)", "~(WorkerRunner)", "Null(JSObject)", "~(LogEvent)", "int(int,int)", "~(JSObject)", "~(OutputEvent)", "CancelationTokenReference()", "SquadronCanceledException(CanceledException)", "String(SquadronCanceledException)", "List<@>(SquadronCanceledException)", "@(@,String)", "bool(XmlNode)", "String?(XmlNode)", "Null(~())", "Null(@,StackTrace)", "~(Symbol0,@)", "XmlAttribute(XmlEventAttribute)", "Parser0<XmlEvent>()", "Parser0<XmlTextEvent>()", "Parser0<XmlStartElementEvent>()", "Parser0<List<XmlEventAttribute>>()", "~(String,String)", "~(int,@)", "Parser0<XmlEndElementEvent>()", "Parser0<XmlCommentEvent>()", "Parser0<XmlCDATAEvent>()", "Parser0<XmlDeclarationEvent>()", "Parser0<XmlProcessingEvent>()", "Parser0<XmlDoctypeEvent>()", "bool(Object?)", "~(Object,StackTrace)", "String(Object?)", "XmlRawTextEvent(String)", "XmlStartElementEvent(String,String,List<XmlEventAttribute>,String,String)", "XmlEventAttribute(String,String,+(String,XmlAttributeType))", "+(String,XmlAttributeType)(String,String,String,+(String,XmlAttributeType))", "Null(Object,StackTrace)", "+(String,XmlAttributeType)(String)", "XmlEndElementEvent(String,String,String,String)", "XmlCommentEvent(String,String,String)", "XmlCDATAEvent(String,String,String)", "XmlDeclarationEvent(String,List<XmlEventAttribute>,String,String)", "String(String,String)", "XmlProcessingEvent(String,String,String,String)", "XmlDoctypeEvent(String,String,String,DtdExternalId?,String,String?,String,String)", "DtdExternalId(String,String,+(String,XmlAttributeType))", "DtdExternalId(String,String,+(String,XmlAttributeType),String,+(String,XmlAttributeType))", "String(String,String,String)", "Parser0<XmlEvent>(XmlEntityMapping)", "~(XmlEvent)", "int(@,@)", "~(String,XmlNode)", "int(int,Object?)", "WorkerService(List<@>)", "CharacterPredicate(Iterable<RangeCharPredicate>)", "0^(@)<Object?>", "SquadronCanceledException?(List<@>?)", "~(XmlNode)", "Parser0<XmlEventAttribute>()"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1),
      "3;": (t1, t2, t3) => o => o instanceof A._Record_3 && t1._is(o._0) && t2._is(o._1) && t3._is(o._2),
      "4;": types => o => o instanceof A._Record_4 && A.pairwiseIsTest(types, o._values),
      "5;": types => o => o instanceof A._Record_5 && A.pairwiseIsTest(types, o._values),
      "8;": types => o => o instanceof A._Record_8 && A.pairwiseIsTest(types, o._values)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","AbortPaymentEvent":"JavaScriptObject","ExtendableEvent":"JavaScriptObject","Event":"JavaScriptObject","AudioContext":"BaseAudioContext","AbsoluteOrientationSensor":"EventTarget","OrientationSensor":"EventTarget","Sensor":"EventTarget","MathMLElement":"Element","AudioElement":"HtmlElement","MediaElement":"HtmlElement","HtmlDocument":"Node","Document":"Node","VttCue":"TextTrackCue","CDataSection":"CharacterData","Text":"CharacterData","HtmlFormControlsCollection":"HtmlCollection","CssCharsetRule":"CssRule","CssMatrixComponent":"CssTransformComponent","CssStyleSheet":"StyleSheet","CssurlImageValue":"CssStyleValue","CssImageValue":"CssStyleValue","CssResourceValue":"CssStyleValue","JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"TrustedGetRuntimeType":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"LateError":{"Error":[]},"ReachabilityError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"Iterable.E":"int","ListIterable.E":"int"},"ListMapView":{"MapBase":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"],"MapBase.K":"int","MapBase.V":"1"},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"_Record_2":{"_Record2":[],"_Record":[]},"_Record_3":{"_Record3":[],"_Record":[]},"_Record_4":{"_RecordN":[],"_Record":[]},"_Record_5":{"_RecordN":[],"_Record":[]},"_Record_8":{"_RecordN":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"ConstantSet":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"GeneralConstantSet":{"ConstantSet":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_Record2":{"_Record":[]},"_Record3":{"_Record":[]},"_RecordN":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JSObject":[],"TypedData":[]},"_UnmodifiableNativeByteBufferView":{"ByteBuffer":[]},"NativeByteData":{"NativeTypedData":[],"ByteData":[],"JSObject":[],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"NativeTypedData":[],"JavaScriptIndexingBehavior":["1"],"JSObject":[],"TypedData":[]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"Float32List":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeFloat64List":{"Float64List":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"Int16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"Int32List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"Int8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"Uint16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"Uint32List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"Uint8ClampedList":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"Uint8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapBase":["1","2"],"Map":["1","2"]},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedHashSet":{"_SetBase":["1"],"SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"]},"JsonEncoder":{"Converter":["Object?","String"]},"Utf8Codec":{"Codec":["String","List<int>"]},"Utf8Encoder":{"Converter":["String","List<int>"]},"Utf8Decoder":{"Converter":["List<int>","String"]},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"IntegerDivisionByZeroException":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"CssRule":{"JSObject":[]},"File":{"JSObject":[]},"Gamepad":{"JSObject":[]},"MimeType":{"JSObject":[]},"Node":{"JSObject":[]},"Plugin":{"JSObject":[]},"SourceBuffer":{"JSObject":[]},"SpeechGrammar":{"JSObject":[]},"SpeechRecognitionResult":{"JSObject":[]},"StyleSheet":{"JSObject":[]},"TextTrack":{"JSObject":[]},"TextTrackCue":{"JSObject":[]},"Touch":{"JSObject":[]},"HtmlElement":{"Node":[],"JSObject":[]},"AccessibleNodeList":{"JSObject":[]},"AnchorElement":{"Node":[],"JSObject":[]},"AreaElement":{"Node":[],"JSObject":[]},"Blob":{"JSObject":[]},"CharacterData":{"Node":[],"JSObject":[]},"CssPerspective":{"JSObject":[]},"CssStyleDeclaration":{"JSObject":[]},"CssStyleValue":{"JSObject":[]},"CssTransformComponent":{"JSObject":[]},"CssTransformValue":{"JSObject":[]},"CssUnparsedValue":{"JSObject":[]},"DataTransferItemList":{"JSObject":[]},"DomException":{"JSObject":[]},"DomRectList":{"ListBase":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"JSObject":[],"Iterable":["Rectangle<num>"],"ImmutableListMixin.E":"Rectangle<num>","ListBase.E":"Rectangle<num>"},"DomRectReadOnly":{"Rectangle":["num"],"JSObject":[]},"DomStringList":{"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"JavaScriptIndexingBehavior":["String"],"EfficientLengthIterable":["String"],"JSObject":[],"Iterable":["String"],"ImmutableListMixin.E":"String","ListBase.E":"String"},"DomTokenList":{"JSObject":[]},"Element":{"Node":[],"JSObject":[]},"EventTarget":{"JSObject":[]},"FileList":{"ListBase":["File"],"ImmutableListMixin":["File"],"List":["File"],"JavaScriptIndexingBehavior":["File"],"EfficientLengthIterable":["File"],"JSObject":[],"Iterable":["File"],"ImmutableListMixin.E":"File","ListBase.E":"File"},"FileWriter":{"JSObject":[]},"FormElement":{"Node":[],"JSObject":[]},"History":{"JSObject":[]},"HtmlCollection":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSObject":[],"Iterable":["Node"],"ImmutableListMixin.E":"Node","ListBase.E":"Node"},"Location":{"JSObject":[]},"MediaList":{"JSObject":[]},"MidiInputMap":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"MidiOutputMap":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"MimeTypeArray":{"ListBase":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"EfficientLengthIterable":["MimeType"],"JSObject":[],"Iterable":["MimeType"],"ImmutableListMixin.E":"MimeType","ListBase.E":"MimeType"},"NodeList":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSObject":[],"Iterable":["Node"],"ImmutableListMixin.E":"Node","ListBase.E":"Node"},"PluginArray":{"ListBase":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"EfficientLengthIterable":["Plugin"],"JSObject":[],"Iterable":["Plugin"],"ImmutableListMixin.E":"Plugin","ListBase.E":"Plugin"},"RtcStatsReport":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"SelectElement":{"Node":[],"JSObject":[]},"SourceBufferList":{"ListBase":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"JavaScriptIndexingBehavior":["SourceBuffer"],"EfficientLengthIterable":["SourceBuffer"],"JSObject":[],"Iterable":["SourceBuffer"],"ImmutableListMixin.E":"SourceBuffer","ListBase.E":"SourceBuffer"},"SpeechGrammarList":{"ListBase":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"JSObject":[],"Iterable":["SpeechGrammar"],"ImmutableListMixin.E":"SpeechGrammar","ListBase.E":"SpeechGrammar"},"Storage":{"MapBase":["String","String"],"JSObject":[],"Map":["String","String"],"MapBase.K":"String","MapBase.V":"String"},"TextTrackCueList":{"ListBase":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"JSObject":[],"Iterable":["TextTrackCue"],"ImmutableListMixin.E":"TextTrackCue","ListBase.E":"TextTrackCue"},"TextTrackList":{"ListBase":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"JavaScriptIndexingBehavior":["TextTrack"],"EfficientLengthIterable":["TextTrack"],"JSObject":[],"Iterable":["TextTrack"],"ImmutableListMixin.E":"TextTrack","ListBase.E":"TextTrack"},"TimeRanges":{"JSObject":[]},"TouchList":{"ListBase":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"EfficientLengthIterable":["Touch"],"JSObject":[],"Iterable":["Touch"],"ImmutableListMixin.E":"Touch","ListBase.E":"Touch"},"TrackDefaultList":{"JSObject":[]},"Url":{"JSObject":[]},"VideoTrackList":{"JSObject":[]},"_CssRuleList":{"ListBase":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"EfficientLengthIterable":["CssRule"],"JSObject":[],"Iterable":["CssRule"],"ImmutableListMixin.E":"CssRule","ListBase.E":"CssRule"},"_DomRect":{"Rectangle":["num"],"JSObject":[]},"_GamepadList":{"ListBase":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"JavaScriptIndexingBehavior":["Gamepad?"],"EfficientLengthIterable":["Gamepad?"],"JSObject":[],"Iterable":["Gamepad?"],"ImmutableListMixin.E":"Gamepad?","ListBase.E":"Gamepad?"},"_NamedNodeMap":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSObject":[],"Iterable":["Node"],"ImmutableListMixin.E":"Node","ListBase.E":"Node"},"_SpeechRecognitionResultList":{"ListBase":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"JSObject":[],"Iterable":["SpeechRecognitionResult"],"ImmutableListMixin.E":"SpeechRecognitionResult","ListBase.E":"SpeechRecognitionResult"},"_StyleSheetList":{"ListBase":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"JSObject":[],"Iterable":["StyleSheet"],"ImmutableListMixin.E":"StyleSheet","ListBase.E":"StyleSheet"},"FixedSizeListIterator":{"Iterator":["1"]},"Length":{"JSObject":[]},"Number":{"JSObject":[]},"Transform":{"JSObject":[]},"LengthList":{"ListBase":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"JSObject":[],"Iterable":["Length"],"ImmutableListMixin.E":"Length","ListBase.E":"Length"},"NumberList":{"ListBase":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"JSObject":[],"Iterable":["Number"],"ImmutableListMixin.E":"Number","ListBase.E":"Number"},"PointList":{"JSObject":[]},"StringList":{"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"JSObject":[],"Iterable":["String"],"ImmutableListMixin.E":"String","ListBase.E":"String"},"TransformList":{"ListBase":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"EfficientLengthIterable":["Transform"],"JSObject":[],"Iterable":["Transform"],"ImmutableListMixin.E":"Transform","ListBase.E":"Transform"},"ByteData":{"TypedData":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"AudioBuffer":{"JSObject":[]},"AudioParamMap":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"AudioTrackList":{"JSObject":[]},"BaseAudioContext":{"JSObject":[]},"OfflineAudioContext":{"JSObject":[]},"Archive":{"Iterable":["ArchiveFile"],"Iterable.E":"ArchiveFile"},"BaseMac":{"Mac":[]},"BaseDigest":{"Digest":[]},"MD4FamilyDigest":{"Digest":[]},"SHA1Digest":{"Digest":[]},"HMac":{"Mac":[]},"InputStream":{"InputStreamBase":[]},"OutputStream":{"OutputStreamBase":[]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingList":{"List":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"NumericNumFormat":{"NumFormat":[]},"StandardNumericNumFormat":{"NumFormat":[]},"CustomNumericNumFormat":{"CustomNumFormat":[],"NumFormat":[]},"DateTimeNumFormat":{"NumFormat":[]},"StandardDateTimeNumFormat":{"NumFormat":[]},"CustomDateTimeNumFormat":{"CustomNumFormat":[],"NumFormat":[]},"TimeNumFormat":{"NumFormat":[]},"StandardTimeNumFormat":{"NumFormat":[]},"FormulaCellValue":{"CellValue":[]},"IntCellValue":{"CellValue":[]},"DoubleCellValue":{"CellValue":[]},"DateCellValue":{"CellValue":[]},"TextCellValue":{"CellValue":[]},"BoolCellValue":{"CellValue":[]},"TimeCellValue":{"CellValue":[]},"DateTimeCellValue":{"CellValue":[]},"_$ExcelFileRepositoryWorkerService":{"WorkerService":[]},"Failure":{"Result":["0&"],"Context":[]},"Result":{"Context":[]},"Success":{"Result":["1"],"Context":[]},"ReferenceParser":{"ResolvableParser":["1"],"Parser0":["1"]},"MatchesIterable":{"Iterable":["1"],"Iterable.E":"1"},"MatchesIterator":{"Iterator":["1"]},"FlattenParser":{"DelegateParser":["1","String"],"Parser0":["String"],"DelegateParser.T":"1"},"MapParser":{"DelegateParser":["1","2"],"Parser0":["2"],"DelegateParser.T":"1"},"TokenParser":{"DelegateParser":["1","Token<1>"],"Parser0":["Token<1>"],"DelegateParser.T":"1"},"SingleCharPredicate":{"CharacterPredicate":[]},"ConstantCharPredicate":{"CharacterPredicate":[]},"LookupCharPredicate":{"CharacterPredicate":[]},"NotCharacterPredicate":{"CharacterPredicate":[]},"RangeCharPredicate":{"CharacterPredicate":[]},"WhitespaceCharPredicate":{"CharacterPredicate":[]},"ChoiceParser":{"ListParser":["1","1"],"Parser0":["1"],"ListParser.R":"1"},"DelegateParser":{"Parser0":["2"]},"SequenceParser2":{"Parser0":["+(1,2)"]},"SequenceParser3":{"Parser0":["+(1,2,3)"]},"SequenceParser4":{"Parser0":["+(1,2,3,4)"]},"SequenceParser5":{"Parser0":["+(1,2,3,4,5)"]},"SequenceParser8":{"Parser0":["+(1,2,3,4,5,6,7,8)"]},"ListParser":{"Parser0":["2"]},"OptionalParser":{"DelegateParser":["1","1"],"Parser0":["1"],"DelegateParser.T":"1"},"SkipParser":{"DelegateParser":["1","1"],"Parser0":["1"],"DelegateParser.T":"1"},"EpsilonParser":{"Parser0":["1"]},"NewlineParser":{"Parser0":["String"]},"AnyCharacterParser":{"Parser0":["String"]},"SingleCharacterParser":{"Parser0":["String"]},"PredicateParser":{"Parser0":["String"]},"RepeatingCharacterParser":{"Parser0":["String"]},"LazyRepeatingParser":{"LimitedRepeatingParser":["1"],"RepeatingParser":["1","List<1>"],"DelegateParser":["1","List<1>"],"Parser0":["List<1>"],"DelegateParser.T":"1"},"LimitedRepeatingParser":{"RepeatingParser":["1","List<1>"],"DelegateParser":["1","List<1>"],"Parser0":["List<1>"]},"PossessiveRepeatingParser":{"RepeatingParser":["1","List<1>"],"DelegateParser":["1","List<1>"],"Parser0":["List<1>"],"DelegateParser.T":"1"},"RepeatingParser":{"DelegateParser":["1","2"],"Parser0":["2"]},"_WebWorkerChannel":{"WorkerChannel":[]},"InternalLogger":{"Logger":[]},"_NoLogOutput":{"LogOutput":[]},"_DummyPrinter":{"LogPrinter":[]},"_LogAllFilter":{"LogFilter":[]},"SquadronCanceledException":{"SquadronException":[],"CanceledException":[]},"SquadronCanceledExceptions":{"SquadronCanceledException":[],"SquadronException":[],"CanceledException":[]},"SquadronError":{"SquadronException":[]},"SquadronTimeoutException":{"SquadronCanceledException":[],"SquadronException":[],"CanceledException":[]},"WorkerException":{"SquadronException":[]},"CancelationTokenReference":{"SquadronCancelationToken":[],"CancelationToken":[]},"SquadronCancelationToken":{"CancelationToken":[]},"XmlDefaultEntityMapping":{"XmlEntityMapping":[]},"XmlDescendantsIterable":{"Iterable":["XmlNode"],"Iterable.E":"XmlNode"},"XmlDescendantsIterator":{"Iterator":["XmlNode"]},"XmlAttribute":{"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasName":[],"XmlHasParent.T":"XmlNode"},"XmlCDATA":{"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlComment":{"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlData":{"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[]},"XmlDeclaration":{"XmlHasAttributes":[],"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlDoctype":{"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlDocument":{"XmlNode":[],"XmlHasChildren":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasChildren.T":"XmlNode"},"XmlElement":{"XmlHasAttributes":[],"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasChildren":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasName":[],"XmlHasChildren.T":"XmlNode","XmlHasParent.T":"XmlNode"},"XmlNode":{"XmlHasVisitor":[],"XmlParentBase":[]},"XmlProcessing":{"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlText":{"XmlNode":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlCharacterDataParser":{"Parser0":["String"]},"XmlName":{"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[]},"XmlNodeList":{"DelegatingList":["1"],"List":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"XmlPrefixName":{"XmlName":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlSimpleName":{"XmlName":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[],"XmlHasParent.T":"XmlNode"},"XmlWriter":{"XmlVisitor":[]},"_XmlEventEncoderSink":{"XmlEventVisitor":[],"Sink":["List<XmlEvent>"]},"_XmlNodeDecoderSink":{"XmlEventVisitor":[],"Sink":["List<XmlEvent>"]},"XmlCDATAEvent":{"XmlEvent":[]},"XmlCommentEvent":{"XmlEvent":[]},"XmlDeclarationEvent":{"XmlEvent":[]},"XmlDoctypeEvent":{"XmlEvent":[]},"XmlEndElementEvent":{"XmlEvent":[]},"XmlProcessingEvent":{"XmlEvent":[]},"XmlStartElementEvent":{"XmlEvent":[]},"XmlTextEvent":{"XmlEvent":[]},"XmlRawTextEvent":{"XmlTextEvent":[],"XmlEvent":[]},"XmlEventIterable":{"Iterable":["XmlEvent"],"Iterable.E":"XmlEvent"},"XmlEventIterator":{"Iterator":["XmlEvent"]},"ConversionSink":{"Sink":["1"]},"ResolvableParser":{"Parser0":["1"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"UnmodifiableMapBase":2}'));
  var string$ = {
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Excel_: "Excel format unsupported. Only .xlsx files are supported",
    Node_a: "Node already has a parent, copy or remove it first",
    None_o: "None of the patterns in the switch expression the matched input value. See https://github.com/dart-lang/language/issues/3488 for details.",
    http__: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      AsyncError: findType("AsyncError"),
      Border: findType("Border"),
      BorderStyle: findType("BorderStyle"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      CancelationTokenReference: findType("CancelationTokenReference"),
      CanceledException: findType("CanceledException"),
      CharacterPredicate: findType("CharacterPredicate"),
      CodeUnits: findType("CodeUnits"),
      Comparable_dynamic: findType("Comparable<@>"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConversionSink_List_XmlNode: findType("ConversionSink<List<XmlNode>>"),
      ConversionSink_String: findType("ConversionSink<String>"),
      CssRule: findType("CssRule"),
      Data: findType("Data"),
      DateTime: findType("DateTime"),
      DtdExternalId: findType("DtdExternalId"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      EpsilonParser_String: findType("EpsilonParser<String>"),
      EpsilonParser_void: findType("EpsilonParser<~>"),
      Error: findType("Error"),
      Excel: findType("Excel"),
      ExcelColor: findType("ExcelColor"),
      Excel_Function_dynamic: findType("Excel(@)"),
      Failure: findType("Failure"),
      FastList_String: findType("FastList<String>"),
      File: findType("File"),
      FlattenParser_List_String: findType("FlattenParser<List<String>>"),
      FlattenParser_List_dynamic: findType("FlattenParser<List<@>>"),
      FlattenParser_Record_2_String_and_List_String: findType("FlattenParser<+(String,List<String>)>"),
      Float32List: findType("Float32List"),
      Float64List: findType("Float64List"),
      Function: findType("Function"),
      FutureOr_WorkerService_Function_List_dynamic: findType("WorkerService/(List<@>)"),
      Future_WorkerService: findType("Future<WorkerService>"),
      Future_dynamic: findType("Future<@>"),
      GeneralConstantSet_XmlNodeType: findType("GeneralConstantSet<XmlNodeType>"),
      Int16List: findType("Int16List"),
      Int32List: findType("Int32List"),
      Int8List: findType("Int8List"),
      Invocation: findType("Invocation"),
      Iterable_RangeCharPredicate: findType("Iterable<RangeCharPredicate>"),
      Iterable_SquadronCanceledException: findType("Iterable<SquadronCanceledException>"),
      Iterable_XmlEvent: findType("Iterable<XmlEvent>"),
      Iterable_XmlEventAttribute: findType("Iterable<XmlEventAttribute>"),
      Iterable_XmlHasVisitor: findType("Iterable<XmlHasVisitor>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      Iterable_nullable_Object: findType("Iterable<Object?>"),
      JSArray_ArchiveFile: findType("JSArray<ArchiveFile>"),
      JSArray_CellStyle: findType("JSArray<CellStyle>"),
      JSArray_ExcelColor: findType("JSArray<ExcelColor>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_List_nullable_CellValue: findType("JSArray<List<CellValue?>>"),
      JSArray_List_nullable_Data: findType("JSArray<List<Data?>>"),
      JSArray_Parser_DtdExternalId: findType("JSArray<Parser0<DtdExternalId>>"),
      JSArray_Parser_Object: findType("JSArray<Parser0<Object>>"),
      JSArray_Parser_Record_2_String_and_XmlAttributeType: findType("JSArray<Parser0<+(String,XmlAttributeType)>>"),
      JSArray_Parser_String: findType("JSArray<Parser0<String>>"),
      JSArray_Parser_XmlEvent: findType("JSArray<Parser0<XmlEvent>>"),
      JSArray_Parser_dynamic: findType("JSArray<Parser0<@>>"),
      JSArray_RangeCharPredicate: findType("JSArray<RangeCharPredicate>"),
      JSArray_SharedString: findType("JSArray<SharedString>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_TextSpan: findType("JSArray<TextSpan>"),
      JSArray_XmlAttribute: findType("JSArray<XmlAttribute>"),
      JSArray_XmlEvent: findType("JSArray<XmlEvent>"),
      JSArray_XmlNode: findType("JSArray<XmlNode>"),
      JSArray_XmlStartElementEvent: findType("JSArray<XmlStartElementEvent>"),
      JSArray_ZipFileHeader: findType("JSArray<ZipFileHeader>"),
      JSArray__BorderSet: findType("JSArray<_BorderSet>"),
      JSArray__FontStyle: findType("JSArray<_FontStyle>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable__Span: findType("JSArray<_Span?>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptBigInt: findType("JavaScriptBigInt"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      LazyRepeatingParser_Object: findType("LazyRepeatingParser<Object>"),
      LazyRepeatingParser_String: findType("LazyRepeatingParser<String>"),
      LazyRepeatingParser_dynamic: findType("LazyRepeatingParser<@>"),
      Length: findType("Length"),
      ListEquality_dynamic: findType("ListEquality<@>"),
      ListMapView_ExcelColor: findType("ListMapView<ExcelColor>"),
      List_CellStyle: findType("List<CellStyle>"),
      List_Int32List: findType("List<Int32List>"),
      List_List_dynamic: findType("List<List<@>>"),
      List_List_dynamic_Function_dynamic: findType("List<List<@>>(@)"),
      List_List_int: findType("List<List<int>>"),
      List_List_nullable_CellValue: findType("List<List<CellValue?>>"),
      List_Object: findType("List<Object>"),
      List_String: findType("List<String>"),
      List_Uint8List: findType("List<Uint8List>"),
      List_XmlEvent: findType("List<XmlEvent>"),
      List_XmlEventAttribute: findType("List<XmlEventAttribute>"),
      List__BorderSet: findType("List<_BorderSet>"),
      List__FontStyle: findType("List<_FontStyle>"),
      List_dynamic: findType("List<@>"),
      List_dynamic_Function_dynamic: findType("List<@>(@)"),
      List_int: findType("List<int>"),
      List_int_Function_dynamic: findType("List<int>(@)"),
      List_nullable_Data: findType("List<Data?>"),
      MapEntry_String_ExcelColor: findType("MapEntry<String,ExcelColor>"),
      MapEntry_String_int: findType("MapEntry<String,int>"),
      Map_String_int: findType("Map<String,int>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_int_Data: findType("Map<int,Data>"),
      Map_of_int_and_dynamic_Function_List_dynamic: findType("Map<int,@(List<@>)>"),
      Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>"),
      MatchesIterable_Token_String: findType("MatchesIterable<Token<String>>"),
      MimeType: findType("MimeType"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      Node: findType("Node"),
      Null: findType("Null"),
      NumFormat: findType("NumFormat"),
      Number: findType("Number"),
      Object: findType("Object"),
      OptionalParser_Record_2_String_and_XmlAttributeType: findType("OptionalParser<+(String,XmlAttributeType)>"),
      OptionalParser_String: findType("OptionalParser<String>"),
      OptionalParser_nullable_DtdExternalId: findType("OptionalParser<DtdExternalId?>"),
      OptionalParser_nullable_String: findType("OptionalParser<String?>"),
      OutputEvent: findType("OutputEvent"),
      Parser_dynamic: findType("Parser0<@>"),
      Plugin: findType("Plugin"),
      RangeCharPredicate: findType("RangeCharPredicate"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_String_and_XmlAttributeType: findType("+(String,XmlAttributeType)"),
      Rectangle_num: findType("Rectangle<num>"),
      ReferenceParser_DtdExternalId: findType("ReferenceParser<DtdExternalId>"),
      ReferenceParser_List_XmlEventAttribute: findType("ReferenceParser<List<XmlEventAttribute>>"),
      ReferenceParser_Record_2_String_and_XmlAttributeType: findType("ReferenceParser<+(String,XmlAttributeType)>"),
      ReferenceParser_String: findType("ReferenceParser<String>"),
      ReferenceParser_XmlCDATAEvent: findType("ReferenceParser<XmlCDATAEvent>"),
      ReferenceParser_XmlCommentEvent: findType("ReferenceParser<XmlCommentEvent>"),
      ReferenceParser_XmlDeclarationEvent: findType("ReferenceParser<XmlDeclarationEvent>"),
      ReferenceParser_XmlDoctypeEvent: findType("ReferenceParser<XmlDoctypeEvent>"),
      ReferenceParser_XmlEndElementEvent: findType("ReferenceParser<XmlEndElementEvent>"),
      ReferenceParser_XmlEvent: findType("ReferenceParser<XmlEvent>"),
      ReferenceParser_XmlEventAttribute: findType("ReferenceParser<XmlEventAttribute>"),
      ReferenceParser_XmlProcessingEvent: findType("ReferenceParser<XmlProcessingEvent>"),
      ReferenceParser_XmlStartElementEvent: findType("ReferenceParser<XmlStartElementEvent>"),
      ReferenceParser_XmlTextEvent: findType("ReferenceParser<XmlTextEvent>"),
      ReferenceParser_dynamic: findType("ReferenceParser<@>"),
      ReferenceParser_void: findType("ReferenceParser<~>"),
      RegExpMatch: findType("RegExpMatch"),
      Register64: findType("Register64"),
      ResolvableParser_dynamic: findType("ResolvableParser<@>"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      Runes: findType("Runes"),
      SequenceParser8_of_String_and_String_and_String_and_nullable_DtdExternalId_and_String_and_nullable_String_and_String_and_String: findType("SequenceParser8<String,String,String,DtdExternalId?,String,String?,String,String>"),
      Set_XmlNodeType: findType("Set<XmlNodeType>"),
      Set_dynamic: findType("Set<@>"),
      SharedString: findType("SharedString"),
      Sheet: findType("Sheet"),
      Sink_String: findType("Sink<String>"),
      SkipParser_DtdExternalId: findType("SkipParser<DtdExternalId>"),
      SourceBuffer: findType("SourceBuffer"),
      SpeechGrammar: findType("SpeechGrammar"),
      SpeechRecognitionResult: findType("SpeechRecognitionResult"),
      SquadronCancelationToken: findType("SquadronCancelationToken"),
      SquadronCanceledException: findType("SquadronCanceledException"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      String_Function_Match: findType("String(Match)"),
      StyleSheet: findType("StyleSheet"),
      Success_String: findType("Success<String>"),
      Symbol: findType("Symbol0"),
      TextTrack: findType("TextTrack"),
      TextTrackCue: findType("TextTrackCue"),
      TokenParser_String: findType("TokenParser<String>"),
      Touch: findType("Touch"),
      Transform: findType("Transform"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      TypeError: findType("TypeError"),
      TypedData: findType("TypedData"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8ClampedList: findType("Uint8ClampedList"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      WhereTypeIterable_XmlDeclarationEvent: findType("WhereTypeIterable<XmlDeclarationEvent>"),
      WhereTypeIterable_XmlDoctypeEvent: findType("WhereTypeIterable<XmlDoctypeEvent>"),
      WhereTypeIterable_XmlStartElementEvent: findType("WhereTypeIterable<XmlStartElementEvent>"),
      WhereTypeIterator_XmlElement: findType("WhereTypeIterator<XmlElement>"),
      WorkerService: findType("WorkerService"),
      XmlAttribute: findType("XmlAttribute"),
      XmlCDATAEvent: findType("XmlCDATAEvent"),
      XmlCommentEvent: findType("XmlCommentEvent"),
      XmlDeclarationEvent: findType("XmlDeclarationEvent"),
      XmlDescendantsIterable: findType("XmlDescendantsIterable"),
      XmlDoctypeEvent: findType("XmlDoctypeEvent"),
      XmlDocument: findType("XmlDocument"),
      XmlElement: findType("XmlElement"),
      XmlEndElementEvent: findType("XmlEndElementEvent"),
      XmlEntityMapping: findType("XmlEntityMapping"),
      XmlEvent: findType("XmlEvent"),
      XmlEventAttribute: findType("XmlEventAttribute"),
      XmlHasName: findType("XmlHasName"),
      XmlHasVisitor: findType("XmlHasVisitor"),
      XmlNode: findType("XmlNode"),
      XmlProcessingEvent: findType("XmlProcessingEvent"),
      XmlStartElementEvent: findType("XmlStartElementEvent"),
      XmlTextEvent: findType("XmlTextEvent"),
      _AsyncCompleter_CanceledException: findType("_AsyncCompleter<CanceledException>"),
      _AsyncCompleter_SquadronCanceledException: findType("_AsyncCompleter<SquadronCanceledException>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _Future_CanceledException: findType("_Future<CanceledException>"),
      _Future_SquadronCanceledException: findType("_Future<SquadronCanceledException>"),
      _Future_dynamic: findType("_Future<@>"),
      _IdentityHashMap_Object_Object: findType("_IdentityHashMap<Object,Object>"),
      _IdentityHashMap_of_nullable_Object_and_nullable_Object: findType("_IdentityHashMap<Object?,Object?>"),
      _IndexingHolder: findType("_IndexingHolder"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_List_dynamic: findType("@(List<@>)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      int_Function_dynamic: findType("int(@)"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_CellValue: findType("CellValue?"),
      nullable_Data: findType("Data?"),
      nullable_DtdExternalId: findType("DtdExternalId?"),
      nullable_Excel_Function_dynamic: findType("Excel?(@)"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Gamepad: findType("Gamepad?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_Object: findType("Object?"),
      nullable_Result_XmlEvent: findType("Result<XmlEvent>?"),
      nullable_SquadronCancelationToken: findType("SquadronCancelationToken?"),
      nullable_SquadronException: findType("SquadronException?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_String: findType("String?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_WorkerChannel: findType("WorkerChannel?"),
      nullable_WorkerService: findType("WorkerService?"),
      nullable_XmlEvent: findType("XmlEvent?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_void_Function_OutputEvent: findType("~(OutputEvent)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_Iterable_XmlNode: findType("~(Iterable<XmlNode>)"),
      void_Function_String_String: findType("~(String,String)"),
      void_Function_String_dynamic: findType("~(String,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.BorderStyle_None = new A.BorderStyle("None");
    B.C_CastConverter = new A.CastConverter();
    B.C_DefaultEquality = new A.DefaultEquality(A.findType("DefaultEquality<0&>"));
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_Endian0 = new A.Endian();
    B.C_Endian = new A.Endian();
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_ListEquality = new A.ListEquality(A.findType("ListEquality<XmlEventAttribute>"));
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C_WhitespaceCharPredicate = new A.WhitespaceCharPredicate();
    B.Object_eAe = {amp: 0, apos: 1, gt: 2, lt: 3, quot: 4};
    B.Map_4YusT = new A.ConstantStringMap(B.Object_eAe, ["&", "'", ">", "<", '"'], A.findType("ConstantStringMap<String,String>"));
    B.C_XmlDefaultEntityMapping = new A.XmlDefaultEntityMapping();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.ConstantCharPredicate_false = new A.ConstantCharPredicate(false);
    B.ConstantCharPredicate_true = new A.ConstantCharPredicate(true);
    B.ColorType_2 = new A.ColorType("materialAccent");
    B.ExcelColor_2DL = new A.ExcelColor("FFFFE57F", "amberAccent100", B.ColorType_2);
    B.ColorType_0 = new A.ColorType("color");
    B.ExcelColor_43h = new A.ExcelColor("61000000", "black38", B.ColorType_0);
    B.ExcelColor_46y = new A.ExcelColor("99FFFFFF", "white60", B.ColorType_0);
    B.ExcelColor_4C7 = new A.ExcelColor("FFFFD600", "yellowAccent700", B.ColorType_2);
    B.ExcelColor_7xV = new A.ExcelColor("FFFFD180", "orangeAccent100", B.ColorType_2);
    B.ExcelColor_86y = new A.ExcelColor("1FFFFFFF", "white12", B.ColorType_0);
    B.ExcelColor_8Is = new A.ExcelColor("FF40C4FF", "lightBlueAccent", B.ColorType_2);
    B.ExcelColor_A8u = new A.ExcelColor("FF80D8FF", "lightBlueAccent100", B.ColorType_2);
    B.ExcelColor_ACQ = new A.ExcelColor("FF7C4DFF", "deepPurpleAccent", B.ColorType_2);
    B.ExcelColor_AGO = new A.ExcelColor("FFFF3D00", "deepOrangeAccent400", B.ColorType_2);
    B.ExcelColor_AmY = new A.ExcelColor("62FFFFFF", "white38", B.ColorType_0);
    B.ExcelColor_B3FFFFFF_white70_ColorType_0 = new A.ExcelColor("B3FFFFFF", "white70", B.ColorType_0);
    B.ExcelColor_DD000000_black87_ColorType_0 = new A.ExcelColor("DD000000", "black87", B.ColorType_0);
    B.ExcelColor_FF000000_black_ColorType_0 = new A.ExcelColor("FF000000", "black", B.ColorType_0);
    B.ColorType_1 = new A.ColorType("material");
    B.ExcelColor_FF004D40_teal900_ColorType_1 = new A.ExcelColor("FF004D40", "teal900", B.ColorType_1);
    B.ExcelColor_FF006064_cyan900_ColorType_1 = new A.ExcelColor("FF006064", "cyan900", B.ColorType_1);
    B.ExcelColor_FF00695C_teal800_ColorType_1 = new A.ExcelColor("FF00695C", "teal800", B.ColorType_1);
    B.ExcelColor_FF00796B_teal700_ColorType_1 = new A.ExcelColor("FF00796B", "teal700", B.ColorType_1);
    B.ExcelColor_FF00838F_cyan800_ColorType_1 = new A.ExcelColor("FF00838F", "cyan800", B.ColorType_1);
    B.ExcelColor_FF00897B_teal600_ColorType_1 = new A.ExcelColor("FF00897B", "teal600", B.ColorType_1);
    B.ExcelColor_FF009688_teal_ColorType_1 = new A.ExcelColor("FF009688", "teal", B.ColorType_1);
    B.ExcelColor_FF0097A7_cyan700_ColorType_1 = new A.ExcelColor("FF0097A7", "cyan700", B.ColorType_1);
    B.ExcelColor_FF00ACC1_cyan600_ColorType_1 = new A.ExcelColor("FF00ACC1", "cyan600", B.ColorType_1);
    B.ExcelColor_FF00B8D4_cyanAccent700_ColorType_2 = new A.ExcelColor("FF00B8D4", "cyanAccent700", B.ColorType_2);
    B.ExcelColor_FF00BCD4_cyan_ColorType_1 = new A.ExcelColor("FF00BCD4", "cyan", B.ColorType_1);
    B.ExcelColor_FF00BFA5_tealAccent700_ColorType_2 = new A.ExcelColor("FF00BFA5", "tealAccent700", B.ColorType_2);
    B.ExcelColor_FF00E5FF_cyanAccent400_ColorType_2 = new A.ExcelColor("FF00E5FF", "cyanAccent400", B.ColorType_2);
    B.ExcelColor_FF01579B_lightBlue900_ColorType_1 = new A.ExcelColor("FF01579B", "lightBlue900", B.ColorType_1);
    B.ExcelColor_FF0277BD_lightBlue800_ColorType_1 = new A.ExcelColor("FF0277BD", "lightBlue800", B.ColorType_1);
    B.ExcelColor_FF0288D1_lightBlue700_ColorType_1 = new A.ExcelColor("FF0288D1", "lightBlue700", B.ColorType_1);
    B.ExcelColor_FF039BE5_lightBlue600_ColorType_1 = new A.ExcelColor("FF039BE5", "lightBlue600", B.ColorType_1);
    B.ExcelColor_FF03A9F4_lightBlue_ColorType_1 = new A.ExcelColor("FF03A9F4", "lightBlue", B.ColorType_1);
    B.ExcelColor_FF0D47A1_blue900_ColorType_1 = new A.ExcelColor("FF0D47A1", "blue900", B.ColorType_1);
    B.ExcelColor_FF1565C0_blue800_ColorType_1 = new A.ExcelColor("FF1565C0", "blue800", B.ColorType_1);
    B.ExcelColor_FF18FFFF_cyanAccent_ColorType_2 = new A.ExcelColor("FF18FFFF", "cyanAccent", B.ColorType_2);
    B.ExcelColor_FF1976D2_blue700_ColorType_1 = new A.ExcelColor("FF1976D2", "blue700", B.ColorType_1);
    B.ExcelColor_FF1A237E_indigo900_ColorType_1 = new A.ExcelColor("FF1A237E", "indigo900", B.ColorType_1);
    B.ExcelColor_FF1B5E20_green900_ColorType_1 = new A.ExcelColor("FF1B5E20", "green900", B.ColorType_1);
    B.ExcelColor_FF1DE9B6_tealAccent400_ColorType_2 = new A.ExcelColor("FF1DE9B6", "tealAccent400", B.ColorType_2);
    B.ExcelColor_FF1E88E5_blue600_ColorType_1 = new A.ExcelColor("FF1E88E5", "blue600", B.ColorType_1);
    B.ExcelColor_FF212121_grey900_ColorType_1 = new A.ExcelColor("FF212121", "grey900", B.ColorType_1);
    B.ExcelColor_FF2196F3_blue_ColorType_1 = new A.ExcelColor("FF2196F3", "blue", B.ColorType_1);
    B.ExcelColor_FF263238_blueGrey900_ColorType_1 = new A.ExcelColor("FF263238", "blueGrey900", B.ColorType_1);
    B.ExcelColor_FF26A69A_teal400_ColorType_1 = new A.ExcelColor("FF26A69A", "teal400", B.ColorType_1);
    B.ExcelColor_FF26C6DA_cyan400_ColorType_1 = new A.ExcelColor("FF26C6DA", "cyan400", B.ColorType_1);
    B.ExcelColor_FF283593_indigo800_ColorType_1 = new A.ExcelColor("FF283593", "indigo800", B.ColorType_1);
    B.ExcelColor_FF2962FF_blueAccent700_ColorType_2 = new A.ExcelColor("FF2962FF", "blueAccent700", B.ColorType_2);
    B.ExcelColor_FF2979FF_blueAccent400_ColorType_2 = new A.ExcelColor("FF2979FF", "blueAccent400", B.ColorType_2);
    B.ExcelColor_FF29B6F6_lightBlue400_ColorType_1 = new A.ExcelColor("FF29B6F6", "lightBlue400", B.ColorType_1);
    B.ExcelColor_FF2E7D32_green800_ColorType_1 = new A.ExcelColor("FF2E7D32", "green800", B.ColorType_1);
    B.ExcelColor_FF303030_grey850_ColorType_1 = new A.ExcelColor("FF303030", "grey850", B.ColorType_1);
    B.ExcelColor_FF303F9F_indigo700_ColorType_1 = new A.ExcelColor("FF303F9F", "indigo700", B.ColorType_1);
    B.ExcelColor_FF311B92_deepPurple900_ColorType_1 = new A.ExcelColor("FF311B92", "deepPurple900", B.ColorType_1);
    B.ExcelColor_FF33691E_lightGreen900_ColorType_1 = new A.ExcelColor("FF33691E", "lightGreen900", B.ColorType_1);
    B.ExcelColor_FF37474F_blueGrey800_ColorType_1 = new A.ExcelColor("FF37474F", "blueGrey800", B.ColorType_1);
    B.ExcelColor_FF388E3C_green700_ColorType_1 = new A.ExcelColor("FF388E3C", "green700", B.ColorType_1);
    B.ExcelColor_FF3949AB_indigo600_ColorType_1 = new A.ExcelColor("FF3949AB", "indigo600", B.ColorType_1);
    B.ExcelColor_FF3E2723_brown900_ColorType_1 = new A.ExcelColor("FF3E2723", "brown900", B.ColorType_1);
    B.ExcelColor_FF3F51B5_indigo_ColorType_1 = new A.ExcelColor("FF3F51B5", "indigo", B.ColorType_1);
    B.ExcelColor_FF424242_grey800_ColorType_1 = new A.ExcelColor("FF424242", "grey800", B.ColorType_1);
    B.ExcelColor_FF42A5F5_blue400_ColorType_1 = new A.ExcelColor("FF42A5F5", "blue400", B.ColorType_1);
    B.ExcelColor_FF43A047_green600_ColorType_1 = new A.ExcelColor("FF43A047", "green600", B.ColorType_1);
    B.ExcelColor_FF448AFF_blueAccent_ColorType_2 = new A.ExcelColor("FF448AFF", "blueAccent", B.ColorType_2);
    B.ExcelColor_FF4527A0_deepPurple800_ColorType_1 = new A.ExcelColor("FF4527A0", "deepPurple800", B.ColorType_1);
    B.ExcelColor_FF455A64_blueGrey700_ColorType_1 = new A.ExcelColor("FF455A64", "blueGrey700", B.ColorType_1);
    B.ExcelColor_FF4A148C_purple900_ColorType_1 = new A.ExcelColor("FF4A148C", "purple900", B.ColorType_1);
    B.ExcelColor_FF4CAF50_green_ColorType_1 = new A.ExcelColor("FF4CAF50", "green", B.ColorType_1);
    B.ExcelColor_FF4DB6AC_teal300_ColorType_1 = new A.ExcelColor("FF4DB6AC", "teal300", B.ColorType_1);
    B.ExcelColor_FF4DD0E1_cyan300_ColorType_1 = new A.ExcelColor("FF4DD0E1", "cyan300", B.ColorType_1);
    B.ExcelColor_FF4E342E_brown800_ColorType_1 = new A.ExcelColor("FF4E342E", "brown800", B.ColorType_1);
    B.ExcelColor_FF4FC3F7_lightBlue300_ColorType_1 = new A.ExcelColor("FF4FC3F7", "lightBlue300", B.ColorType_1);
    B.ExcelColor_FF512DA8_deepPurple700_ColorType_1 = new A.ExcelColor("FF512DA8", "deepPurple700", B.ColorType_1);
    B.ExcelColor_FF536DFE_indigoAccent_ColorType_2 = new A.ExcelColor("FF536DFE", "indigoAccent", B.ColorType_2);
    B.ExcelColor_FF546E7A_blueGrey600_ColorType_1 = new A.ExcelColor("FF546E7A", "blueGrey600", B.ColorType_1);
    B.ExcelColor_FF558B2F_lightGreen800_ColorType_1 = new A.ExcelColor("FF558B2F", "lightGreen800", B.ColorType_1);
    B.ExcelColor_FF5C6BC0_indigo400_ColorType_1 = new A.ExcelColor("FF5C6BC0", "indigo400", B.ColorType_1);
    B.ExcelColor_FF5D4037_brown700_ColorType_1 = new A.ExcelColor("FF5D4037", "brown700", B.ColorType_1);
    B.ExcelColor_FF5E35B1_deepPurple600_ColorType_1 = new A.ExcelColor("FF5E35B1", "deepPurple600", B.ColorType_1);
    B.ExcelColor_FF607D8B_blueGrey_ColorType_1 = new A.ExcelColor("FF607D8B", "blueGrey", B.ColorType_1);
    B.ExcelColor_FF616161_grey700_ColorType_1 = new A.ExcelColor("FF616161", "grey700", B.ColorType_1);
    B.ExcelColor_FF64B5F6_blue300_ColorType_1 = new A.ExcelColor("FF64B5F6", "blue300", B.ColorType_1);
    B.ExcelColor_FF64FFDA_tealAccent_ColorType_2 = new A.ExcelColor("FF64FFDA", "tealAccent", B.ColorType_2);
    B.ExcelColor_FF66BB6A_green400_ColorType_1 = new A.ExcelColor("FF66BB6A", "green400", B.ColorType_1);
    B.ExcelColor_FF673AB7_deepPurple_ColorType_1 = new A.ExcelColor("FF673AB7", "deepPurple", B.ColorType_1);
    B.ExcelColor_FF689F38_lightGreen700_ColorType_1 = new A.ExcelColor("FF689F38", "lightGreen700", B.ColorType_1);
    B.ExcelColor_FF69F0AE_greenAccent_ColorType_2 = new A.ExcelColor("FF69F0AE", "greenAccent", B.ColorType_2);
    B.ExcelColor_FF6A1B9A_purple800_ColorType_1 = new A.ExcelColor("FF6A1B9A", "purple800", B.ColorType_1);
    B.ExcelColor_FF6D4C41_brown600_ColorType_1 = new A.ExcelColor("FF6D4C41", "brown600", B.ColorType_1);
    B.ExcelColor_FF757575_grey600_ColorType_1 = new A.ExcelColor("FF757575", "grey600", B.ColorType_1);
    B.ExcelColor_FF78909C_blueGrey400_ColorType_1 = new A.ExcelColor("FF78909C", "blueGrey400", B.ColorType_1);
    B.ExcelColor_FF795548_brown_ColorType_1 = new A.ExcelColor("FF795548", "brown", B.ColorType_1);
    B.ExcelColor_FF7986CB_indigo300_ColorType_1 = new A.ExcelColor("FF7986CB", "indigo300", B.ColorType_1);
    B.ExcelColor_FF7B1FA2_purple700_ColorType_1 = new A.ExcelColor("FF7B1FA2", "purple700", B.ColorType_1);
    B.ExcelColor_FF7CB342_lightGreen600_ColorType_1 = new A.ExcelColor("FF7CB342", "lightGreen600", B.ColorType_1);
    B.ExcelColor_FF7E57C2_deepPurple400_ColorType_1 = new A.ExcelColor("FF7E57C2", "deepPurple400", B.ColorType_1);
    B.ExcelColor_FF80CBC4_teal200_ColorType_1 = new A.ExcelColor("FF80CBC4", "teal200", B.ColorType_1);
    B.ExcelColor_FF80DEEA_cyan200_ColorType_1 = new A.ExcelColor("FF80DEEA", "cyan200", B.ColorType_1);
    B.ExcelColor_FF81C784_green300_ColorType_1 = new A.ExcelColor("FF81C784", "green300", B.ColorType_1);
    B.ExcelColor_FF81D4FA_lightBlue200_ColorType_1 = new A.ExcelColor("FF81D4FA", "lightBlue200", B.ColorType_1);
    B.ExcelColor_FF827717_lime900_ColorType_1 = new A.ExcelColor("FF827717", "lime900", B.ColorType_1);
    B.ExcelColor_FF82B1FF_blueAccent100_ColorType_2 = new A.ExcelColor("FF82B1FF", "blueAccent100", B.ColorType_2);
    B.ExcelColor_FF84FFFF_cyanAccent100_ColorType_2 = new A.ExcelColor("FF84FFFF", "cyanAccent100", B.ColorType_2);
    B.ExcelColor_FF880E4F_pink900_ColorType_1 = new A.ExcelColor("FF880E4F", "pink900", B.ColorType_1);
    B.ExcelColor_FF8BC34A_lightGreen_ColorType_1 = new A.ExcelColor("FF8BC34A", "lightGreen", B.ColorType_1);
    B.ExcelColor_FF8D6E63_brown400_ColorType_1 = new A.ExcelColor("FF8D6E63", "brown400", B.ColorType_1);
    B.ExcelColor_FF8E24AA_purple600_ColorType_1 = new A.ExcelColor("FF8E24AA", "purple600", B.ColorType_1);
    B.ExcelColor_FF90A4AE_blueGrey300_ColorType_1 = new A.ExcelColor("FF90A4AE", "blueGrey300", B.ColorType_1);
    B.ExcelColor_FF90CAF9_blue200_ColorType_1 = new A.ExcelColor("FF90CAF9", "blue200", B.ColorType_1);
    B.ExcelColor_FF9575CD_deepPurple300_ColorType_1 = new A.ExcelColor("FF9575CD", "deepPurple300", B.ColorType_1);
    B.ExcelColor_FF9C27B0_purple_ColorType_1 = new A.ExcelColor("FF9C27B0", "purple", B.ColorType_1);
    B.ExcelColor_FF9CCC65_lightGreen400_ColorType_1 = new A.ExcelColor("FF9CCC65", "lightGreen400", B.ColorType_1);
    B.ExcelColor_FF9E9D24_lime800_ColorType_1 = new A.ExcelColor("FF9E9D24", "lime800", B.ColorType_1);
    B.ExcelColor_FF9E9E9E_grey_ColorType_1 = new A.ExcelColor("FF9E9E9E", "grey", B.ColorType_1);
    B.ExcelColor_FF9FA8DA_indigo200_ColorType_1 = new A.ExcelColor("FF9FA8DA", "indigo200", B.ColorType_1);
    B.ExcelColor_FFA1887F_brown300_ColorType_1 = new A.ExcelColor("FFA1887F", "brown300", B.ColorType_1);
    B.ExcelColor_FFA5D6A7_green200_ColorType_1 = new A.ExcelColor("FFA5D6A7", "green200", B.ColorType_1);
    B.ExcelColor_FFA7FFEB_tealAccent100_ColorType_2 = new A.ExcelColor("FFA7FFEB", "tealAccent100", B.ColorType_2);
    B.ExcelColor_FFAB47BC_purple400_ColorType_1 = new A.ExcelColor("FFAB47BC", "purple400", B.ColorType_1);
    B.ExcelColor_FFAD1457_pink800_ColorType_1 = new A.ExcelColor("FFAD1457", "pink800", B.ColorType_1);
    B.ExcelColor_FFAED581_lightGreen300_ColorType_1 = new A.ExcelColor("FFAED581", "lightGreen300", B.ColorType_1);
    B.ExcelColor_FFAEEA00_limeAccent700_ColorType_2 = new A.ExcelColor("FFAEEA00", "limeAccent700", B.ColorType_2);
    B.ExcelColor_FFAFB42B_lime700_ColorType_1 = new A.ExcelColor("FFAFB42B", "lime700", B.ColorType_1);
    B.ExcelColor_FFB0BEC5_blueGrey200_ColorType_1 = new A.ExcelColor("FFB0BEC5", "blueGrey200", B.ColorType_1);
    B.ExcelColor_FFB2DFDB_teal100_ColorType_1 = new A.ExcelColor("FFB2DFDB", "teal100", B.ColorType_1);
    B.ExcelColor_FFB2EBF2_cyan100_ColorType_1 = new A.ExcelColor("FFB2EBF2", "cyan100", B.ColorType_1);
    B.ExcelColor_FFB39DDB_deepPurple200_ColorType_1 = new A.ExcelColor("FFB39DDB", "deepPurple200", B.ColorType_1);
    B.ExcelColor_FFB3E5FC_lightBlue100_ColorType_1 = new A.ExcelColor("FFB3E5FC", "lightBlue100", B.ColorType_1);
    B.ExcelColor_FFB71C1C_red900_ColorType_1 = new A.ExcelColor("FFB71C1C", "red900", B.ColorType_1);
    B.ExcelColor_FFBA68C8_purple300_ColorType_1 = new A.ExcelColor("FFBA68C8", "purple300", B.ColorType_1);
    B.ExcelColor_FFBBDEFB_blue100_ColorType_1 = new A.ExcelColor("FFBBDEFB", "blue100", B.ColorType_1);
    B.ExcelColor_FFBCAAA4_brown200_ColorType_1 = new A.ExcelColor("FFBCAAA4", "brown200", B.ColorType_1);
    B.ExcelColor_FFBDBDBD_grey400_ColorType_1 = new A.ExcelColor("FFBDBDBD", "grey400", B.ColorType_1);
    B.ExcelColor_FFBF360C_deepOrange900_ColorType_1 = new A.ExcelColor("FFBF360C", "deepOrange900", B.ColorType_1);
    B.ExcelColor_FFC0CA33_lime600_ColorType_1 = new A.ExcelColor("FFC0CA33", "lime600", B.ColorType_1);
    B.ExcelColor_FFC2185B_pink700_ColorType_1 = new A.ExcelColor("FFC2185B", "pink700", B.ColorType_1);
    B.ExcelColor_FFC51162_pinkAccent700_ColorType_2 = new A.ExcelColor("FFC51162", "pinkAccent700", B.ColorType_2);
    B.ExcelColor_FFC5CAE9_indigo100_ColorType_1 = new A.ExcelColor("FFC5CAE9", "indigo100", B.ColorType_1);
    B.ExcelColor_FFC5E1A5_lightGreen200_ColorType_1 = new A.ExcelColor("FFC5E1A5", "lightGreen200", B.ColorType_1);
    B.ExcelColor_FFC62828_red800_ColorType_1 = new A.ExcelColor("FFC62828", "red800", B.ColorType_1);
    B.ExcelColor_FFC6FF00_limeAccent400_ColorType_2 = new A.ExcelColor("FFC6FF00", "limeAccent400", B.ColorType_2);
    B.ExcelColor_FFC8E6C9_green100_ColorType_1 = new A.ExcelColor("FFC8E6C9", "green100", B.ColorType_1);
    B.ExcelColor_FFCDDC39_lime_ColorType_1 = new A.ExcelColor("FFCDDC39", "lime", B.ColorType_1);
    B.ExcelColor_FFCE93D8_purple200_ColorType_1 = new A.ExcelColor("FFCE93D8", "purple200", B.ColorType_1);
    B.ExcelColor_FFCFD8DC_blueGrey100_ColorType_1 = new A.ExcelColor("FFCFD8DC", "blueGrey100", B.ColorType_1);
    B.ExcelColor_FFD1C4E9_deepPurple100_ColorType_1 = new A.ExcelColor("FFD1C4E9", "deepPurple100", B.ColorType_1);
    B.ExcelColor_FFD32F2F_red700_ColorType_1 = new A.ExcelColor("FFD32F2F", "red700", B.ColorType_1);
    B.ExcelColor_FFD4E157_lime400_ColorType_1 = new A.ExcelColor("FFD4E157", "lime400", B.ColorType_1);
    B.ExcelColor_FFD50000_redAccent700_ColorType_2 = new A.ExcelColor("FFD50000", "redAccent700", B.ColorType_2);
    B.ExcelColor_FFD6D6D6_grey350_ColorType_1 = new A.ExcelColor("FFD6D6D6", "grey350", B.ColorType_1);
    B.ExcelColor_FFD7CCC8_brown100_ColorType_1 = new A.ExcelColor("FFD7CCC8", "brown100", B.ColorType_1);
    B.ExcelColor_FFD81B60_pink600_ColorType_1 = new A.ExcelColor("FFD81B60", "pink600", B.ColorType_1);
    B.ExcelColor_FFD84315_deepOrange800_ColorType_1 = new A.ExcelColor("FFD84315", "deepOrange800", B.ColorType_1);
    B.ExcelColor_FFDCE775_lime300_ColorType_1 = new A.ExcelColor("FFDCE775", "lime300", B.ColorType_1);
    B.ExcelColor_FFDCEDC8_lightGreen100_ColorType_1 = new A.ExcelColor("FFDCEDC8", "lightGreen100", B.ColorType_1);
    B.ExcelColor_FFE040FB_purpleAccent_ColorType_2 = new A.ExcelColor("FFE040FB", "purpleAccent", B.ColorType_2);
    B.ExcelColor_FFE0E0E0_grey300_ColorType_1 = new A.ExcelColor("FFE0E0E0", "grey300", B.ColorType_1);
    B.ExcelColor_FFE0F2F1_teal50_ColorType_1 = new A.ExcelColor("FFE0F2F1", "teal50", B.ColorType_1);
    B.ExcelColor_FFE0F7FA_cyan50_ColorType_1 = new A.ExcelColor("FFE0F7FA", "cyan50", B.ColorType_1);
    B.ExcelColor_FFE1BEE7_purple100_ColorType_1 = new A.ExcelColor("FFE1BEE7", "purple100", B.ColorType_1);
    B.ExcelColor_FFE1F5FE_lightBlue50_ColorType_1 = new A.ExcelColor("FFE1F5FE", "lightBlue50", B.ColorType_1);
    B.ExcelColor_FFE3F2FD_blue50_ColorType_1 = new A.ExcelColor("FFE3F2FD", "blue50", B.ColorType_1);
    B.ExcelColor_FFE53935_red600_ColorType_1 = new A.ExcelColor("FFE53935", "red600", B.ColorType_1);
    B.ExcelColor_FFE57373_red300_ColorType_1 = new A.ExcelColor("FFE57373", "red300", B.ColorType_1);
    B.ExcelColor_FFE64A19_deepOrange700_ColorType_1 = new A.ExcelColor("FFE64A19", "deepOrange700", B.ColorType_1);
    B.ExcelColor_FFE65100_orange900_ColorType_1 = new A.ExcelColor("FFE65100", "orange900", B.ColorType_1);
    B.ExcelColor_FFE6EE9C_lime200_ColorType_1 = new A.ExcelColor("FFE6EE9C", "lime200", B.ColorType_1);
    B.ExcelColor_FFE8EAF6_indigo50_ColorType_1 = new A.ExcelColor("FFE8EAF6", "indigo50", B.ColorType_1);
    B.ExcelColor_FFE8F5E9_green50_ColorType_1 = new A.ExcelColor("FFE8F5E9", "green50", B.ColorType_1);
    B.ExcelColor_FFE91E63_pink_ColorType_1 = new A.ExcelColor("FFE91E63", "pink", B.ColorType_1);
    B.ExcelColor_FFEC407A_pink400_ColorType_1 = new A.ExcelColor("FFEC407A", "pink400", B.ColorType_1);
    B.ExcelColor_FFECEFF1_blueGrey50_ColorType_1 = new A.ExcelColor("FFECEFF1", "blueGrey50", B.ColorType_1);
    B.ExcelColor_FFEDE7F6_deepPurple50_ColorType_1 = new A.ExcelColor("FFEDE7F6", "deepPurple50", B.ColorType_1);
    B.ExcelColor_FFEEEEEE_grey200_ColorType_1 = new A.ExcelColor("FFEEEEEE", "grey200", B.ColorType_1);
    B.ExcelColor_FFEEFF41_limeAccent_ColorType_2 = new A.ExcelColor("FFEEFF41", "limeAccent", B.ColorType_2);
    B.ExcelColor_FFEF5350_red400_ColorType_1 = new A.ExcelColor("FFEF5350", "red400", B.ColorType_1);
    B.ExcelColor_FFEF6C00_orange800_ColorType_1 = new A.ExcelColor("FFEF6C00", "orange800", B.ColorType_1);
    B.ExcelColor_FFEF9A9A_red200_ColorType_1 = new A.ExcelColor("FFEF9A9A", "red200", B.ColorType_1);
    B.ExcelColor_FFEFEBE9_brown50_ColorType_1 = new A.ExcelColor("FFEFEBE9", "brown50", B.ColorType_1);
    B.ExcelColor_FFF06292_pink300_ColorType_1 = new A.ExcelColor("FFF06292", "pink300", B.ColorType_1);
    B.ExcelColor_FFF0F4C3_lime100_ColorType_1 = new A.ExcelColor("FFF0F4C3", "lime100", B.ColorType_1);
    B.ExcelColor_FFF1F8E9_lightGreen50_ColorType_1 = new A.ExcelColor("FFF1F8E9", "lightGreen50", B.ColorType_1);
    B.ExcelColor_FFF3E5F5_purple50_ColorType_1 = new A.ExcelColor("FFF3E5F5", "purple50", B.ColorType_1);
    B.ExcelColor_FFF44336_red_ColorType_1 = new A.ExcelColor("FFF44336", "red", B.ColorType_1);
    B.ExcelColor_FFF4511E_deepOrange600_ColorType_1 = new A.ExcelColor("FFF4511E", "deepOrange600", B.ColorType_1);
    B.ExcelColor_FFF48FB1_pink200_ColorType_1 = new A.ExcelColor("FFF48FB1", "pink200", B.ColorType_1);
    B.ExcelColor_FFF4FF81_limeAccent100_ColorType_2 = new A.ExcelColor("FFF4FF81", "limeAccent100", B.ColorType_2);
    B.ExcelColor_FFF50057_pinkAccent400_ColorType_2 = new A.ExcelColor("FFF50057", "pinkAccent400", B.ColorType_2);
    B.ExcelColor_FFF57C00_orange700_ColorType_1 = new A.ExcelColor("FFF57C00", "orange700", B.ColorType_1);
    B.ExcelColor_FFF57F17_yellow900_ColorType_1 = new A.ExcelColor("FFF57F17", "yellow900", B.ColorType_1);
    B.ExcelColor_FFF5F5F5_grey100_ColorType_1 = new A.ExcelColor("FFF5F5F5", "grey100", B.ColorType_1);
    B.ExcelColor_FFF8BBD0_pink100_ColorType_1 = new A.ExcelColor("FFF8BBD0", "pink100", B.ColorType_1);
    B.ExcelColor_FFF9A825_yellow800_ColorType_1 = new A.ExcelColor("FFF9A825", "yellow800", B.ColorType_1);
    B.ExcelColor_FFF9FBE7_lime50_ColorType_1 = new A.ExcelColor("FFF9FBE7", "lime50", B.ColorType_1);
    B.ExcelColor_FFFAFAFA_grey50_ColorType_1 = new A.ExcelColor("FFFAFAFA", "grey50", B.ColorType_1);
    B.ExcelColor_FFFB8C00_orange600_ColorType_1 = new A.ExcelColor("FFFB8C00", "orange600", B.ColorType_1);
    B.ExcelColor_FFFBC02D_yellow700_ColorType_1 = new A.ExcelColor("FFFBC02D", "yellow700", B.ColorType_1);
    B.ExcelColor_FFFBE9E7_deepOrange50_ColorType_1 = new A.ExcelColor("FFFBE9E7", "deepOrange50", B.ColorType_1);
    B.ExcelColor_FFFCE4EC_pink50_ColorType_1 = new A.ExcelColor("FFFCE4EC", "pink50", B.ColorType_1);
    B.ExcelColor_FFFDD835_yellow600_ColorType_1 = new A.ExcelColor("FFFDD835", "yellow600", B.ColorType_1);
    B.ExcelColor_FFFF1744_redAccent400_ColorType_2 = new A.ExcelColor("FFFF1744", "redAccent400", B.ColorType_2);
    B.ExcelColor_FFFF4081_pinkAccent_ColorType_2 = new A.ExcelColor("FFFF4081", "pinkAccent", B.ColorType_2);
    B.ExcelColor_FFFF5252_redAccent_ColorType_2 = new A.ExcelColor("FFFF5252", "redAccent", B.ColorType_2);
    B.ExcelColor_FFFF5722_deepOrange_ColorType_1 = new A.ExcelColor("FFFF5722", "deepOrange", B.ColorType_1);
    B.ExcelColor_FFFF6F00_amber900_ColorType_1 = new A.ExcelColor("FFFF6F00", "amber900", B.ColorType_1);
    B.ExcelColor_FFFF7043_deepOrange400_ColorType_1 = new A.ExcelColor("FFFF7043", "deepOrange400", B.ColorType_1);
    B.ExcelColor_FFFF80AB_pinkAccent100_ColorType_2 = new A.ExcelColor("FFFF80AB", "pinkAccent100", B.ColorType_2);
    B.ExcelColor_FFFF8A65_deepOrange300_ColorType_1 = new A.ExcelColor("FFFF8A65", "deepOrange300", B.ColorType_1);
    B.ExcelColor_FFFF8A80_redAccent100_ColorType_2 = new A.ExcelColor("FFFF8A80", "redAccent100", B.ColorType_2);
    B.ExcelColor_FFFF8F00_amber800_ColorType_1 = new A.ExcelColor("FFFF8F00", "amber800", B.ColorType_1);
    B.ExcelColor_FFFF9800_orange_ColorType_1 = new A.ExcelColor("FFFF9800", "orange", B.ColorType_1);
    B.ExcelColor_FFFFA000_amber700_ColorType_1 = new A.ExcelColor("FFFFA000", "amber700", B.ColorType_1);
    B.ExcelColor_FFFFA726_orange400_ColorType_1 = new A.ExcelColor("FFFFA726", "orange400", B.ColorType_1);
    B.ExcelColor_FFFFAB40_orangeAccent_ColorType_2 = new A.ExcelColor("FFFFAB40", "orangeAccent", B.ColorType_2);
    B.ExcelColor_FFFFAB91_deepOrange200_ColorType_1 = new A.ExcelColor("FFFFAB91", "deepOrange200", B.ColorType_1);
    B.ExcelColor_FFFFB300_amber600_ColorType_1 = new A.ExcelColor("FFFFB300", "amber600", B.ColorType_1);
    B.ExcelColor_FFFFB74D_orange300_ColorType_1 = new A.ExcelColor("FFFFB74D", "orange300", B.ColorType_1);
    B.ExcelColor_FFFFC107_amber_ColorType_1 = new A.ExcelColor("FFFFC107", "amber", B.ColorType_1);
    B.ExcelColor_FFFFCA28_amber400_ColorType_1 = new A.ExcelColor("FFFFCA28", "amber400", B.ColorType_1);
    B.ExcelColor_FFFFCC80_orange200_ColorType_1 = new A.ExcelColor("FFFFCC80", "orange200", B.ColorType_1);
    B.ExcelColor_FFFFCCBC_deepOrange100_ColorType_1 = new A.ExcelColor("FFFFCCBC", "deepOrange100", B.ColorType_1);
    B.ExcelColor_FFFFCDD2_red100_ColorType_1 = new A.ExcelColor("FFFFCDD2", "red100", B.ColorType_1);
    B.ExcelColor_FFFFD54F_amber300_ColorType_1 = new A.ExcelColor("FFFFD54F", "amber300", B.ColorType_1);
    B.ExcelColor_FFFFD740_amberAccent_ColorType_2 = new A.ExcelColor("FFFFD740", "amberAccent", B.ColorType_2);
    B.ExcelColor_FFFFE082_amber200_ColorType_1 = new A.ExcelColor("FFFFE082", "amber200", B.ColorType_1);
    B.ExcelColor_FFFFE0B2_orange100_ColorType_1 = new A.ExcelColor("FFFFE0B2", "orange100", B.ColorType_1);
    B.ExcelColor_FFFFEB3B_yellow_ColorType_1 = new A.ExcelColor("FFFFEB3B", "yellow", B.ColorType_1);
    B.ExcelColor_FFFFEBEE_red50_ColorType_1 = new A.ExcelColor("FFFFEBEE", "red50", B.ColorType_1);
    B.ExcelColor_FFFFECB3_amber100_ColorType_1 = new A.ExcelColor("FFFFECB3", "amber100", B.ColorType_1);
    B.ExcelColor_FFFFEE58_yellow400_ColorType_1 = new A.ExcelColor("FFFFEE58", "yellow400", B.ColorType_1);
    B.ExcelColor_FFFFF176_yellow300_ColorType_1 = new A.ExcelColor("FFFFF176", "yellow300", B.ColorType_1);
    B.ExcelColor_FFFFF3E0_orange50_ColorType_1 = new A.ExcelColor("FFFFF3E0", "orange50", B.ColorType_1);
    B.ExcelColor_FFFFF59D_yellow200_ColorType_1 = new A.ExcelColor("FFFFF59D", "yellow200", B.ColorType_1);
    B.ExcelColor_FFFFF8E1_amber50_ColorType_1 = new A.ExcelColor("FFFFF8E1", "amber50", B.ColorType_1);
    B.ExcelColor_FFFFF9C4_yellow100_ColorType_1 = new A.ExcelColor("FFFFF9C4", "yellow100", B.ColorType_1);
    B.ExcelColor_FFFFFDE7_yellow50_ColorType_1 = new A.ExcelColor("FFFFFDE7", "yellow50", B.ColorType_1);
    B.ExcelColor_FFFFFF00_yellowAccent_ColorType_2 = new A.ExcelColor("FFFFFF00", "yellowAccent", B.ColorType_2);
    B.ExcelColor_FFFFFFFF_white_ColorType_0 = new A.ExcelColor("FFFFFFFF", "white", B.ColorType_0);
    B.ExcelColor_FV9 = new A.ExcelColor("FFFF9100", "orangeAccent400", B.ColorType_2);
    B.ExcelColor_GU6 = new A.ExcelColor("FFAA00FF", "purpleAccent700", B.ColorType_2);
    B.ExcelColor_Gxg = new A.ExcelColor("FFB2FF59", "lightGreenAccent", B.ColorType_2);
    B.ExcelColor_Ix1 = new A.ExcelColor("FF00B0FF", "lightBlueAccent400", B.ColorType_2);
    B.ExcelColor_J2a = new A.ExcelColor("FF6200EA", "deepPurpleAccent700", B.ColorType_2);
    B.ExcelColor_KAn = new A.ExcelColor("FF00E676", "greenAccent400", B.ColorType_2);
    B.ExcelColor_P5Z = new A.ExcelColor("FF8C9EFF", "indigoAccent100", B.ColorType_2);
    B.ExcelColor_P8P = new A.ExcelColor("FFFF9E80", "deepOrangeAccent100", B.ColorType_2);
    B.ExcelColor_PaG = new A.ExcelColor("FFFFEA00", "yellowAccent400", B.ColorType_2);
    B.ExcelColor_PnK = new A.ExcelColor("4DFFFFFF", "white30", B.ColorType_0);
    B.ExcelColor_QYm = new A.ExcelColor("FF0091EA", "lightBlueAccent700", B.ColorType_2);
    B.ExcelColor_Qyo = new A.ExcelColor("FFCCFF90", "lightGreenAccent100", B.ColorType_2);
    B.ExcelColor_Qz5 = new A.ExcelColor("8A000000", "black54", B.ColorType_0);
    B.ExcelColor_S5B = new A.ExcelColor("FFFF6E40", "deepOrangeAccent", B.ColorType_2);
    B.ExcelColor_Sn6 = new A.ExcelColor("FFD500F9", "purpleAccent400", B.ColorType_2);
    B.ExcelColor_W71 = new A.ExcelColor("1F000000", "black12", B.ColorType_0);
    B.ExcelColor_XJ0 = new A.ExcelColor("FF304FFE", "indigoAccent700", B.ColorType_2);
    B.ExcelColor_Xfd = new A.ExcelColor("42000000", "black26", B.ColorType_0);
    B.ExcelColor_ZKG = new A.ExcelColor("8AFFFFFF", "white54", B.ColorType_0);
    B.ExcelColor_avb = new A.ExcelColor("FFFFC400", "amberAccent400", B.ColorType_2);
    B.ExcelColor_c9X = new A.ExcelColor("3DFFFFFF", "white24", B.ColorType_0);
    B.ExcelColor_dMT = new A.ExcelColor("FFDD2C00", "deepOrangeAccent700", B.ColorType_2);
    B.ExcelColor_fld = new A.ExcelColor("FF76FF03", "lightGreenAccent400", B.ColorType_2);
    B.ExcelColor_g2A = new A.ExcelColor("FFFFAB00", "amberAccent700", B.ColorType_2);
    B.ExcelColor_gj4 = new A.ExcelColor("1AFFFFFF", "white10", B.ColorType_0);
    B.ExcelColor_iXq = new A.ExcelColor("FFFFFF8D", "yellowAccent100", B.ColorType_2);
    B.ExcelColor_k0I = new A.ExcelColor("FF00C853", "greenAccent700", B.ColorType_2);
    B.ExcelColor_kGg = new A.ExcelColor("FFB388FF", "deepPurpleAccent100", B.ColorType_2);
    B.ExcelColor_lrp = new A.ExcelColor("73000000", "black45", B.ColorType_0);
    B.ExcelColor_mDg = new A.ExcelColor("FF3D5AFE", "indigoAccent400", B.ColorType_2);
    B.ExcelColor_none_null_null = new A.ExcelColor("none", null, null);
    B.ExcelColor_oZX = new A.ExcelColor("FFB9F6CA", "greenAccent100", B.ColorType_2);
    B.ExcelColor_qRa = new A.ExcelColor("FFEA80FC", "purpleAccent100", B.ColorType_2);
    B.ExcelColor_ssp = new A.ExcelColor("FFFF6D00", "orangeAccent700", B.ColorType_2);
    B.ExcelColor_uzN = new A.ExcelColor("FF651FFF", "deepPurpleAccent400", B.ColorType_2);
    B.ExcelColor_zPV = new A.ExcelColor("FF64DD17", "lightGreenAccent700", B.ColorType_2);
    B.FontScheme_0 = new A.FontScheme("Unset");
    B.HorizontalAlign_0 = new A.HorizontalAlign("Left");
    B.HorizontalAlign_1 = new A.HorizontalAlign("Center");
    B.HorizontalAlign_2 = new A.HorizontalAlign("Right");
    B.JsonEncoder_null_null = new A.JsonEncoder(null, null);
    B.Level_0_all = new A.Level(0, "all");
    B.Level_10000_off = new A.Level(10000, "off");
    B.Level_1000_trace = new A.Level(1000, "trace");
    B.Level_5000_error = new A.Level(5000, "error");
    B.Level_9999_nothing = new A.Level(9999, "nothing");
    B.List_0_0 = A._setArrayType(makeConstList([0, 0]), type$.JSArray_int);
    B.List_2No = A._setArrayType(makeConstList([""]), type$.JSArray_String);
    B.List_8aB = A._setArrayType(makeConstList([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]), type$.JSArray_int);
    B.List_9Wx = A._setArrayType(makeConstList([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]), type$.JSArray_int);
    B.List_Cxl = A._setArrayType(makeConstList([619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 936, 638]), type$.JSArray_int);
    B.List_GZ8 = A._setArrayType(makeConstList([0, 79764919, 159529838, 222504665, 319059676, 398814059, 445009330, 507990021, 638119352, 583659535, 797628118, 726387553, 890018660, 835552979, 1015980042, 944750013, 1276238704, 1221641927, 1167319070, 1095957929, 1595256236, 1540665371, 1452775106, 1381403509, 1780037320, 1859660671, 1671105958, 1733955601, 2031960084, 2111593891, 1889500026, 1952343757, 2552477408, 2632100695, 2443283854, 2506133561, 2334638140, 2414271883, 2191915858, 2254759653, 3190512472, 3135915759, 3081330742, 3009969537, 2905550212, 2850959411, 2762807018, 2691435357, 3560074640, 3505614887, 3719321342, 3648080713, 3342211916, 3287746299, 3467911202, 3396681109, 4063920168, 4143685023, 4223187782, 4286162673, 3779000052, 3858754371, 3904687514, 3967668269, 881225847, 809987520, 1023691545, 969234094, 662832811, 591600412, 771767749, 717299826, 311336399, 374308984, 453813921, 533576470, 25881363, 88864420, 134795389, 214552010, 2023205639, 2086057648, 1897238633, 1976864222, 1804852699, 1867694188, 1645340341, 1724971778, 1587496639, 1516133128, 1461550545, 1406951526, 1302016099, 1230646740, 1142491917, 1087903418, 2896545431, 2825181984, 2770861561, 2716262478, 3215044683, 3143675388, 3055782693, 3001194130, 2326604591, 2389456536, 2200899649, 2280525302, 2578013683, 2640855108, 2418763421, 2498394922, 3769900519, 3832873040, 3912640137, 3992402750, 4088425275, 4151408268, 4197601365, 4277358050, 3334271071, 3263032808, 3476998961, 3422541446, 3585640067, 3514407732, 3694837229, 3640369242, 1762451694, 1842216281, 1619975040, 1682949687, 2047383090, 2127137669, 1938468188, 2001449195, 1325665622, 1271206113, 1183200824, 1111960463, 1543535498, 1489069629, 1434599652, 1363369299, 622672798, 568075817, 748617968, 677256519, 907627842, 853037301, 1067152940, 995781531, 51762726, 131386257, 177728840, 240578815, 269590778, 349224269, 429104020, 491947555, 4046411278, 4126034873, 4172115296, 4234965207, 3794477266, 3874110821, 3953728444, 4016571915, 3609705398, 3555108353, 3735388376, 3664026991, 3290680682, 3236090077, 3449943556, 3378572211, 3174993278, 3120533705, 3032266256, 2961025959, 2923101090, 2868635157, 2813903052, 2742672763, 2604032198, 2683796849, 2461293480, 2524268063, 2284983834, 2364738477, 2175806836, 2238787779, 1569362073, 1498123566, 1409854455, 1355396672, 1317987909, 1246755826, 1192025387, 1137557660, 2072149281, 2135122070, 1912620623, 1992383480, 1753615357, 1816598090, 1627664531, 1707420964, 295390185, 358241886, 404320391, 483945776, 43990325, 106832002, 186451547, 266083308, 932423249, 861060070, 1041341759, 986742920, 613929101, 542559546, 756411363, 701822548, 3316196985, 3244833742, 3425377559, 3370778784, 3601682597, 3530312978, 3744426955, 3689838204, 3819031489, 3881883254, 3928223919, 4007849240, 4037393693, 4100235434, 4180117107, 4259748804, 2310601993, 2373574846, 2151335527, 2231098320, 2596047829, 2659030626, 2470359227, 2550115596, 2947551409, 2876312838, 2788305887, 2733848168, 3165939309, 3094707162, 3040238851, 2985771188]), type$.JSArray_int);
    B.List_LjY = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]), type$.JSArray_int);
    B.List_O5O = A._setArrayType(makeConstList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), type$.JSArray_int);
    B.List_SMJ0 = A._setArrayType(makeConstList([23, 114, 69, 56, 80, 144]), type$.JSArray_int);
    B.List_SMJ = A._setArrayType(makeConstList([49, 65, 89, 38, 83, 89]), type$.JSArray_int);
    B.List_Sry = A._setArrayType(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255]), type$.JSArray_int);
    B.List_WZQ = A._setArrayType(makeConstList(["left", "right", "top", "bottom", "diagonal"]), type$.JSArray_String);
    B.List_Wv6 = A._setArrayType(makeConstList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]), type$.JSArray_int);
    B.List_YyJ = A._setArrayType(makeConstList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]), type$.JSArray_int);
    B.List_bh5 = A._setArrayType(makeConstList([1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145]), type$.JSArray_int);
    B.List_empty3 = A._setArrayType(makeConstList([]), type$.JSArray_Parser_dynamic);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_XmlAttribute);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_XmlNode);
    B.List_empty2 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_nullable_Object);
    B.List_kqe = A._setArrayType(makeConstList([1353184337, 1399144830, 3282310938, 2522752826, 3412831035, 4047871263, 2874735276, 2466505547, 1442459680, 4134368941, 2440481928, 625738485, 4242007375, 3620416197, 2151953702, 2409849525, 1230680542, 1729870373, 2551114309, 3787521629, 41234371, 317738113, 2744600205, 3338261355, 3881799427, 2510066197, 3950669247, 3663286933, 763608788, 3542185048, 694804553, 1154009486, 1787413109, 2021232372, 1799248025, 3715217703, 3058688446, 397248752, 1722556617, 3023752829, 407560035, 2184256229, 1613975959, 1165972322, 3765920945, 2226023355, 480281086, 2485848313, 1483229296, 436028815, 2272059028, 3086515026, 601060267, 3791801202, 1468997603, 715871590, 120122290, 63092015, 2591802758, 2768779219, 4068943920, 2997206819, 3127509762, 1552029421, 723308426, 2461301159, 4042393587, 2715969870, 3455375973, 3586000134, 526529745, 2331944644, 2639474228, 2689987490, 853641733, 1978398372, 971801355, 2867814464, 111112542, 1360031421, 4186579262, 1023860118, 2919579357, 1186850381, 3045938321, 90031217, 1876166148, 4279586912, 620468249, 2548678102, 3426959497, 2006899047, 3175278768, 2290845959, 945494503, 3689859193, 1191869601, 3910091388, 3374220536, 0, 2206629897, 1223502642, 2893025566, 1316117100, 4227796733, 1446544655, 517320253, 658058550, 1691946762, 564550760, 3511966619, 976107044, 2976320012, 266819475, 3533106868, 2660342555, 1338359936, 2720062561, 1766553434, 370807324, 179999714, 3844776128, 1138762300, 488053522, 185403662, 2915535858, 3114841645, 3366526484, 2233069911, 1275557295, 3151862254, 4250959779, 2670068215, 3170202204, 3309004356, 880737115, 1982415755, 3703972811, 1761406390, 1676797112, 3403428311, 277177154, 1076008723, 538035844, 2099530373, 4164795346, 288553390, 1839278535, 1261411869, 4080055004, 3964831245, 3504587127, 1813426987, 2579067049, 4199060497, 577038663, 3297574056, 440397984, 3626794326, 4019204898, 3343796615, 3251714265, 4272081548, 906744984, 3481400742, 685669029, 646887386, 2764025151, 3835509292, 227702864, 2613862250, 1648787028, 3256061430, 3904428176, 1593260334, 4121936770, 3196083615, 2090061929, 2838353263, 3004310991, 999926984, 2809993232, 1852021992, 2075868123, 158869197, 4095236462, 28809964, 2828685187, 1701746150, 2129067946, 147831841, 3873969647, 3650873274, 3459673930, 3557400554, 3598495785, 2947720241, 824393514, 815048134, 3227951669, 935087732, 2798289660, 2966458592, 366520115, 1251476721, 4158319681, 240176511, 804688151, 2379631990, 1303441219, 1414376140, 3741619940, 3820343710, 461924940, 3089050817, 2136040774, 82468509, 1563790337, 1937016826, 776014843, 1511876531, 1389550482, 861278441, 323475053, 2355222426, 2047648055, 2383738969, 2302415851, 3995576782, 902390199, 3991215329, 1018251130, 1507840668, 1064563285, 2043548696, 3208103795, 3939366739, 1537932639, 342834655, 2262516856, 2180231114, 1053059257, 741614648, 1598071746, 1925389590, 203809468, 2336832552, 1100287487, 1895934009, 3736275976, 2632234200, 2428589668, 1636092795, 1890988757, 1952214088, 1113045200]), type$.JSArray_int);
    B.List_lnn0 = A._setArrayType(makeConstList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), type$.JSArray_int);
    B.List_lnn = A._setArrayType(makeConstList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), type$.JSArray_int);
    B.List_mlp = A._setArrayType(makeConstList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]), type$.JSArray_int);
    B.List_ouN = A._setArrayType(makeConstList([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648]), type$.JSArray_int);
    B.List_oyU = A._setArrayType(makeConstList([2774754246, 2222750968, 2574743534, 2373680118, 234025727, 3177933782, 2976870366, 1422247313, 1345335392, 50397442, 2842126286, 2099981142, 436141799, 1658312629, 3870010189, 2591454956, 1170918031, 2642575903, 1086966153, 2273148410, 368769775, 3948501426, 3376891790, 200339707, 3970805057, 1742001331, 4255294047, 3937382213, 3214711843, 4154762323, 2524082916, 1539358875, 3266819957, 486407649, 2928907069, 1780885068, 1513502316, 1094664062, 49805301, 1338821763, 1546925160, 4104496465, 887481809, 150073849, 2473685474, 1943591083, 1395732834, 1058346282, 201589768, 1388824469, 1696801606, 1589887901, 672667696, 2711000631, 251987210, 3046808111, 151455502, 907153956, 2608889883, 1038279391, 652995533, 1764173646, 3451040383, 2675275242, 453576978, 2659418909, 1949051992, 773462580, 756751158, 2993581788, 3998898868, 4221608027, 4132590244, 1295727478, 1641469623, 3467883389, 2066295122, 1055122397, 1898917726, 2542044179, 4115878822, 1758581177, 0, 753790401, 1612718144, 536673507, 3367088505, 3982187446, 3194645204, 1187761037, 3653156455, 1262041458, 3729410708, 3561770136, 3898103984, 1255133061, 1808847035, 720367557, 3853167183, 385612781, 3309519750, 3612167578, 1429418854, 2491778321, 3477423498, 284817897, 100794884, 2172616702, 4031795360, 1144798328, 3131023141, 3819481163, 4082192802, 4272137053, 3225436288, 2324664069, 2912064063, 3164445985, 1211644016, 83228145, 3753688163, 3249976951, 1977277103, 1663115586, 806359072, 452984805, 250868733, 1842533055, 1288555905, 336333848, 890442534, 804056259, 3781124030, 2727843637, 3427026056, 957814574, 1472513171, 4071073621, 2189328124, 1195195770, 2892260552, 3881655738, 723065138, 2507371494, 2690670784, 2558624025, 3511635870, 2145180835, 1713513028, 2116692564, 2878378043, 2206763019, 3393603212, 703524551, 3552098411, 1007948840, 2044649127, 3797835452, 487262998, 1994120109, 1004593371, 1446130276, 1312438900, 503974420, 3679013266, 168166924, 1814307912, 3831258296, 1573044895, 1859376061, 4021070915, 2791465668, 2828112185, 2761266481, 937747667, 2339994098, 854058965, 1137232011, 1496790894, 3077402074, 2358086913, 1691735473, 3528347292, 3769215305, 3027004632, 4199962284, 133494003, 636152527, 2942657994, 2390391540, 3920539207, 403179536, 3585784431, 2289596656, 1864705354, 1915629148, 605822008, 4054230615, 3350508659, 1371981463, 602466507, 2094914977, 2624877800, 555687742, 3712699286, 3703422305, 2257292045, 2240449039, 2423288032, 1111375484, 3300242801, 2858837708, 3628615824, 84083462, 32962295, 302911004, 2741068226, 1597322602, 4183250862, 3501832553, 2441512471, 1489093017, 656219450, 3114180135, 954327513, 335083755, 3013122091, 856756514, 3144247762, 1893325225, 2307821063, 2811532339, 3063651117, 572399164, 2458355477, 552200649, 1238290055, 4283782570, 2015897680, 2061492133, 2408352771, 4171342169, 2156497161, 386731290, 3669999461, 837215959, 3326231172, 3093850320, 3275833730, 2962856233, 1999449434, 286199582, 3417354363, 4233385128, 3602627437, 974525996]), type$.JSArray_int);
    B.BorderStyle_DashDot = new A.BorderStyle("DashDot");
    B.BorderStyle_DashDotDot = new A.BorderStyle("DashDotDot");
    B.BorderStyle_Dashed = new A.BorderStyle("Dashed");
    B.BorderStyle_Dotted = new A.BorderStyle("Dotted");
    B.BorderStyle_Double = new A.BorderStyle("Double");
    B.BorderStyle_Hair = new A.BorderStyle("Hair");
    B.BorderStyle_Medium = new A.BorderStyle("Medium");
    B.BorderStyle_MediumDashDot = new A.BorderStyle("MediumDashDot");
    B.BorderStyle_MediumDashDotDot = new A.BorderStyle("MediumDashDotDot");
    B.BorderStyle_MediumDashed = new A.BorderStyle("MediumDashed");
    B.BorderStyle_SlantDashDot = new A.BorderStyle("SlantDashDot");
    B.BorderStyle_Thick = new A.BorderStyle("Thick");
    B.BorderStyle_Thin = new A.BorderStyle("Thin");
    B.List_qtW = A._setArrayType(makeConstList([B.BorderStyle_None, B.BorderStyle_DashDot, B.BorderStyle_DashDotDot, B.BorderStyle_Dashed, B.BorderStyle_Dotted, B.BorderStyle_Double, B.BorderStyle_Hair, B.BorderStyle_Medium, B.BorderStyle_MediumDashDot, B.BorderStyle_MediumDashDotDot, B.BorderStyle_MediumDashed, B.BorderStyle_SlantDashDot, B.BorderStyle_Thick, B.BorderStyle_Thin]), A.findType("JSArray<BorderStyle>"));
    B.List_s8I = A._setArrayType(makeConstList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]), type$.JSArray_int);
    B.StandardNumericNumFormat_0_General = new A.StandardNumericNumFormat(0, "General");
    B.StandardNumericNumFormat_Jqe = new A.StandardNumericNumFormat(1, "0");
    B.StandardNumericNumFormat_PLF = new A.StandardNumericNumFormat(2, "0.00");
    B.StandardNumericNumFormat_wO7 = new A.StandardNumericNumFormat(3, "#,##0");
    B.StandardNumericNumFormat_4e8 = new A.StandardNumericNumFormat(4, "#,##0.00");
    B.StandardNumericNumFormat_7N7 = new A.StandardNumericNumFormat(9, "0%");
    B.StandardNumericNumFormat_myU = new A.StandardNumericNumFormat(10, "0.00%");
    B.StandardNumericNumFormat_Key = new A.StandardNumericNumFormat(11, "0.00E+00");
    B.StandardNumericNumFormat_9ed = new A.StandardNumericNumFormat(12, "# ?/?");
    B.StandardNumericNumFormat_pd4 = new A.StandardNumericNumFormat(13, "# ??/??");
    B.StandardDateTimeNumFormat_8aB = new A.StandardDateTimeNumFormat(14, "mm-dd-yy");
    B.StandardDateTimeNumFormat_1R8 = new A.StandardDateTimeNumFormat(15, "d-mmm-yy");
    B.StandardDateTimeNumFormat_gsm = new A.StandardDateTimeNumFormat(16, "d-mmm");
    B.StandardDateTimeNumFormat_gkc = new A.StandardDateTimeNumFormat(17, "mmm-yy");
    B.StandardTimeNumFormat_Azp = new A.StandardTimeNumFormat(18, "h:mm AM/PM");
    B.StandardTimeNumFormat_CIA = new A.StandardTimeNumFormat(19, "h:mm:ss AM/PM");
    B.StandardTimeNumFormat_QoF = new A.StandardTimeNumFormat(20, "h:mm");
    B.StandardTimeNumFormat_mHo = new A.StandardTimeNumFormat(21, "h:mm:dd");
    B.StandardDateTimeNumFormat_s2S = new A.StandardDateTimeNumFormat(22, "m/d/yy h:mm");
    B.StandardNumericNumFormat_Ism = new A.StandardNumericNumFormat(37, "#,##0 ;(#,##0)");
    B.StandardNumericNumFormat_peX = new A.StandardNumericNumFormat(38, "#,##0 ;[Red](#,##0)");
    B.StandardNumericNumFormat_Cdv = new A.StandardNumericNumFormat(39, "#,##0.00;(#,##0.00)");
    B.StandardNumericNumFormat_1Q3 = new A.StandardNumericNumFormat(40, "#,##0.00;[Red](#,#)");
    B.StandardTimeNumFormat_4OZ = new A.StandardTimeNumFormat(45, "mm:ss");
    B.StandardTimeNumFormat_WuJ = new A.StandardTimeNumFormat(46, "[h]:mm:ss");
    B.StandardTimeNumFormat_aK5 = new A.StandardTimeNumFormat(47, "mmss.0");
    B.StandardNumericNumFormat_oGx = new A.StandardNumericNumFormat(48, "##0.0");
    B.StandardNumericNumFormat_Asa = new A.StandardNumericNumFormat(49, "@");
    B.Map_2rkmH = new A.GeneralConstantMap([0, B.StandardNumericNumFormat_0_General, 1, B.StandardNumericNumFormat_Jqe, 2, B.StandardNumericNumFormat_PLF, 3, B.StandardNumericNumFormat_wO7, 4, B.StandardNumericNumFormat_4e8, 9, B.StandardNumericNumFormat_7N7, 10, B.StandardNumericNumFormat_myU, 11, B.StandardNumericNumFormat_Key, 12, B.StandardNumericNumFormat_9ed, 13, B.StandardNumericNumFormat_pd4, 14, B.StandardDateTimeNumFormat_8aB, 15, B.StandardDateTimeNumFormat_1R8, 16, B.StandardDateTimeNumFormat_gsm, 17, B.StandardDateTimeNumFormat_gkc, 18, B.StandardTimeNumFormat_Azp, 19, B.StandardTimeNumFormat_CIA, 20, B.StandardTimeNumFormat_QoF, 21, B.StandardTimeNumFormat_mHo, 22, B.StandardDateTimeNumFormat_s2S, 37, B.StandardNumericNumFormat_Ism, 38, B.StandardNumericNumFormat_peX, 39, B.StandardNumericNumFormat_Cdv, 40, B.StandardNumericNumFormat_1Q3, 45, B.StandardTimeNumFormat_4OZ, 46, B.StandardTimeNumFormat_WuJ, 47, B.StandardTimeNumFormat_aK5, 48, B.StandardNumericNumFormat_oGx, 49, B.StandardNumericNumFormat_Asa], A.findType("GeneralConstantMap<int,NumFormat>"));
    B.Map_SMmtc = new A.GeneralConstantMap([10, "A", 11, "B", 12, "C", 13, "D", 14, "E", 15, "F"], A.findType("GeneralConstantMap<int,String>"));
    B.Object_empty = {};
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<Symbol0,@>"));
    B.XmlAttributeType_2x0 = new A.XmlAttributeType('"', "DOUBLE_QUOTE");
    B.Record2_8aB = new A._Record_2("", B.XmlAttributeType_2x0);
    B.XmlNodeType_0 = new A.XmlNodeType("ATTRIBUTE");
    B.Set_9UGP6 = new A.GeneralConstantSet([B.XmlNodeType_0], type$.GeneralConstantSet_XmlNodeType);
    B.XmlNodeType_1 = new A.XmlNodeType("CDATA");
    B.XmlNodeType_2 = new A.XmlNodeType("COMMENT");
    B.XmlNodeType_7 = new A.XmlNodeType("ELEMENT");
    B.XmlNodeType_10 = new A.XmlNodeType("PROCESSING");
    B.XmlNodeType_11 = new A.XmlNodeType("TEXT");
    B.Set_HXHD4 = new A.GeneralConstantSet([B.XmlNodeType_1, B.XmlNodeType_2, B.XmlNodeType_7, B.XmlNodeType_10, B.XmlNodeType_11], type$.GeneralConstantSet_XmlNodeType);
    B.XmlNodeType_3 = new A.XmlNodeType("DECLARATION");
    B.XmlNodeType_4 = new A.XmlNodeType("DOCUMENT_TYPE");
    B.Set_uHvy = new A.GeneralConstantSet([B.XmlNodeType_1, B.XmlNodeType_2, B.XmlNodeType_3, B.XmlNodeType_4, B.XmlNodeType_7, B.XmlNodeType_10, B.XmlNodeType_11], type$.GeneralConstantSet_XmlNodeType);
    B.Symbol__throwNoParent = new A.Symbol("_throwNoParent");
    B.Symbol_call = new A.Symbol("call");
    B.TextWrapping_0 = new A.TextWrapping("WrapText");
    B.TextWrapping_1 = new A.TextWrapping("Clip");
    B.TimeCellValue_vhV = new A.TimeCellValue(0, 0, 0, 0, 0);
    B.Type_ByteBuffer_EOZ = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_mF8 = A.typeLiteral("ByteData");
    B.Type_Float32List_Ymk = A.typeLiteral("Float32List");
    B.Type_Float64List_Ymk = A.typeLiteral("Float64List");
    B.Type_Int16List_cot = A.typeLiteral("Int16List");
    B.Type_Int32List_m1p = A.typeLiteral("Int32List");
    B.Type_Int8List_woc = A.typeLiteral("Int8List");
    B.Type_JSObject_0ua = A.typeLiteral("JSObject");
    B.Type_Object_QJv = A.typeLiteral("Object");
    B.Type_Uint16List_2mh = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2mh = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_9Bb = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_CSc = A.typeLiteral("Uint8List");
    B.Underline_0 = new A.Underline("None");
    B.Underline_1 = new A.Underline("Single");
    B.Underline_2 = new A.Underline("Double");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.VerticalAlign_0 = new A.VerticalAlign("Top");
    B.VerticalAlign_1 = new A.VerticalAlign("Center");
    B.VerticalAlign_2 = new A.VerticalAlign("Bottom");
    B.XmlAttributeType_3h3 = new A.XmlAttributeType("'", "SINGLE_QUOTE");
    B.XmlNodeType_5 = new A.XmlNodeType("DOCUMENT");
    B.XmlNodeType_6 = new A.XmlNodeType("DOCUMENT_FRAGMENT");
    B._StringStackTrace_uwd = new A._StringStackTrace("");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $._mask32HiBits = A._setArrayType([4294967295, 2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303, 2097151, 1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0], type$.JSArray_int);
    $.EquatableConfig__stringify = null;
    $._$X__impl = null;
    $.Logger__logCallbacks = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("~(LogEvent)"));
    $.Logger__outputCallbacks = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("~(OutputEvent)"));
    $.Squadron__converterChangeHandlers = A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_QJv));
    _lazyFinal($, "BZip2_emptyUint8List", "$get$BZip2_emptyUint8List", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "BZip2_emptyInt32List", "$get$BZip2_emptyInt32List", () => A.NativeInt32List_NativeInt32List(0));
    _lazyFinal($, "_hexTableReverse", "$get$_hexTableReverse", () => B.Map_SMmtc.map$2$1(0, new A._hexTableReverse_closure(), type$.String, type$.int));
    _lazyFinal($, "Token__newlineParser", "$get$Token__newlineParser", () => new A.NewlineParser("newline expected"));
    _lazyFinal($, "_single", "$get$_single", () => A.MapParserExtension_map(A.any(), new A._single_closure(), false, type$.String, type$.RangeCharPredicate));
    _lazyFinal($, "_range", "$get$_range", () => {
      var t1 = type$.String;
      return A.RecordParserExtension3_map3(A.SequenceParser3$(A.any(), A.char("-", null), A.any(), t1, t1, t1), new A._range_closure(), t1, t1, t1, type$.RangeCharPredicate);
    });
    _lazyFinal($, "_sequence", "$get$_sequence", () => {
      var t1 = type$.RangeCharPredicate;
      return A.MapParserExtension_map(A.PossessiveRepeatingParserExtension_star(A.ChoiceIterableExtension_toChoiceParser(A._setArrayType([$.$get$_range(), $.$get$_single()], A.findType("JSArray<Parser0<RangeCharPredicate>>")), null, t1), t1), A.optimize__optimizedRanges$closure(), false, A.findType("List<RangeCharPredicate>"), type$.CharacterPredicate);
    });
    _lazyFinal($, "_pattern", "$get$_pattern", () => {
      var t1 = type$.nullable_String,
        t2 = type$.CharacterPredicate;
      return A.RecordParserExtension2_map2(A.SequenceParser2$(A.OptionalParserExtension_optional(A.char("^", null), type$.String), $.$get$_sequence(), t1, t2), new A._pattern_closure(), t1, t2, t2);
    });
    _lazyFinal($, "_$JSProps_data", "$get$_$JSProps_data", () => "data");
    _lazyFinal($, "_$JSProps_next", "$get$_$JSProps_next", () => "next");
    _lazyFinal($, "_$JSProps_done", "$get$_$JSProps_done", () => "done");
    _lazyFinal($, "_$JSProps_value", "$get$_$JSProps_value", () => "value");
    _lazyFinal($, "_latestUPDEpoch", "$get$_latestUPDEpoch", () => A.DateTime$utc(2020, 2, 2, 0, 0, 0, 0, 0));
    _lazyFinal($, "Squadron__platformConverter", "$get$Squadron__platformConverter", () => B.C_CastConverter);
    _lazy($, "Squadron__converter", "$get$Squadron__converter", () => $.$get$Squadron__platformConverter());
    _lazyFinal($, "CancelationTokenReference_noToken", "$get$CancelationTokenReference_noToken", () => {
      var t1 = new A.CancelationTokenReference("", A.Completer_Completer(type$.SquadronCanceledException), false);
      t1._refCount = 1;
      return t1;
    });
    _lazyFinal($, "_textPattern", "$get$_textPattern", () => A.RegExp_RegExp("[&<\\u0001-\\u0008\\u000b\\u000c\\u000e-\\u001f\\u007f-\\u0084\\u0086-\\u009f]|]]>", true));
    _lazyFinal($, "_singeQuoteAttributePattern", "$get$_singeQuoteAttributePattern", () => A.RegExp_RegExp("['&<\\n\\r\\t\\u0001-\\u0008\\u000b\\u000c\\u000e-\\u001f\\u007f-\\u0084\\u0086-\\u009f]", true));
    _lazyFinal($, "_doubleQuoteAttributePattern", "$get$_doubleQuoteAttributePattern", () => A.RegExp_RegExp('["&<\\n\\r\\t\\u0001-\\u0008\\u000b\\u000c\\u000e-\\u001f\\u007f-\\u0084\\u0086-\\u009f]', true));
    _lazyFinal($, "eventParserCache", "$get$eventParserCache", () => new A.XmlCache(new A.eventParserCache_closure(), 5, A.LinkedHashMap_LinkedHashMap$_empty(type$.XmlEntityMapping, A.findType("Parser0<XmlEvent>")), A.findType("XmlCache<XmlEntityMapping,Parser0<XmlEvent>>")));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({WebGL: J.Interceptor, AbortPaymentEvent: J.JavaScriptObject, AnimationEffectReadOnly: J.JavaScriptObject, AnimationEffectTiming: J.JavaScriptObject, AnimationEffectTimingReadOnly: J.JavaScriptObject, AnimationEvent: J.JavaScriptObject, AnimationPlaybackEvent: J.JavaScriptObject, AnimationTimeline: J.JavaScriptObject, AnimationWorkletGlobalScope: J.JavaScriptObject, ApplicationCacheErrorEvent: J.JavaScriptObject, AuthenticatorAssertionResponse: J.JavaScriptObject, AuthenticatorAttestationResponse: J.JavaScriptObject, AuthenticatorResponse: J.JavaScriptObject, BackgroundFetchClickEvent: J.JavaScriptObject, BackgroundFetchEvent: J.JavaScriptObject, BackgroundFetchFailEvent: J.JavaScriptObject, BackgroundFetchFetch: J.JavaScriptObject, BackgroundFetchManager: J.JavaScriptObject, BackgroundFetchSettledFetch: J.JavaScriptObject, BackgroundFetchedEvent: J.JavaScriptObject, BarProp: J.JavaScriptObject, BarcodeDetector: J.JavaScriptObject, BeforeInstallPromptEvent: J.JavaScriptObject, BeforeUnloadEvent: J.JavaScriptObject, BlobEvent: J.JavaScriptObject, BluetoothRemoteGATTDescriptor: J.JavaScriptObject, Body: J.JavaScriptObject, BudgetState: J.JavaScriptObject, CacheStorage: J.JavaScriptObject, CanMakePaymentEvent: J.JavaScriptObject, CanvasGradient: J.JavaScriptObject, CanvasPattern: J.JavaScriptObject, CanvasRenderingContext2D: J.JavaScriptObject, Client: J.JavaScriptObject, Clients: J.JavaScriptObject, ClipboardEvent: J.JavaScriptObject, CloseEvent: J.JavaScriptObject, CompositionEvent: J.JavaScriptObject, CookieStore: J.JavaScriptObject, Coordinates: J.JavaScriptObject, Credential: J.JavaScriptObject, CredentialUserData: J.JavaScriptObject, CredentialsContainer: J.JavaScriptObject, Crypto: J.JavaScriptObject, CryptoKey: J.JavaScriptObject, CSS: J.JavaScriptObject, CSSVariableReferenceValue: J.JavaScriptObject, CustomElementRegistry: J.JavaScriptObject, CustomEvent: J.JavaScriptObject, DataTransfer: J.JavaScriptObject, DataTransferItem: J.JavaScriptObject, DeprecatedStorageInfo: J.JavaScriptObject, DeprecatedStorageQuota: J.JavaScriptObject, DeprecationReport: J.JavaScriptObject, DetectedBarcode: J.JavaScriptObject, DetectedFace: J.JavaScriptObject, DetectedText: J.JavaScriptObject, DeviceAcceleration: J.JavaScriptObject, DeviceMotionEvent: J.JavaScriptObject, DeviceOrientationEvent: J.JavaScriptObject, DeviceRotationRate: J.JavaScriptObject, DirectoryEntry: J.JavaScriptObject, webkitFileSystemDirectoryEntry: J.JavaScriptObject, FileSystemDirectoryEntry: J.JavaScriptObject, DirectoryReader: J.JavaScriptObject, WebKitDirectoryReader: J.JavaScriptObject, webkitFileSystemDirectoryReader: J.JavaScriptObject, FileSystemDirectoryReader: J.JavaScriptObject, DocumentOrShadowRoot: J.JavaScriptObject, DocumentTimeline: J.JavaScriptObject, DOMError: J.JavaScriptObject, DOMImplementation: J.JavaScriptObject, Iterator: J.JavaScriptObject, DOMMatrix: J.JavaScriptObject, DOMMatrixReadOnly: J.JavaScriptObject, DOMParser: J.JavaScriptObject, DOMPoint: J.JavaScriptObject, DOMPointReadOnly: J.JavaScriptObject, DOMQuad: J.JavaScriptObject, DOMStringMap: J.JavaScriptObject, Entry: J.JavaScriptObject, webkitFileSystemEntry: J.JavaScriptObject, FileSystemEntry: J.JavaScriptObject, ErrorEvent: J.JavaScriptObject, Event: J.JavaScriptObject, InputEvent: J.JavaScriptObject, SubmitEvent: J.JavaScriptObject, ExtendableEvent: J.JavaScriptObject, ExtendableMessageEvent: J.JavaScriptObject, External: J.JavaScriptObject, FaceDetector: J.JavaScriptObject, FederatedCredential: J.JavaScriptObject, FetchEvent: J.JavaScriptObject, FileEntry: J.JavaScriptObject, webkitFileSystemFileEntry: J.JavaScriptObject, FileSystemFileEntry: J.JavaScriptObject, DOMFileSystem: J.JavaScriptObject, WebKitFileSystem: J.JavaScriptObject, webkitFileSystem: J.JavaScriptObject, FileSystem: J.JavaScriptObject, FocusEvent: J.JavaScriptObject, FontFace: J.JavaScriptObject, FontFaceSetLoadEvent: J.JavaScriptObject, FontFaceSource: J.JavaScriptObject, ForeignFetchEvent: J.JavaScriptObject, FormData: J.JavaScriptObject, GamepadButton: J.JavaScriptObject, GamepadEvent: J.JavaScriptObject, GamepadPose: J.JavaScriptObject, Geolocation: J.JavaScriptObject, Position: J.JavaScriptObject, GeolocationPosition: J.JavaScriptObject, HashChangeEvent: J.JavaScriptObject, Headers: J.JavaScriptObject, HTMLHyperlinkElementUtils: J.JavaScriptObject, IdleDeadline: J.JavaScriptObject, ImageBitmap: J.JavaScriptObject, ImageBitmapRenderingContext: J.JavaScriptObject, ImageCapture: J.JavaScriptObject, ImageData: J.JavaScriptObject, InputDeviceCapabilities: J.JavaScriptObject, InstallEvent: J.JavaScriptObject, IntersectionObserver: J.JavaScriptObject, IntersectionObserverEntry: J.JavaScriptObject, InterventionReport: J.JavaScriptObject, KeyboardEvent: J.JavaScriptObject, KeyframeEffect: J.JavaScriptObject, KeyframeEffectReadOnly: J.JavaScriptObject, MediaCapabilities: J.JavaScriptObject, MediaCapabilitiesInfo: J.JavaScriptObject, MediaDeviceInfo: J.JavaScriptObject, MediaEncryptedEvent: J.JavaScriptObject, MediaError: J.JavaScriptObject, MediaKeyMessageEvent: J.JavaScriptObject, MediaKeyStatusMap: J.JavaScriptObject, MediaKeySystemAccess: J.JavaScriptObject, MediaKeys: J.JavaScriptObject, MediaKeysPolicy: J.JavaScriptObject, MediaMetadata: J.JavaScriptObject, MediaQueryListEvent: J.JavaScriptObject, MediaSession: J.JavaScriptObject, MediaSettingsRange: J.JavaScriptObject, MediaStreamEvent: J.JavaScriptObject, MediaStreamTrackEvent: J.JavaScriptObject, MemoryInfo: J.JavaScriptObject, MessageChannel: J.JavaScriptObject, MessageEvent: J.JavaScriptObject, Metadata: J.JavaScriptObject, MIDIConnectionEvent: J.JavaScriptObject, MIDIMessageEvent: J.JavaScriptObject, MouseEvent: J.JavaScriptObject, DragEvent: J.JavaScriptObject, MutationEvent: J.JavaScriptObject, MutationObserver: J.JavaScriptObject, WebKitMutationObserver: J.JavaScriptObject, MutationRecord: J.JavaScriptObject, NavigationPreloadManager: J.JavaScriptObject, Navigator: J.JavaScriptObject, NavigatorAutomationInformation: J.JavaScriptObject, NavigatorConcurrentHardware: J.JavaScriptObject, NavigatorCookies: J.JavaScriptObject, NavigatorUserMediaError: J.JavaScriptObject, NodeFilter: J.JavaScriptObject, NodeIterator: J.JavaScriptObject, NonDocumentTypeChildNode: J.JavaScriptObject, NonElementParentNode: J.JavaScriptObject, NoncedElement: J.JavaScriptObject, NotificationEvent: J.JavaScriptObject, OffscreenCanvasRenderingContext2D: J.JavaScriptObject, OverconstrainedError: J.JavaScriptObject, PageTransitionEvent: J.JavaScriptObject, PaintRenderingContext2D: J.JavaScriptObject, PaintSize: J.JavaScriptObject, PaintWorkletGlobalScope: J.JavaScriptObject, PasswordCredential: J.JavaScriptObject, Path2D: J.JavaScriptObject, PaymentAddress: J.JavaScriptObject, PaymentInstruments: J.JavaScriptObject, PaymentManager: J.JavaScriptObject, PaymentRequestEvent: J.JavaScriptObject, PaymentRequestUpdateEvent: J.JavaScriptObject, PaymentResponse: J.JavaScriptObject, PerformanceEntry: J.JavaScriptObject, PerformanceLongTaskTiming: J.JavaScriptObject, PerformanceMark: J.JavaScriptObject, PerformanceMeasure: J.JavaScriptObject, PerformanceNavigation: J.JavaScriptObject, PerformanceNavigationTiming: J.JavaScriptObject, PerformanceObserver: J.JavaScriptObject, PerformanceObserverEntryList: J.JavaScriptObject, PerformancePaintTiming: J.JavaScriptObject, PerformanceResourceTiming: J.JavaScriptObject, PerformanceServerTiming: J.JavaScriptObject, PerformanceTiming: J.JavaScriptObject, Permissions: J.JavaScriptObject, PhotoCapabilities: J.JavaScriptObject, PointerEvent: J.JavaScriptObject, PopStateEvent: J.JavaScriptObject, PositionError: J.JavaScriptObject, GeolocationPositionError: J.JavaScriptObject, Presentation: J.JavaScriptObject, PresentationConnectionAvailableEvent: J.JavaScriptObject, PresentationConnectionCloseEvent: J.JavaScriptObject, PresentationReceiver: J.JavaScriptObject, ProgressEvent: J.JavaScriptObject, PromiseRejectionEvent: J.JavaScriptObject, PublicKeyCredential: J.JavaScriptObject, PushEvent: J.JavaScriptObject, PushManager: J.JavaScriptObject, PushMessageData: J.JavaScriptObject, PushSubscription: J.JavaScriptObject, PushSubscriptionOptions: J.JavaScriptObject, Range: J.JavaScriptObject, RelatedApplication: J.JavaScriptObject, ReportBody: J.JavaScriptObject, ReportingObserver: J.JavaScriptObject, ResizeObserver: J.JavaScriptObject, ResizeObserverEntry: J.JavaScriptObject, RTCCertificate: J.JavaScriptObject, RTCDataChannelEvent: J.JavaScriptObject, RTCDTMFToneChangeEvent: J.JavaScriptObject, RTCIceCandidate: J.JavaScriptObject, mozRTCIceCandidate: J.JavaScriptObject, RTCLegacyStatsReport: J.JavaScriptObject, RTCPeerConnectionIceEvent: J.JavaScriptObject, RTCRtpContributingSource: J.JavaScriptObject, RTCRtpReceiver: J.JavaScriptObject, RTCRtpSender: J.JavaScriptObject, RTCSessionDescription: J.JavaScriptObject, mozRTCSessionDescription: J.JavaScriptObject, RTCStatsResponse: J.JavaScriptObject, RTCTrackEvent: J.JavaScriptObject, Screen: J.JavaScriptObject, ScrollState: J.JavaScriptObject, ScrollTimeline: J.JavaScriptObject, SecurityPolicyViolationEvent: J.JavaScriptObject, Selection: J.JavaScriptObject, SensorErrorEvent: J.JavaScriptObject, SharedArrayBuffer: J.JavaScriptObject, SpeechRecognitionAlternative: J.JavaScriptObject, SpeechRecognitionError: J.JavaScriptObject, SpeechRecognitionEvent: J.JavaScriptObject, SpeechSynthesisEvent: J.JavaScriptObject, SpeechSynthesisVoice: J.JavaScriptObject, StaticRange: J.JavaScriptObject, StorageEvent: J.JavaScriptObject, StorageManager: J.JavaScriptObject, StyleMedia: J.JavaScriptObject, StylePropertyMap: J.JavaScriptObject, StylePropertyMapReadonly: J.JavaScriptObject, SyncEvent: J.JavaScriptObject, SyncManager: J.JavaScriptObject, TaskAttributionTiming: J.JavaScriptObject, TextDetector: J.JavaScriptObject, TextEvent: J.JavaScriptObject, TextMetrics: J.JavaScriptObject, TouchEvent: J.JavaScriptObject, TrackDefault: J.JavaScriptObject, TrackEvent: J.JavaScriptObject, TransitionEvent: J.JavaScriptObject, WebKitTransitionEvent: J.JavaScriptObject, TreeWalker: J.JavaScriptObject, TrustedHTML: J.JavaScriptObject, TrustedScriptURL: J.JavaScriptObject, TrustedURL: J.JavaScriptObject, UIEvent: J.JavaScriptObject, UnderlyingSourceBase: J.JavaScriptObject, URLSearchParams: J.JavaScriptObject, VRCoordinateSystem: J.JavaScriptObject, VRDeviceEvent: J.JavaScriptObject, VRDisplayCapabilities: J.JavaScriptObject, VRDisplayEvent: J.JavaScriptObject, VREyeParameters: J.JavaScriptObject, VRFrameData: J.JavaScriptObject, VRFrameOfReference: J.JavaScriptObject, VRPose: J.JavaScriptObject, VRSessionEvent: J.JavaScriptObject, VRStageBounds: J.JavaScriptObject, VRStageBoundsPoint: J.JavaScriptObject, VRStageParameters: J.JavaScriptObject, ValidityState: J.JavaScriptObject, VideoPlaybackQuality: J.JavaScriptObject, VideoTrack: J.JavaScriptObject, VTTRegion: J.JavaScriptObject, WheelEvent: J.JavaScriptObject, WindowClient: J.JavaScriptObject, WorkletAnimation: J.JavaScriptObject, WorkletGlobalScope: J.JavaScriptObject, XPathEvaluator: J.JavaScriptObject, XPathExpression: J.JavaScriptObject, XPathNSResolver: J.JavaScriptObject, XPathResult: J.JavaScriptObject, XMLSerializer: J.JavaScriptObject, XSLTProcessor: J.JavaScriptObject, Bluetooth: J.JavaScriptObject, BluetoothCharacteristicProperties: J.JavaScriptObject, BluetoothRemoteGATTServer: J.JavaScriptObject, BluetoothRemoteGATTService: J.JavaScriptObject, BluetoothUUID: J.JavaScriptObject, BudgetService: J.JavaScriptObject, Cache: J.JavaScriptObject, DOMFileSystemSync: J.JavaScriptObject, DirectoryEntrySync: J.JavaScriptObject, DirectoryReaderSync: J.JavaScriptObject, EntrySync: J.JavaScriptObject, FileEntrySync: J.JavaScriptObject, FileReaderSync: J.JavaScriptObject, FileWriterSync: J.JavaScriptObject, HTMLAllCollection: J.JavaScriptObject, Mojo: J.JavaScriptObject, MojoHandle: J.JavaScriptObject, MojoInterfaceRequestEvent: J.JavaScriptObject, MojoWatcher: J.JavaScriptObject, NFC: J.JavaScriptObject, PagePopupController: J.JavaScriptObject, Report: J.JavaScriptObject, Request: J.JavaScriptObject, ResourceProgressEvent: J.JavaScriptObject, Response: J.JavaScriptObject, SubtleCrypto: J.JavaScriptObject, USBAlternateInterface: J.JavaScriptObject, USBConfiguration: J.JavaScriptObject, USBConnectionEvent: J.JavaScriptObject, USBDevice: J.JavaScriptObject, USBEndpoint: J.JavaScriptObject, USBInTransferResult: J.JavaScriptObject, USBInterface: J.JavaScriptObject, USBIsochronousInTransferPacket: J.JavaScriptObject, USBIsochronousInTransferResult: J.JavaScriptObject, USBIsochronousOutTransferPacket: J.JavaScriptObject, USBIsochronousOutTransferResult: J.JavaScriptObject, USBOutTransferResult: J.JavaScriptObject, WorkerLocation: J.JavaScriptObject, WorkerNavigator: J.JavaScriptObject, Worklet: J.JavaScriptObject, IDBCursor: J.JavaScriptObject, IDBCursorWithValue: J.JavaScriptObject, IDBFactory: J.JavaScriptObject, IDBIndex: J.JavaScriptObject, IDBKeyRange: J.JavaScriptObject, IDBObjectStore: J.JavaScriptObject, IDBObservation: J.JavaScriptObject, IDBObserver: J.JavaScriptObject, IDBObserverChanges: J.JavaScriptObject, IDBVersionChangeEvent: J.JavaScriptObject, SVGAngle: J.JavaScriptObject, SVGAnimatedAngle: J.JavaScriptObject, SVGAnimatedBoolean: J.JavaScriptObject, SVGAnimatedEnumeration: J.JavaScriptObject, SVGAnimatedInteger: J.JavaScriptObject, SVGAnimatedLength: J.JavaScriptObject, SVGAnimatedLengthList: J.JavaScriptObject, SVGAnimatedNumber: J.JavaScriptObject, SVGAnimatedNumberList: J.JavaScriptObject, SVGAnimatedPreserveAspectRatio: J.JavaScriptObject, SVGAnimatedRect: J.JavaScriptObject, SVGAnimatedString: J.JavaScriptObject, SVGAnimatedTransformList: J.JavaScriptObject, SVGMatrix: J.JavaScriptObject, SVGPoint: J.JavaScriptObject, SVGPreserveAspectRatio: J.JavaScriptObject, SVGRect: J.JavaScriptObject, SVGUnitTypes: J.JavaScriptObject, AudioListener: J.JavaScriptObject, AudioParam: J.JavaScriptObject, AudioProcessingEvent: J.JavaScriptObject, AudioTrack: J.JavaScriptObject, AudioWorkletGlobalScope: J.JavaScriptObject, AudioWorkletProcessor: J.JavaScriptObject, OfflineAudioCompletionEvent: J.JavaScriptObject, PeriodicWave: J.JavaScriptObject, WebGLActiveInfo: J.JavaScriptObject, ANGLEInstancedArrays: J.JavaScriptObject, ANGLE_instanced_arrays: J.JavaScriptObject, WebGLBuffer: J.JavaScriptObject, WebGLCanvas: J.JavaScriptObject, WebGLColorBufferFloat: J.JavaScriptObject, WebGLCompressedTextureASTC: J.JavaScriptObject, WebGLCompressedTextureATC: J.JavaScriptObject, WEBGL_compressed_texture_atc: J.JavaScriptObject, WebGLCompressedTextureETC1: J.JavaScriptObject, WEBGL_compressed_texture_etc1: J.JavaScriptObject, WebGLCompressedTextureETC: J.JavaScriptObject, WebGLCompressedTexturePVRTC: J.JavaScriptObject, WEBGL_compressed_texture_pvrtc: J.JavaScriptObject, WebGLCompressedTextureS3TC: J.JavaScriptObject, WEBGL_compressed_texture_s3tc: J.JavaScriptObject, WebGLCompressedTextureS3TCsRGB: J.JavaScriptObject, WebGLContextEvent: J.JavaScriptObject, WebGLDebugRendererInfo: J.JavaScriptObject, WEBGL_debug_renderer_info: J.JavaScriptObject, WebGLDebugShaders: J.JavaScriptObject, WEBGL_debug_shaders: J.JavaScriptObject, WebGLDepthTexture: J.JavaScriptObject, WEBGL_depth_texture: J.JavaScriptObject, WebGLDrawBuffers: J.JavaScriptObject, WEBGL_draw_buffers: J.JavaScriptObject, EXTsRGB: J.JavaScriptObject, EXT_sRGB: J.JavaScriptObject, EXTBlendMinMax: J.JavaScriptObject, EXT_blend_minmax: J.JavaScriptObject, EXTColorBufferFloat: J.JavaScriptObject, EXTColorBufferHalfFloat: J.JavaScriptObject, EXTDisjointTimerQuery: J.JavaScriptObject, EXTDisjointTimerQueryWebGL2: J.JavaScriptObject, EXTFragDepth: J.JavaScriptObject, EXT_frag_depth: J.JavaScriptObject, EXTShaderTextureLOD: J.JavaScriptObject, EXT_shader_texture_lod: J.JavaScriptObject, EXTTextureFilterAnisotropic: J.JavaScriptObject, EXT_texture_filter_anisotropic: J.JavaScriptObject, WebGLFramebuffer: J.JavaScriptObject, WebGLGetBufferSubDataAsync: J.JavaScriptObject, WebGLLoseContext: J.JavaScriptObject, WebGLExtensionLoseContext: J.JavaScriptObject, WEBGL_lose_context: J.JavaScriptObject, OESElementIndexUint: J.JavaScriptObject, OES_element_index_uint: J.JavaScriptObject, OESStandardDerivatives: J.JavaScriptObject, OES_standard_derivatives: J.JavaScriptObject, OESTextureFloat: J.JavaScriptObject, OES_texture_float: J.JavaScriptObject, OESTextureFloatLinear: J.JavaScriptObject, OES_texture_float_linear: J.JavaScriptObject, OESTextureHalfFloat: J.JavaScriptObject, OES_texture_half_float: J.JavaScriptObject, OESTextureHalfFloatLinear: J.JavaScriptObject, OES_texture_half_float_linear: J.JavaScriptObject, OESVertexArrayObject: J.JavaScriptObject, OES_vertex_array_object: J.JavaScriptObject, WebGLProgram: J.JavaScriptObject, WebGLQuery: J.JavaScriptObject, WebGLRenderbuffer: J.JavaScriptObject, WebGLRenderingContext: J.JavaScriptObject, WebGL2RenderingContext: J.JavaScriptObject, WebGLSampler: J.JavaScriptObject, WebGLShader: J.JavaScriptObject, WebGLShaderPrecisionFormat: J.JavaScriptObject, WebGLSync: J.JavaScriptObject, WebGLTexture: J.JavaScriptObject, WebGLTimerQueryEXT: J.JavaScriptObject, WebGLTransformFeedback: J.JavaScriptObject, WebGLUniformLocation: J.JavaScriptObject, WebGLVertexArrayObject: J.JavaScriptObject, WebGLVertexArrayObjectOES: J.JavaScriptObject, WebGL2RenderingContextBase: J.JavaScriptObject, ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List, HTMLAudioElement: A.HtmlElement, HTMLBRElement: A.HtmlElement, HTMLBaseElement: A.HtmlElement, HTMLBodyElement: A.HtmlElement, HTMLButtonElement: A.HtmlElement, HTMLCanvasElement: A.HtmlElement, HTMLContentElement: A.HtmlElement, HTMLDListElement: A.HtmlElement, HTMLDataElement: A.HtmlElement, HTMLDataListElement: A.HtmlElement, HTMLDetailsElement: A.HtmlElement, HTMLDialogElement: A.HtmlElement, HTMLDivElement: A.HtmlElement, HTMLEmbedElement: A.HtmlElement, HTMLFieldSetElement: A.HtmlElement, HTMLHRElement: A.HtmlElement, HTMLHeadElement: A.HtmlElement, HTMLHeadingElement: A.HtmlElement, HTMLHtmlElement: A.HtmlElement, HTMLIFrameElement: A.HtmlElement, HTMLImageElement: A.HtmlElement, HTMLInputElement: A.HtmlElement, HTMLLIElement: A.HtmlElement, HTMLLabelElement: A.HtmlElement, HTMLLegendElement: A.HtmlElement, HTMLLinkElement: A.HtmlElement, HTMLMapElement: A.HtmlElement, HTMLMediaElement: A.HtmlElement, HTMLMenuElement: A.HtmlElement, HTMLMetaElement: A.HtmlElement, HTMLMeterElement: A.HtmlElement, HTMLModElement: A.HtmlElement, HTMLOListElement: A.HtmlElement, HTMLObjectElement: A.HtmlElement, HTMLOptGroupElement: A.HtmlElement, HTMLOptionElement: A.HtmlElement, HTMLOutputElement: A.HtmlElement, HTMLParagraphElement: A.HtmlElement, HTMLParamElement: A.HtmlElement, HTMLPictureElement: A.HtmlElement, HTMLPreElement: A.HtmlElement, HTMLProgressElement: A.HtmlElement, HTMLQuoteElement: A.HtmlElement, HTMLScriptElement: A.HtmlElement, HTMLShadowElement: A.HtmlElement, HTMLSlotElement: A.HtmlElement, HTMLSourceElement: A.HtmlElement, HTMLSpanElement: A.HtmlElement, HTMLStyleElement: A.HtmlElement, HTMLTableCaptionElement: A.HtmlElement, HTMLTableCellElement: A.HtmlElement, HTMLTableDataCellElement: A.HtmlElement, HTMLTableHeaderCellElement: A.HtmlElement, HTMLTableColElement: A.HtmlElement, HTMLTableElement: A.HtmlElement, HTMLTableRowElement: A.HtmlElement, HTMLTableSectionElement: A.HtmlElement, HTMLTemplateElement: A.HtmlElement, HTMLTextAreaElement: A.HtmlElement, HTMLTimeElement: A.HtmlElement, HTMLTitleElement: A.HtmlElement, HTMLTrackElement: A.HtmlElement, HTMLUListElement: A.HtmlElement, HTMLUnknownElement: A.HtmlElement, HTMLVideoElement: A.HtmlElement, HTMLDirectoryElement: A.HtmlElement, HTMLFontElement: A.HtmlElement, HTMLFrameElement: A.HtmlElement, HTMLFrameSetElement: A.HtmlElement, HTMLMarqueeElement: A.HtmlElement, HTMLElement: A.HtmlElement, AccessibleNodeList: A.AccessibleNodeList, HTMLAnchorElement: A.AnchorElement, HTMLAreaElement: A.AreaElement, Blob: A.Blob, CDATASection: A.CharacterData, CharacterData: A.CharacterData, Comment: A.CharacterData, ProcessingInstruction: A.CharacterData, Text: A.CharacterData, CSSPerspective: A.CssPerspective, CSSCharsetRule: A.CssRule, CSSConditionRule: A.CssRule, CSSFontFaceRule: A.CssRule, CSSGroupingRule: A.CssRule, CSSImportRule: A.CssRule, CSSKeyframeRule: A.CssRule, MozCSSKeyframeRule: A.CssRule, WebKitCSSKeyframeRule: A.CssRule, CSSKeyframesRule: A.CssRule, MozCSSKeyframesRule: A.CssRule, WebKitCSSKeyframesRule: A.CssRule, CSSMediaRule: A.CssRule, CSSNamespaceRule: A.CssRule, CSSPageRule: A.CssRule, CSSRule: A.CssRule, CSSStyleRule: A.CssRule, CSSSupportsRule: A.CssRule, CSSViewportRule: A.CssRule, CSSStyleDeclaration: A.CssStyleDeclaration, MSStyleCSSProperties: A.CssStyleDeclaration, CSS2Properties: A.CssStyleDeclaration, CSSImageValue: A.CssStyleValue, CSSKeywordValue: A.CssStyleValue, CSSNumericValue: A.CssStyleValue, CSSPositionValue: A.CssStyleValue, CSSResourceValue: A.CssStyleValue, CSSUnitValue: A.CssStyleValue, CSSURLImageValue: A.CssStyleValue, CSSStyleValue: A.CssStyleValue, CSSMatrixComponent: A.CssTransformComponent, CSSRotation: A.CssTransformComponent, CSSScale: A.CssTransformComponent, CSSSkew: A.CssTransformComponent, CSSTranslation: A.CssTransformComponent, CSSTransformComponent: A.CssTransformComponent, CSSTransformValue: A.CssTransformValue, CSSUnparsedValue: A.CssUnparsedValue, DataTransferItemList: A.DataTransferItemList, DOMException: A.DomException, ClientRectList: A.DomRectList, DOMRectList: A.DomRectList, DOMRectReadOnly: A.DomRectReadOnly, DOMStringList: A.DomStringList, DOMTokenList: A.DomTokenList, MathMLElement: A.Element, SVGAElement: A.Element, SVGAnimateElement: A.Element, SVGAnimateMotionElement: A.Element, SVGAnimateTransformElement: A.Element, SVGAnimationElement: A.Element, SVGCircleElement: A.Element, SVGClipPathElement: A.Element, SVGDefsElement: A.Element, SVGDescElement: A.Element, SVGDiscardElement: A.Element, SVGEllipseElement: A.Element, SVGFEBlendElement: A.Element, SVGFEColorMatrixElement: A.Element, SVGFEComponentTransferElement: A.Element, SVGFECompositeElement: A.Element, SVGFEConvolveMatrixElement: A.Element, SVGFEDiffuseLightingElement: A.Element, SVGFEDisplacementMapElement: A.Element, SVGFEDistantLightElement: A.Element, SVGFEFloodElement: A.Element, SVGFEFuncAElement: A.Element, SVGFEFuncBElement: A.Element, SVGFEFuncGElement: A.Element, SVGFEFuncRElement: A.Element, SVGFEGaussianBlurElement: A.Element, SVGFEImageElement: A.Element, SVGFEMergeElement: A.Element, SVGFEMergeNodeElement: A.Element, SVGFEMorphologyElement: A.Element, SVGFEOffsetElement: A.Element, SVGFEPointLightElement: A.Element, SVGFESpecularLightingElement: A.Element, SVGFESpotLightElement: A.Element, SVGFETileElement: A.Element, SVGFETurbulenceElement: A.Element, SVGFilterElement: A.Element, SVGForeignObjectElement: A.Element, SVGGElement: A.Element, SVGGeometryElement: A.Element, SVGGraphicsElement: A.Element, SVGImageElement: A.Element, SVGLineElement: A.Element, SVGLinearGradientElement: A.Element, SVGMarkerElement: A.Element, SVGMaskElement: A.Element, SVGMetadataElement: A.Element, SVGPathElement: A.Element, SVGPatternElement: A.Element, SVGPolygonElement: A.Element, SVGPolylineElement: A.Element, SVGRadialGradientElement: A.Element, SVGRectElement: A.Element, SVGScriptElement: A.Element, SVGSetElement: A.Element, SVGStopElement: A.Element, SVGStyleElement: A.Element, SVGElement: A.Element, SVGSVGElement: A.Element, SVGSwitchElement: A.Element, SVGSymbolElement: A.Element, SVGTSpanElement: A.Element, SVGTextContentElement: A.Element, SVGTextElement: A.Element, SVGTextPathElement: A.Element, SVGTextPositioningElement: A.Element, SVGTitleElement: A.Element, SVGUseElement: A.Element, SVGViewElement: A.Element, SVGGradientElement: A.Element, SVGComponentTransferFunctionElement: A.Element, SVGFEDropShadowElement: A.Element, SVGMPathElement: A.Element, Element: A.Element, AbsoluteOrientationSensor: A.EventTarget, Accelerometer: A.EventTarget, AccessibleNode: A.EventTarget, AmbientLightSensor: A.EventTarget, Animation: A.EventTarget, ApplicationCache: A.EventTarget, DOMApplicationCache: A.EventTarget, OfflineResourceList: A.EventTarget, BackgroundFetchRegistration: A.EventTarget, BatteryManager: A.EventTarget, BroadcastChannel: A.EventTarget, CanvasCaptureMediaStreamTrack: A.EventTarget, DedicatedWorkerGlobalScope: A.EventTarget, EventSource: A.EventTarget, FileReader: A.EventTarget, FontFaceSet: A.EventTarget, Gyroscope: A.EventTarget, XMLHttpRequest: A.EventTarget, XMLHttpRequestEventTarget: A.EventTarget, XMLHttpRequestUpload: A.EventTarget, LinearAccelerationSensor: A.EventTarget, Magnetometer: A.EventTarget, MediaDevices: A.EventTarget, MediaKeySession: A.EventTarget, MediaQueryList: A.EventTarget, MediaRecorder: A.EventTarget, MediaSource: A.EventTarget, MediaStream: A.EventTarget, MediaStreamTrack: A.EventTarget, MessagePort: A.EventTarget, MIDIAccess: A.EventTarget, MIDIInput: A.EventTarget, MIDIOutput: A.EventTarget, MIDIPort: A.EventTarget, NetworkInformation: A.EventTarget, Notification: A.EventTarget, OffscreenCanvas: A.EventTarget, OrientationSensor: A.EventTarget, PaymentRequest: A.EventTarget, Performance: A.EventTarget, PermissionStatus: A.EventTarget, PresentationAvailability: A.EventTarget, PresentationConnection: A.EventTarget, PresentationConnectionList: A.EventTarget, PresentationRequest: A.EventTarget, RelativeOrientationSensor: A.EventTarget, RemotePlayback: A.EventTarget, RTCDataChannel: A.EventTarget, DataChannel: A.EventTarget, RTCDTMFSender: A.EventTarget, RTCPeerConnection: A.EventTarget, webkitRTCPeerConnection: A.EventTarget, mozRTCPeerConnection: A.EventTarget, ScreenOrientation: A.EventTarget, Sensor: A.EventTarget, ServiceWorker: A.EventTarget, ServiceWorkerContainer: A.EventTarget, ServiceWorkerGlobalScope: A.EventTarget, ServiceWorkerRegistration: A.EventTarget, SharedWorker: A.EventTarget, SharedWorkerGlobalScope: A.EventTarget, SpeechRecognition: A.EventTarget, webkitSpeechRecognition: A.EventTarget, SpeechSynthesis: A.EventTarget, SpeechSynthesisUtterance: A.EventTarget, VR: A.EventTarget, VRDevice: A.EventTarget, VRDisplay: A.EventTarget, VRSession: A.EventTarget, VisualViewport: A.EventTarget, WebSocket: A.EventTarget, Window: A.EventTarget, DOMWindow: A.EventTarget, Worker: A.EventTarget, WorkerGlobalScope: A.EventTarget, WorkerPerformance: A.EventTarget, BluetoothDevice: A.EventTarget, BluetoothRemoteGATTCharacteristic: A.EventTarget, Clipboard: A.EventTarget, MojoInterfaceInterceptor: A.EventTarget, USB: A.EventTarget, IDBDatabase: A.EventTarget, IDBOpenDBRequest: A.EventTarget, IDBVersionChangeRequest: A.EventTarget, IDBRequest: A.EventTarget, IDBTransaction: A.EventTarget, AnalyserNode: A.EventTarget, RealtimeAnalyserNode: A.EventTarget, AudioBufferSourceNode: A.EventTarget, AudioDestinationNode: A.EventTarget, AudioNode: A.EventTarget, AudioScheduledSourceNode: A.EventTarget, AudioWorkletNode: A.EventTarget, BiquadFilterNode: A.EventTarget, ChannelMergerNode: A.EventTarget, AudioChannelMerger: A.EventTarget, ChannelSplitterNode: A.EventTarget, AudioChannelSplitter: A.EventTarget, ConstantSourceNode: A.EventTarget, ConvolverNode: A.EventTarget, DelayNode: A.EventTarget, DynamicsCompressorNode: A.EventTarget, GainNode: A.EventTarget, AudioGainNode: A.EventTarget, IIRFilterNode: A.EventTarget, MediaElementAudioSourceNode: A.EventTarget, MediaStreamAudioDestinationNode: A.EventTarget, MediaStreamAudioSourceNode: A.EventTarget, OscillatorNode: A.EventTarget, Oscillator: A.EventTarget, PannerNode: A.EventTarget, AudioPannerNode: A.EventTarget, webkitAudioPannerNode: A.EventTarget, ScriptProcessorNode: A.EventTarget, JavaScriptAudioNode: A.EventTarget, StereoPannerNode: A.EventTarget, WaveShaperNode: A.EventTarget, EventTarget: A.EventTarget, File: A.File, FileList: A.FileList, FileWriter: A.FileWriter, HTMLFormElement: A.FormElement, Gamepad: A.Gamepad, History: A.History, HTMLCollection: A.HtmlCollection, HTMLFormControlsCollection: A.HtmlCollection, HTMLOptionsCollection: A.HtmlCollection, Location: A.Location, MediaList: A.MediaList, MIDIInputMap: A.MidiInputMap, MIDIOutputMap: A.MidiOutputMap, MimeType: A.MimeType, MimeTypeArray: A.MimeTypeArray, Document: A.Node, DocumentFragment: A.Node, HTMLDocument: A.Node, ShadowRoot: A.Node, XMLDocument: A.Node, Attr: A.Node, DocumentType: A.Node, Node: A.Node, NodeList: A.NodeList, RadioNodeList: A.NodeList, Plugin: A.Plugin, PluginArray: A.PluginArray, RTCStatsReport: A.RtcStatsReport, HTMLSelectElement: A.SelectElement, SourceBuffer: A.SourceBuffer, SourceBufferList: A.SourceBufferList, SpeechGrammar: A.SpeechGrammar, SpeechGrammarList: A.SpeechGrammarList, SpeechRecognitionResult: A.SpeechRecognitionResult, Storage: A.Storage, CSSStyleSheet: A.StyleSheet, StyleSheet: A.StyleSheet, TextTrack: A.TextTrack, TextTrackCue: A.TextTrackCue, VTTCue: A.TextTrackCue, TextTrackCueList: A.TextTrackCueList, TextTrackList: A.TextTrackList, TimeRanges: A.TimeRanges, Touch: A.Touch, TouchList: A.TouchList, TrackDefaultList: A.TrackDefaultList, URL: A.Url, VideoTrackList: A.VideoTrackList, CSSRuleList: A._CssRuleList, ClientRect: A._DomRect, DOMRect: A._DomRect, GamepadList: A._GamepadList, NamedNodeMap: A._NamedNodeMap, MozNamedAttrMap: A._NamedNodeMap, SpeechRecognitionResultList: A._SpeechRecognitionResultList, StyleSheetList: A._StyleSheetList, SVGLength: A.Length, SVGLengthList: A.LengthList, SVGNumber: A.Number, SVGNumberList: A.NumberList, SVGPointList: A.PointList, SVGStringList: A.StringList, SVGTransform: A.Transform, SVGTransformList: A.TransformList, AudioBuffer: A.AudioBuffer, AudioParamMap: A.AudioParamMap, AudioTrackList: A.AudioTrackList, AudioContext: A.BaseAudioContext, webkitAudioContext: A.BaseAudioContext, BaseAudioContext: A.BaseAudioContext, OfflineAudioContext: A.OfflineAudioContext});
    hunkHelpers.setOrUpdateLeafTags({WebGL: true, AbortPaymentEvent: true, AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationEvent: true, AnimationPlaybackEvent: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, ApplicationCacheErrorEvent: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BackgroundFetchedEvent: true, BarProp: true, BarcodeDetector: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, BluetoothRemoteGATTDescriptor: true, Body: true, BudgetState: true, CacheStorage: true, CanMakePaymentEvent: true, CanvasGradient: true, CanvasPattern: true, CanvasRenderingContext2D: true, Client: true, Clients: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CookieStore: true, Coordinates: true, Credential: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, CustomEvent: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, DeviceRotationRate: true, DirectoryEntry: true, webkitFileSystemDirectoryEntry: true, FileSystemDirectoryEntry: true, DirectoryReader: true, WebKitDirectoryReader: true, webkitFileSystemDirectoryReader: true, FileSystemDirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, Entry: true, webkitFileSystemEntry: true, FileSystemEntry: true, ErrorEvent: true, Event: true, InputEvent: true, SubmitEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, External: true, FaceDetector: true, FederatedCredential: true, FetchEvent: true, FileEntry: true, webkitFileSystemFileEntry: true, FileSystemFileEntry: true, DOMFileSystem: true, WebKitFileSystem: true, webkitFileSystem: true, FileSystem: true, FocusEvent: true, FontFace: true, FontFaceSetLoadEvent: true, FontFaceSource: true, ForeignFetchEvent: true, FormData: true, GamepadButton: true, GamepadEvent: true, GamepadPose: true, Geolocation: true, Position: true, GeolocationPosition: true, HashChangeEvent: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, ImageData: true, InputDeviceCapabilities: true, InstallEvent: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyboardEvent: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaEncryptedEvent: true, MediaError: true, MediaKeyMessageEvent: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaQueryListEvent: true, MediaSession: true, MediaSettingsRange: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MemoryInfo: true, MessageChannel: true, MessageEvent: true, Metadata: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NavigatorUserMediaError: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, NotificationEvent: true, OffscreenCanvasRenderingContext2D: true, OverconstrainedError: true, PageTransitionEvent: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PaymentResponse: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PointerEvent: true, PopStateEvent: true, PositionError: true, GeolocationPositionError: true, Presentation: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, PresentationReceiver: true, ProgressEvent: true, PromiseRejectionEvent: true, PublicKeyCredential: true, PushEvent: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCPeerConnectionIceEvent: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, RTCTrackEvent: true, Screen: true, ScrollState: true, ScrollTimeline: true, SecurityPolicyViolationEvent: true, Selection: true, SensorErrorEvent: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, SpeechSynthesisVoice: true, StaticRange: true, StorageEvent: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncEvent: true, SyncManager: true, TaskAttributionTiming: true, TextDetector: true, TextEvent: true, TextMetrics: true, TouchEvent: true, TrackDefault: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UIEvent: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDeviceEvent: true, VRDisplayCapabilities: true, VRDisplayEvent: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRSessionEvent: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WheelEvent: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoInterfaceRequestEvent: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, ResourceProgressEvent: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBConnectionEvent: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, IDBVersionChangeEvent: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioProcessingEvent: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, OfflineAudioCompletionEvent: true, PeriodicWave: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLContextEvent: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL2RenderingContextBase: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLBaseElement: true, HTMLBodyElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLInputElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, Blob: false, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSKeywordValue: true, CSSNumericValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSUnitValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, MathMLElement: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGScriptElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, Element: false, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, DedicatedWorkerGlobalScope: true, EventSource: true, FileReader: true, FontFaceSet: true, Gyroscope: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: true, XMLHttpRequestUpload: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaKeySession: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MessagePort: true, MIDIAccess: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, NetworkInformation: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerGlobalScope: true, ServiceWorkerRegistration: true, SharedWorker: true, SharedWorkerGlobalScope: true, SpeechRecognition: true, webkitSpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, Window: true, DOMWindow: true, Worker: true, WorkerGlobalScope: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, File: true, FileList: true, FileWriter: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, Location: true, MediaList: true, MIDIInputMap: true, MIDIOutputMap: true, MimeType: true, MimeTypeArray: true, Document: true, DocumentFragment: true, HTMLDocument: true, ShadowRoot: true, XMLDocument: true, Attr: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, Plugin: true, PluginArray: true, RTCStatsReport: true, HTMLSelectElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, Storage: true, CSSStyleSheet: true, StyleSheet: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchList: true, TrackDefaultList: true, URL: true, VideoTrackList: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGStringList: true, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    A._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$8 = function(a, b, c, d, e, f, g, h) {
    return this(a, b, c, d, e, f, g, h);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=excel_service.web.g.dart.js.map
